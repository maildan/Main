{"version":3,"file":"static/chunks/app/dashboard/page-5e77545242e3a901.js","mappings":"uEACA,WAAkB,g0BCmBlBA,EAAAA,EAAOA,CAACC,QAAQ,CACdC,EAAAA,EAAaA,CACbC,EAAAA,EAAWA,CACXC,EAAAA,EAAYA,CACZC,EAAAA,EAAWA,CACXC,EAAAA,EAAKA,CACLC,EAAAA,EAAOA,CACPC,EAAAA,EAAMA,EAIR,IAAMC,EAAa,IACjB,IAAMC,EAAO,IAAIC,KAAKC,GACtB,MAAO,GAAkDF,MAAAA,CAA/CA,EAAKG,QAAQ,GAAGC,QAAQ,GAAGC,QAAQ,CAAC,EAAG,KAAK,KAAoDL,MAAAA,CAAjDA,EAAKM,UAAU,GAAGF,QAAQ,GAAGC,QAAQ,CAAC,EAAG,KAAK,KAAiD,OAA9CL,EAAKO,UAAU,GAAGH,QAAQ,GAAGC,QAAQ,CAAC,EAAG,KACrJ,EAGMG,EAAqC,CACzCC,YAAY,EACZC,qBAAqB,EACrBC,UAAW,CACTC,SAAU,GACZ,EACAC,OAAQ,CACNC,EAAG,CACDC,YAAa,GACbC,MAAO,CACLC,SAAS,EACTC,KAAM,aACR,CACF,EACAC,EAAG,CACDH,MAAO,CACLC,SAAS,EACTC,KAAM,MACR,CACF,CACF,EACAE,QAAS,CACPC,OAAQ,CACNC,SAAU,KACZ,EACAC,QAAS,CACPC,UAAW,CACTC,MAAO,IACL,IAAMA,EAAQC,EAAQC,OAAO,CAACF,KAAK,EAAI,GACjCG,EAAQF,EAAQG,MAAM,CAACf,CAAC,EAAI,EAClC,MAAO,GAAac,MAAAA,CAAVH,EAAM,MAAqB,OAAjBG,EAAME,OAAO,CAAC,GAAG,MACvC,CACF,CACF,CACF,CACF,EAgBe,SAASC,EAAc,CAOjB,KAPiB,cACpCC,EAAe,GAAI,eACnBC,EAAgB,EAAE,CAClBC,gBAAe,CAAI,QACnBC,EAAS,GAAG,UACZC,GAAW,CAAI,UACfC,EAAW,EAAK,CACG,CAPiB,EAS9B,CAACC,EAAYC,EAAc,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAMzC,CACDC,OAAQ,EAAE,CACVC,KAAM,EAAE,CACRC,MAAO,EAAE,CACTC,QAAS,EAAE,CACXC,IAAK,EAAE,GAIH,CAACC,EAAeC,EAAiB,CAAGP,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAMxC,MAGJ,CAACQ,EAAcC,EAAgB,CAAGT,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GAG3C,CAACU,EAAgBC,EAAkB,CAAGX,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAC,IAG/C,CAACY,EAAcC,EAAgB,CAAGb,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAgC,QAG1Ec,EAAWC,CAAAA,EAAAA,EAAAA,MAAAA,CAAMA,CAAwB,MAGzCC,EAAuB,GAC3B,EAAkB,GAAW,CAAP,QAClBC,EAAc,GAAW,CAAP,SACf,OAIHC,EAAkB,UACtB,GAAI,CACFT,EAAgB,IAEhB,IAAMU,EAAa,MAAMC,CAAAA,EAAAA,EAAAA,EAAAA,CAAaA,GAEtC,GAAID,EAAY,CACd,IAAMzD,EAAYyD,EAAWzD,SAAS,EAAID,KAAK4D,GAAG,GAC5CC,EAAgB/D,EAAWG,GAGjC6C,EAAiB,CACfgB,SAAUJ,EAAWK,YAAY,EAAIL,EAAWM,UAAU,EAAI,EAC9DC,UAAW,CAACP,EAAWQ,UAAU,GAAI,EAAM,OAAO,CAClDV,GADqD,SACxCE,EAAWS,YAAY,EAAIT,EAAWF,WAAW,EAAI,EAClEZ,IAAKc,EAAWU,MAAM,EAAIV,EAAWW,KAAK,WAC1CpE,CACF,GAGAmD,EAAgBG,EACdG,EAAWS,YAAY,EAAIT,EAAWF,WAAW,EAAI,IAIvDlB,EAAcgC,IAEZ,IAAMC,EAAY,IAAID,EAAK9B,MAAM,CAAEqB,EAAc,CAC3CW,EAAU,IAAIF,EAAK7B,IAAI,CAAEiB,EAAWK,YAAY,EAAIL,EAAWM,UAAU,EAAI,EAAE,CAC/ES,EAAW,IAAIH,EAAK5B,KAAK,CAAGgB,CAAAA,EAAWQ,UAAU,GAAI,EAAM,OAAO,CAAM,CACxEQ,EADqE,IACpDJ,EAAK3B,OAAO,CAAEe,EAAWS,YAAY,EAAIT,EAAWF,WAAW,EAAI,EAAE,CACtFmB,EAAS,IAAKL,EAAK1B,GAAG,EAAI,EAAE,CAAGc,EAAWU,MAAM,EAAIV,EAAWW,KAAK,EAAI,EAAE,CAWhF,OARIE,EAAUK,MAAM,CAAG5C,IACrBuC,EAAUM,KAAK,GACfL,CAFoC,CAE5BK,KAAK,GACbJ,EAASI,KAAK,GACdH,EAAWG,KAAK,GACZF,EAAOC,MAAM,CAAG5C,GAAe2C,EAAOE,KAAK,IAG1C,CACLrC,OAAQ+B,EACR9B,KAAM+B,EACN9B,MAAO+B,EACP9B,QAAS+B,EACT9B,IAAK+B,CACP,CACF,EACF,CACF,CAAE,MAAOG,EAAO,CACdC,QAAQD,KAAK,CAAC,kBAAmBA,EACnC,QAAU,CACR9B,GAAgB,EAClB,CACF,EAGMgC,EAA0B,UAC9B,GAAI,CACF9B,GAAkB,GAClB,IAAM+B,EAAS,MAAMC,CAAAA,EAAAA,EAAAA,EAAAA,CAASA,GAE9B,GAAID,GAAUA,EAAOE,OAAO,CAAE,CAC5B,IAAMC,EAAUH,EAAOG,OAAO,EAAI,EAClCL,QAAQM,GAAG,CAAC,eAAkC,OAAnBD,EAAQvD,OAAO,CAAC,GAAG,UAChD,CAGA,MAAM4B,GACR,CAAE,MAAOqB,EAAO,CACdC,QAAQD,KAAK,CAAC,cAAeA,EAC/B,QAAU,CACR5B,EAAkB,GACpB,CACF,EAGAoC,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KAER7B,IAGAJ,EAASkC,OAAO,CAAGC,YAAY,KAC7B/B,GACF,EAAG1B,GAGI,KACDsB,EAASkC,OAAO,EAAE,cACNlC,EAASkC,OAAO,CAElC,GACC,CAACxD,EAAa,EAEjB,IAAM0D,EAAY,CAChBjD,OAAQH,EAAWG,MAAM,CACzBkD,SAAU,CACR,CACElE,MAAO,iBACPmE,KAAMtD,EAAWI,IAAI,CACrBmD,YAAa,oBACbC,gBAAiB,0BACjBC,QAAS,EACX,KACI3D,EAAW,CAAC,CACdX,MAAO,WACPmE,KAAMtD,EAAWO,GAAG,CACpBgD,YAAa,qBACbC,gBAAiB,2BACjBC,QAAS,EACX,EAAE,CAAG,EAAE,CACR,EAGH,MACE,WAACC,MAAAA,CAAIC,UAAW,GAAuB5D,MAAAA,CAApB6D,IAAAA,SAAgB,CAAC,KAAmC,OAAhC7D,EAAW6D,IAAAA,QAAe,CAAG,cAClE,UAACC,KAAAA,CAAGF,UAAWC,IAAAA,KAAY,UAAE,aAG7B,UAACF,MAAAA,CAAIC,UAAW,GAA4BC,MAAAA,CAAzBA,IAAAA,cAAqB,CAAC,KAAwB,OAArBA,GAAM,CAAC9C,EAAa,WAC7DN,EACC,iCACE,WAACkD,MAAAA,CAAIC,UAAWC,IAAAA,IAAW,WACzB,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,SAAgB,UAAE,SACnC,WAACE,OAAAA,CAAKH,UAAWC,IAAAA,SAAgB,WAAGpD,EAAciB,QAAQ,CAACjC,OAAO,CAAC,GAAG,YAEvEM,GACC,WAAC4D,MAAAA,CAAIC,UAAWC,IAAAA,IAAW,WACzB,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,SAAgB,UAAE,QACnC,WAACE,OAAAA,CAAKH,UAAWC,IAAAA,SAAgB,WAAGpD,EAAcoB,SAAS,CAACpC,OAAO,CAAC,GAAG,YAG3E,WAACkE,MAAAA,CAAIC,UAAWC,IAAAA,IAAW,WACzB,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,SAAgB,UAAE,SACnC,WAACE,OAAAA,CAAKH,UAAWC,IAAAA,SAAgB,WAAGpD,EAAcW,WAAW,CAAC3B,OAAO,CAAC,GAAG,UAE1EM,GAAYU,EAAcD,GAAG,EAC5B,WAACmD,MAAAA,CAAIC,UAAWC,IAAAA,IAAW,WACzB,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,SAAgB,UAAE,SACnC,WAACE,OAAAA,CAAKH,UAAWC,IAAAA,SAAgB,WAAGpD,EAAcD,GAAG,CAACf,OAAO,CAAC,GAAG,eAKvE,UAACkE,MAAAA,CAAIC,UAAWC,IAAAA,OAAc,UAAE,kBAKpC,UAACF,MAAAA,CAAIC,UAAWC,IAAAA,cAAqB,CAAEG,MAAO,CAAElE,OAAQ,GAAU,OAAPA,EAAO,KAAI,WACpE,UAACmE,EAAAA,EAAIA,CAAAA,CAACV,KAAMF,EAAWa,QAAS/F,MAIjC0B,GACC,WAAC8D,MAAAA,CAAIC,UAAWC,IAAAA,QAAe,WAC7B,UAACM,SAAAA,CACCP,UAAWC,IAAAA,aAAoB,CAC/BO,QAAS/C,EACTgD,SAAU1D,WAETA,EAAe,UAAY,UAG9B,UAACwD,SAAAA,CACCP,UAAWC,IAAAA,QAAe,CAC1BO,QAASxB,EACTyB,SAAUxD,WAETA,EAAiB,aAAe,kBAMvC,UAAC8C,MAAAA,CAAIC,UAAW,GAA6BC,MAAAA,CAA1BA,IAAAA,eAAsB,CAAC,KAAwB,OAArBA,GAAM,CAAC9C,EAAa,WAC/D,WAAC4C,MAAAA,CAAIC,UAAWC,IAAAA,WAAkB,WACd,SAAjB9C,GAA2B,KACV,YAAjBA,GAA8B,KAC9BA,cAA6B,YAKxC,wBC5Se,SAASuD,EAAY,CAA0B,MAoCjBf,KApCT,MAAEA,CAAI,CAAoB,CAA1B,EAClC,GAAI,CAACA,EACH,IADS,EAEP,WAACI,MAAAA,CAAIC,UAAWC,IAAAA,MAAa,WAC3B,UAACU,IAAAA,UAAE,kBACH,UAACA,IAAAA,UAAE,iCAMT,IAAM7G,EAAa,IACjB,IAAM8G,EAAQC,KAAKC,KAAK,CAACC,EAAU,MAC7BC,EAAUH,KAAKC,KAAK,CAAC,EAAW,KAAQ,IACxCG,EAAOJ,KAAKC,KAAK,CAACC,EAAU,IAElC,MAAO,GAAoCC,MAAAA,CAAjCJ,EAAQ,EAAI,GAAS,OAANA,EAAM,OAAO,IAAiBK,MAAAA,CAAZD,EAAQ,MAAS,OAALC,EAAK,IAC9D,EAGMC,EAAa,GACJ,IAAIlH,KAAKmH,GACVC,kBAAkB,CAAC,QAAS,CACtCC,KAAM,UACNC,MAAO,OACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,SACV,GAGF,MACE,WAAC1B,MAAAA,CAAIC,UAAWC,IAAAA,SAAgB,WAE9B,WAACF,MAAAA,CAAIC,UAAWC,IAAAA,OAAc,WAC5B,WAACF,MAAAA,CAAIC,UAAWC,IAAAA,QAAe,WAC7B,UAACF,MAAAA,CAAIC,UAAWC,IAAAA,SAAgB,UAAGN,CAAAA,QAAAA,EAAAA,EAAK+B,aAAAA,GAAL/B,KAAAA,MAAAA,KAAAA,EAAAA,EAAoBgC,cAAc,KAAM,IAC3E,UAAC5B,MAAAA,CAAIC,UAAWC,IAAAA,SAAgB,UAAE,gBAGpC,WAACF,MAAAA,CAAIC,UAAWC,IAAAA,QAAe,WAC7B,UAACF,MAAAA,CAAIC,UAAWC,IAAAA,SAAgB,UAAGnG,EAAW6F,EAAKiC,eAAe,EAAI,KACtE,UAAC7B,MAAAA,CAAIC,UAAWC,IAAAA,SAAgB,UAAE,gBAGpC,WAACF,MAAAA,CAAIC,UAAWC,IAAAA,QAAe,WAC7B,UAACF,MAAAA,CAAIC,UAAWC,IAAAA,SAAgB,UAAGN,EAAKkC,YAAY,EAAI,IACxD,UAAC9B,MAAAA,CAAIC,UAAWC,IAAAA,SAAgB,UAAE,cAGpC,WAACF,MAAAA,CAAIC,UAAWC,IAAAA,QAAe,WAC7B,UAACF,MAAAA,CAAIC,UAAWC,IAAAA,SAAgB,UAAGN,EAAKmC,eAAe,CAAG,GAAmC,OAAhCnC,EAAKmC,eAAe,CAACjG,OAAO,CAAC,GAAG,KAAK,QAClG,UAACkE,MAAAA,CAAIC,UAAWC,IAAAA,SAAgB,UAAE,iBAKrCN,EAAKoC,WAAW,EACf,WAAChC,MAAAA,CAAIC,UAAWC,IAAAA,WAAkB,WAChC,UAACC,KAAAA,CAAGF,UAAWC,IAAAA,YAAmB,UAAE,UACpC,WAACF,MAAAA,CAAIC,UAAWC,IAAAA,WAAkB,WAChC,UAACF,MAAAA,CAAIC,UAAWC,IAAAA,WAAkB,UAAGiB,EAAWvB,EAAKoC,WAAW,CAAC9H,SAAS,IAC1E,WAAC8F,MAAAA,CAAIC,UAAWC,IAAAA,YAAmB,WACjC,WAACF,MAAAA,CAAIC,UAAWC,IAAAA,WAAkB,WAChC,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,gBAAuB,UAAE,YAC1C,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,gBAAuB,UAAGN,EAAKoC,WAAW,CAACC,QAAQ,CAACL,cAAc,QAErF,WAAC5B,MAAAA,CAAIC,UAAWC,IAAAA,WAAkB,WAChC,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,gBAAuB,UAAE,YAC1C,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,gBAAuB,UAAGnG,EAAW6F,EAAKoC,WAAW,CAACE,UAAU,OAEnF,WAAClC,MAAAA,CAAIC,UAAWC,IAAAA,WAAkB,WAChC,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,gBAAuB,UAAE,WAC1C,WAACE,OAAAA,CAAKH,UAAWC,IAAAA,gBAAuB,WACrCY,KAAKqB,KAAK,CAAC,EAAMH,WAAW,CAACC,QAAQ,CAAGrC,EAAKoC,WAAW,CAACE,UAAU,CAAI,IAAI,aAG/EtC,WAAKoC,WAAW,CAACI,QAAQ,EACxB,WAACpC,MAAAA,CAAIC,UAAWC,IAAAA,WAAkB,WAChC,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,gBAAuB,UAAE,SAC1C,WAACE,OAAAA,CAAKH,UAAWC,IAAAA,gBAAuB,WAAGN,EAAKoC,WAAW,CAACI,QAAQ,CAACtG,OAAO,CAAC,GAAG,mBAS3F8D,EAAKyC,WAAW,EAAIzC,EAAKyC,WAAW,CAACxD,MAAM,CAAG,GAC7C,WAACmB,MAAAA,CAAIC,UAAWC,IAAAA,WAAkB,WAChC,UAACC,KAAAA,CAAGF,UAAWC,IAAAA,YAAmB,UAAE,UACpC,UAACF,MAAAA,CAAIC,UAAWC,IAAAA,cAAqB,UACnC,WAACoC,QAAAA,CAAMrC,UAAWC,IAAAA,UAAiB,WACjC,UAACqC,QAAAA,UACC,WAACC,KAAAA,WACC,UAACC,KAAAA,UAAG,OACJ,UAACA,KAAAA,UAAG,WACJ,UAACA,KAAAA,UAAG,WACJ,UAACA,KAAAA,UAAG,aAGR,UAACC,QAAAA,UACE9C,EAAKyC,WAAW,CAACM,GAAG,CAAC,CAACC,EAAMC,IAC3B,WAACL,KAAAA,WACC,UAACM,KAAAA,UAAI3B,EAAWyB,EAAK5I,IAAI,IACzB,UAAC8I,KAAAA,UAAIF,EAAKX,QAAQ,CAACL,cAAc,KACjC,UAACkB,KAAAA,UAAI/I,EAAW6I,EAAKV,UAAU,IAC/B,UAACY,KAAAA,UAAIhC,KAAKqB,KAAK,CAAC,EAAMF,QAAQ,CAAGW,EAAKV,UAAU,CAAI,QAJ7CW,gBAc3B,eG9GA,IAAIE,EAA+B,KAC/BC,EAAoB,EAOjB,eAAeC,IACpB,GAAI,CAEF,IAAMC,EAAU,MAAMC,IACtB,MAAOD,OAAAA,EAAAA,EAJmCD,GAInCC,EAAAA,EAASE,SAATF,UAASE,GAAuB,EACzC,CAAE,MAAOrE,EAAO,CAEd,OADAC,QAAQD,KAAK,CAAC,mBAAoBA,GAC3B,EACT,CACF,CAMO,eAAeoE,IAEpB,IAAMtF,EAAM5D,KAAK4D,GAAG,GACpB,GAAIkF,GAAgBlF,EAAMmF,EACxB,OAAOD,EAGT,GAAI,CAEF,IAN2C,EAM1B,MAAMM,CAAAA,EAAAA,EAAAA,EAAAA,CAAUA,GAEjC,GAAI,CAACC,EAASlE,OAAO,EAAI,CAACkE,EAASJ,OAAO,CACxC,CAD0C,MACnC,KAOT,OAHAH,EAAeO,EAASJ,OAAO,CAC/BF,EAAoBnF,EAtCH,IAsCS0F,EAEVL,KAxCY,EAwCL,CACvB,MAAOnE,EAAO,CAEd,OADAC,QAAQD,KAAK,CAAC,kBAAmBA,GAC1B,IACT,CACF,CAOO,eAAeyE,EAAsBC,CAAe,EACzD,GAAI,CACF,IAAMH,EAAW,MAAMI,CAAAA,EAAAA,EAAAA,EAAAA,CAAwBA,CAACD,GAEhD,GAAIH,GAAYA,EAASlE,OAAO,CAG9B,CAHgC,MAEhC2D,EAAe,KACR,GAGT,OAAO,CACT,CAAE,MAAOhE,EAAO,CAEd,OADAC,QAAQD,KAAK,CAAC,WAAmC,OAAxB0E,EAAS,MAAQ,OAAO,QAAO1E,IACjD,CACT,CACF,CAeO,eAAe4E,IACpB,GAAI,CACF,IAAMT,EAAU,MAAMC,IAEtB,GAAI,CAACD,GAAW,CAACA,EAAQU,SAAS,CAChC,CADkC,MAC3B,EAIT,IAAIC,EAAQ,EAWZ,GAREA,EADyB,eAAe,CAAtCX,EAAQY,UAAU,CACZ,GACwB,CADpB,gBACqC,CAAxCZ,EADsB,UACJ,CACnB,GAEA,CAFI,EAMVA,CAJU,CAIFa,MAAM,EAAIb,EAAQc,KANG,KAMO,CAJJ,CAKlC,IAAMC,EAAcf,EAAQa,MAAM,CAACG,WAAW,GACxCC,EAAYjB,EAAQc,UAAU,CAACE,WAAW,GAE5CD,EAAYG,QAAQ,CAAC,YACtBD,CAAAA,CAAUC,QAAQ,CAAC,QAAUD,EAAUC,QAAQ,CAAC,OAAK,CACtDP,EAD0D,CACjD,GACAI,EAAYG,QAAQ,CAAC,SAC7BD,CAAAA,CAAUC,QAAQ,CAAC,WAAaD,EAAUC,QAAQ,CAAC,QAAM,CAC1DP,EAD8D,CACrD,GACAI,EAAYG,QAAQ,CAAC,UAAYD,EAAUC,QAAQ,CAAC,SAAS,CACtEP,GAAS,GAEb,CAGA,OAAO/C,KAAKuD,GAAG,CAAC,IAAKvD,KAAKwD,GAAG,CAAC,EAAGT,GACnC,CAAE,MAAO9E,EAAO,CAEd,OADAC,QAAQD,KAAK,CAAC,gBAAiBA,GACxB,CACT,CACF,CAQO,eAAewF,EACpBC,CAA8B,CAC9B5E,CAAa,EAEb,GAAI,CAEF,IAAMsD,EAAU,MAAMC,IACtB,GAAI,CAACD,GAAW,CAACA,EAAQU,SAAS,EAAI,CAACV,EAAQE,mBAAmB,CAEhE,CAFkE,MAClEpE,QAAQyF,IAAI,CAAC,gCACN,KAIT,IAAMnB,EAAW,MAAMoB,CAAAA,EAAAA,EAAAA,EAAAA,CAAqBA,CAAI9E,EAAM4E,EAASpK,QAAQ,IAEvE,GAAI,CAACkJ,EAASlE,OAAO,CAEnB,CAFqB,MACrBJ,QAAQD,KAAK,CAAC,aAAcuE,EAASvE,KAAK,EACnC,KAGT,OAAOuE,EAASpE,MAAM,CACtB,MAAOH,EAAO,CAEd,OADAC,QAAQD,KAAK,CAAC,gBAAiBA,GACxB,IACT,CACF,CAMO,eAAe4F,IACpB,OAAOnB,GAAsB,EAC/B,CAMO,eAAeoB,IACpB,OAAOpB,GAAsB,EAC/B,CAIEqB,OAAOC,gBAAgB,CAAG,CACxB7B,wBAAwBA,CAAAA,oBACxBE,qBADwBF,GAExBO,wBACAmB,yBACAC,yBACAjB,iBACAY,CACF,EC9KF,IAAMQ,EAAW,CACfC,aAAc,KACdC,UAAW,EACXlB,MAAM,WACNmB,YAAY,UACd,EAOO,eAAeC,IAEpB,IAAMtH,EAAM5D,KAAK4D,GAAG,GACpB,GAAIkH,EAASC,YAAY,EAAInH,EAAMkH,EAASE,SAAS,CAAG,IACtD,GAD6D,IACtDF,EAASC,YAAY,CAI9B,IAAMA,EAAgC,CACpCI,eAAgB,GAChBC,iBAAiB,EACjBC,iBAAiB,EACjBC,qBAAqB,EACrBxB,OAAQ,UACRyB,SAAU,UACVC,YAAY,EACZC,QAAS,CACX,EAEA,GAAI,CAEF,GAAyD,CAArD,MAA6B,MAAI,OAAOC,SAC1C,OAAOX,EAIT,IAAMY,EAASD,SAASE,aAAa,CAAC,UAGlCC,EAAKF,EAAOG,UAAU,CAAC,UAAYH,EAAOG,UAAU,CAAC,sBAGzD,GAFAf,EAAaI,cAAc,CAAG,CAAC,CAACU,EAE5BA,EAAI,OAEN,IAAME,EAAYF,EAAGG,YAAY,CAAC,6BAC9BD,IACFhB,EAAajB,KADA,CACM,CAAG+B,EAAGI,YAAY,CAACF,EAAUG,qBAAqB,GAAK,UAC1EnB,EAAaQ,QAAQ,CAAGM,EAAGI,YAAY,CAACF,EAAUI,uBAAuB,GAAK,WAuDpFZ,EAAWA,CAPkBA,EA5CgCR,EAAaQ,IA4C7B,IA5CqC,EAmD9DtB,WAAW,GAnD3Bc,EAAaO,mBAAmB,CAoD7B,CAPmB,CA7Cac,cA8CtB,WAAY,WAAY,iBACvC,yBAA0B,cAAe,QACzC,cAAe,eAChB,CAGyBC,IAAI,CAACC,GAAMf,EAASpB,QAAQ,CAACmC,IAjDnDxB,EAAShB,MAAM,CAuDrB,SAASyC,CAA6B,CAAEhB,CAAgB,EACtD,IAAMvB,EAAcF,EAAOG,WAAW,GAChCuC,EAAgBjB,EAAStB,WAAW,GAE1C,GAAID,EAAYG,QAAQ,CAAC,WAAaqC,EAAcrC,QAAQ,CAAC,UAC3D,CADsE,KACtE,SACK,GAAIH,EAAYG,QAAQ,CAAC,QAAUqC,EAAcrC,QAAQ,CAAC,QACtDH,EAAYG,QAAQ,CAAC,QAAUqC,EAAcrC,QAAQ,CAAC,UAC/D,CAD0E,KAC1E,MACK,GAAIH,EAAYG,QAAQ,CAAC,UAAYqC,EAAcrC,QAAQ,CAAC,SACjE,CAD2E,KAC3E,QACK,GAAIH,EAAYG,QAAQ,CAAC,UAAYqC,EAAcrC,QAAQ,CAAC,SACjE,CAD2E,KAC3E,QACK,GAAIH,EAAYG,QAAQ,CAAC,cAAgBqC,EAAcrC,QAAQ,CAAC,aACrE,CADmF,KACnF,iBACK,GAAIH,EAAYG,QAAQ,CAAC,aAAeqC,EAAcrC,QAAQ,CAAC,UACpE,CAD+E,KAC/E,gBACK,GAAIH,EAAYG,QAAQ,CAAC,QAAUqC,EAAcrC,QAAQ,CAAC,QAC/D,CADwE,KACxE,WACK,GAAIH,EAAYG,QAAQ,CAAC,gBAAkBqC,EAAcrC,QAAQ,CAAC,WACvE,CADmF,KACnF,mBACK,GAAIqC,EAAcrC,QAAQ,CAAC,eAChC,CADgD,KAChD,mBACK,GAAIqC,EAAcrC,QAAQ,CAAC,aAAeqC,EAAcrC,QAAQ,CAAC,YACtE,CADmF,KACnF,WAGF,eACF,EAnFuCY,EAAajB,MAAM,CAAEiB,EAAaQ,QAAQ,EAG3ET,EAASG,YAAY,CAAGwB,SAqFrBA,CAAqC,CAAE3C,CAAiB,EAC/D,IAAM0C,EAAgBjB,EAAStB,WAAW,UAGtCuC,EAAcrC,QAAQ,CAAC,QACvBqC,EAAcrC,QAAQ,CAAC,YACvBqC,EAAcrC,QAAQ,CAAC,WACvBqC,EAAcrC,QAAQ,CAAC,WACvBqC,EAAcrC,QAAQ,CAAC,YACvBqC,EAAcrC,QAAQ,CAAC,OAASqC,EAAcE,KAAK,CAAC,qBACtD,CAD4E,UAK1EF,EAAcrC,QAAQ,CAAC,QACvBqC,EAAcrC,QAAQ,CAAC,SACvBqC,EAAcrC,QAAQ,CAAC,gBACvBL,UAAAA,GACA0C,EAAcrC,QAAQ,CAAC,YACvBL,QAAAA,GACAA,YAA+B,CAA/BA,EACF,aAIF,SACF,EA/GmDiB,EAAaQ,QAAQ,CAAET,EAAShB,MAAM,EACnFiB,EAAaS,UAAU,CAAwB,aAArBV,EAASG,YAAY,CAG/CF,EAAaU,OAAO,CAAGkB,SAgHpBA,CACU,CACjBpB,CAAgB,CAChBN,CAA6B,CAC7BK,CAA4B,EAE5B,GAAI,CAACA,EACH,OAAO,EAGT,CAHY,GAGNkB,EAAgBjB,EAAStB,EAJL,KACA,IAGgB,SAG1C,gBAAqCH,eAAkC,GAC9D,EAILmB,YAA2C,CAA3CA,EAEF,EAAkBd,QAAQ,CAAC,QACvBqC,EAAcrC,QAAQ,CAAC,eACvBqC,EAAcrC,QAAQ,CAAC,eACvBqC,EAAcrC,QAAQ,CAAC,gBACvBqC,EAAcrC,QAAQ,CAAC,eAClB,CADkC,EAKvCqC,EAAcrC,QAAQ,CAAC,eACvBqC,EAAcrC,QAAQ,CAAC,eACvBqC,EAAcrC,QAAQ,CAAC,gBACvBqC,EAAcrC,QAAQ,CAAC,eAKpB,CALoC,EAS7C,cAAiD,KAE3CqC,EAAcrC,QAAQ,CAAC,aACvBqC,EAAcrC,QAAQ,CAAC,aACvBqC,EAAcrC,QAAQ,CAAC,YACvBqC,EAAcrC,QAAQ,CAAC,cAClB,CADgC,CASpC,CACT,EAvKQW,EAAShB,MAAM,CACfiB,EAAaQ,QAAQ,CACrBT,EAASG,YAAY,CACrBF,EAAaO,mBAAmB,CAEpC,CAkBA,OAdAP,EAAaK,eAAe,CAAG,CAAC,CAACwB,EADhBd,UAAU,CAAC,UAI5Bf,EAAaM,eAAe,CAAG,QAASwB,UAGpChB,GAAqB,WAAwB,CAAvCf,EAAShB,MAAM,GACvBiB,EAAa+B,YAAY,CAAGC,SA4JzBA,CAA2C,CAAEjD,CAAiB,CAAEkD,CAAY,EAGnF,GADkBnB,CACdoB,CADiBjB,UACN,EADkB,CAAC,6BAMhC,OAAQgB,GACN,KAAK,EAAG,OAAO,IAAI,MAAM,EACjB,IADuB,GAChB,IAAI,MAAM,EACjB,IADuB,GAChB,IACf,MADyB,GAChB,GADsB,IACf,IAAI,CAKxB,KAL8B,EAKtBlD,GACN,CANkC,GAMlC,SAEA,UADE,OAAgB,IAATkD,EAAa,IAAI,CAAgB,IAATA,EAAa,IAAI,CAAO,IAAI,KAG7D,QACE,OAAOA,MAAa,IAAI,CAAO,IAAI,KACrC,QACE,OAAgB,IAATA,EAAa,IAAI,CAAO,IAAI,SAEnC,OAAO,IAAI,CAEjB,EAzLoDnB,EAAIf,CAuLjC,CAvL0ChB,MAAM,CAAEiB,EAAaU,QAAO,CAuLnD,CAnLtCX,EAASC,YAAY,CAAGA,EACxBD,EAASE,SAAS,CAAGpH,EAEdmH,CACT,CAAE,MAAOjG,EAAO,CAEd,OADAC,QAAQD,KAAK,CAAC,kBAAmBA,GAC1BiG,CACT,CACF,CAkPEG,IAAwBgC,IAAI,CAACC,IAC3BvC,OAAOwC,SAAS,CAAG,CACjBC,cAAe,IAAMF,EAAK7B,mBAAmB,CAC7CC,SAAU4B,EAAK5B,QAAQ,CACvBzB,OAAQqD,EAAKrD,MAAM,CACnBwD,WAAY,IAAO,EAAEN,KAAMG,EAAK1B,OAAO,CAAE8B,KAAMC,SAS5CA,CAA+B,EACtC,OAAQR,GACN,KAAK,EAAG,MAAO,UACf,MAAK,EAAG,MAAO,aACf,MAAK,EAAG,MAAO,WACf,MAAK,EAAG,MAAO,UACf,SAAS,MAAO,SAClB,CACF,EAjBwEG,EAAK1B,OAAO,EAAE,EAChFW,sBAAuB,IAAMe,EAAK7B,mBAAmB,CAEzD,0BC1Xa,SAASmC,IACtB,IAAMC,EAASC,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,GAClB,CAACC,EAAWC,EAAa,CAAGtL,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GACrC,CAACuL,EAAOC,EAAS,CAAGxL,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAM,MAClC,CAAC0G,EAAS+E,EAAW,CAAGzL,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAM,MAGtC,cAAE0L,CAAY,gBAAEC,CAAc,CAAE,CAAGC,SH2N3BC,MAA0B9H,EAAAA,QG3NmB6H,EH2NnB7H,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAKtC,CAAC,EACG,SACJ+H,GAAU,CAAI,WACdC,EAAY,EAAE,UACdC,EAAW,GAAK,mBAChBC,GAAoB,CAAI,CACzB,CAAGlI,EAEE,WAAEmI,CAAS,CAAE,CAAGC,SD1ORA,EACd,GAAM,CAACC,ECyOuBD,EDzOL,CAAGnM,CAAAA,EAAAA,EAAAA,CADNmM,OACMnM,CAAQA,CAAU,EAAE,EAG1CkM,EAAYG,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,SAACC,CAAAA,MAAiBvI,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAwB,CAAC,EACjEwI,EAAK9O,KAAK4D,GAAG,GACb2J,EAAOjH,EAAQiH,IAAI,EAAI,OACvB5M,EAAW2F,EAAQ3F,QAAQ,EAAI,IAUrC,OAPAoO,EAAUzK,GAAQ,IAAIA,EAAM,IAAEwK,UAAID,OAAStB,CAAK,EAAE,EAGlDyB,WAAW,KACTD,EAAUzK,GAAQA,EAAK2K,MAAM,CAACC,GAASA,EAAMJ,EAAE,GAAKA,GACtD,EAAGnO,GAEImO,CACT,EAAG,EAAE,EAYL,MAAO,QACLH,YACAF,EACAU,UAZgBP,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,IAC5BG,EAAUzK,GAAQA,EAAK2K,MAAM,CAACC,GAASA,EAAMJ,EAAE,GAAKA,GACtD,EAAG,EAAE,EAWHM,eARqBR,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,KACjCG,EAAU,EAAE,CACd,EAAG,EAAE,CAOL,CACF,ICuMQ,CAACd,EAAcoB,EAAgB,CAAG9M,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GAC3C,CAAC+M,EAAkBC,EAAoB,CAAGhN,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAA4B,MAC9EiN,EAAclM,CAAAA,EAAAA,EAAAA,MAAAA,CAAMA,CAAwB,MAE5CmM,EAAkBb,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,UAClC,GAAI,IAAYX,EAEhB,GAAI,CACFoB,GAAgB,GAEhB,EAL4B,EAKtBK,EAAiB,MAAM/L,CAAAA,EAAAA,EAAAA,EAAAA,CAAaA,GAE1C,GAAI,CAAC+L,EAAevK,OAAO,CACzB,CAD2B,KACrB,MAAUuK,EAAe5K,KAAK,EAAI,6BAG1C,IAAM6K,EAAUD,EAAehM,UAAU,CAEzC,GAAIiM,GAAWA,EAAQnM,WAAW,CAAG8K,EAAW,CAC9C,IAAMsB,EACJD,EAAQnM,WAAW,CAAG,GAAK,EACzBmM,EAAQnM,WAAW,CAAG,GAAK,EAAI,EAE7BqM,EAAuB,MAAM3B,CAAAA,EAAAA,EAAAA,EAAAA,CAAcA,CAAC0B,GAElD,GAAIC,OAAAA,EAAAA,KAAAA,EAAAA,EAAsB1K,OAAO,UAAI0K,EAAAA,GAAjCA,EAAiCA,EAAAA,EAAsB5K,MAAAA,GAAQ,CACjEsK,EAAoBM,EAAqB5K,MAAM,EADZ4K,GAGZ,KACLA,EAAhB,IAAMzK,EAAUyK,CAAAA,QAAAA,EAAAA,EAAqB5K,MAAAA,GAArB4K,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA6BC,QAAAA,GAAY,EACzDrB,EAAU,2BAA8C,OAAnBrJ,EAAQvD,OAAO,CAAC,GAAG,iBAC1D,CAEJ,CACF,CAAE,MAAOkO,EAAK,CACRvB,GACFC,EAAU,cADW,iBACyE,OAArDsB,aAAeC,MAAQD,EAAIlB,OAAO,CAAG,iBAElF,QAAU,CACRQ,GAAgB,EAClB,CACF,EAAG,CAAChB,EAASJ,EAAcK,EAAWE,EAAmBC,EAAU,EAiBnE,MAfAnJ,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACJ+I,GAAWE,EAAW,GAAG,CAC3BkB,IAEAD,EAAYjK,OAAO,CAAGC,YAAYiK,EAAiBlB,IAG9C,KACDiB,EAAYjK,OAAO,EAAE,CACvB0K,cAAcT,EAAYjK,OAAO,EACjCiK,EAAYjK,OAAO,CAAG,KAE1B,GACC,CAAC8I,EAASE,EAAUkB,EAAgB,EAEhC,cACLxB,mBACAqB,EACApB,eAAgBuB,CAClB,CACF,EGxS8D,CAC1DpB,SAAS,EACTC,UAAW,GACXC,SAAU,IACVC,mBAAmB,CACrB,SAGAlJ,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACR,IAAM4K,EAAa,UACjB,GAAI,CAEF,IAAM7G,EAAW,MAAM8G,MAAM,cAC7B,GAAI9G,EAAS+G,EAAE,CAAE,CACf,IAAMzK,EAAO,MAAM0D,EAASgH,IAAI,GAChCtC,EAASpI,EACX,CACF,CAAE,MAAOb,EAAO,CACdC,QAAQD,KAAK,CAAC,kBAAmBA,EACnC,QAAU,CACR+I,GAAa,EACf,CACF,EAGMyC,EAAY,UAChB,GAAI,CACF,IAAMvF,EAAe,MAAMG,IAC3B8C,EAAWjD,EACb,CAAE,MAAOjG,EAAO,CACdC,GAHgDmG,KAGxCpG,KAAK,CAAC,aAAcA,EAC9B,CACF,EAEAoL,IACAI,IAGA,IAAMC,EAAa/K,YAAY0K,EAAY,KAE3C,MAAO,KACLD,cAAcM,EAChB,CACF,EAAG,EAAE,EAcH,WAACxK,MAAAA,CAAIC,UAAWC,IAAAA,SAAgB,WAC9B,WAACuK,UAAAA,CAAQxK,UAAWC,IAAAA,MAAa,WAC/B,UAACwK,KAAAA,CAAGzK,UAAWC,IAAAA,KAAY,UAAE,SAC7B,UAACU,IAAAA,CAAEX,UAAWC,IAAAA,QAAe,UAAE,sBAE/B,UAACM,SAAAA,CACCP,UAAWC,IAAAA,gBAAuB,CAClCO,QAlBsB,CAkBbkK,IAjBfhD,EAAOiD,IAAI,CAAC,eACd,WAiBO,eAKH,WAAC5K,MAAAA,CAAIC,UAAWC,IAAAA,IAAW,WACzB,WAACuK,UAAAA,CAAQxK,UAAWC,IAAAA,YAAmB,WACrC,UAAC2K,KAAAA,CAAG5K,UAAWC,IAAAA,YAAmB,UAAE,WACnC2H,EACC,UAAC7H,MAAAA,CAAIC,UAAWC,IAAAA,OAAc,UAAE,gBAEhC,UAACS,EAAWA,CAACf,KAAMmI,GAAPpH,IAIhB,WAAC8J,UAAAA,CAAQxK,UAAWC,IAAAA,iBAAwB,WAC1C,UAAC2K,KAAAA,CAAG5K,UAAWC,IAAAA,YAAmB,UAAE,aACpC,UAACnE,EAAaA,CACZC,UADYD,GACE,IACdE,cAAe,GACfC,cAAc,EACdC,OAAQ,IACRC,UAAU,IAIX8G,GACC,WAAClD,MAAAA,CAAIC,UAAWC,IAAAA,OAAc,WAC5B,UAACC,KAAAA,CAAGF,UAAWC,IAAAA,SAAgB,UAAE,WACjC,WAACF,MAAAA,CAAIC,UAAWC,IAAAA,QAAe,WAC7B,WAACF,MAAAA,CAAIC,UAAWC,IAAAA,QAAe,WAC7B,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,SAAgB,UAAE,QACnC,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,SAAgB,UAAGgD,EAAQa,MAAM,MAEpD,WAAC/D,MAAAA,CAAIC,UAAWC,IAAAA,QAAe,WAC7B,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,SAAgB,UAAE,SACnC,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,SAAgB,UAAGgD,EAAQsC,QAAQ,MAEtD,WAACxF,MAAAA,CAAIC,UAAWC,IAAAA,QAAe,WAC7B,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,SAAgB,UAAE,aACnC,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,SAAgB,UAC9BgD,EAAQqC,mBAAmB,CAAG,QAAU,aAG7C,WAACvF,MAAAA,CAAIC,UAAWC,IAAAA,QAAe,WAC7B,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,SAAgB,UAAE,WACnC,WAACE,OAAAA,CAAKH,UAAWC,IAAAA,SAAgB,WAAE,MAC7BgD,EAAQwC,OAAO,CAAC,KAClBxC,MAAQwC,OAAO,CAAS,YACJ,IAApBxC,EAAQwC,OAAO,CAAS,MACJ,IAApBxC,EAAQwC,OAAO,CAAS,QACxB,MACD,sBAUf,WAAC+E,UAAAA,CAAQxK,UAAWC,IAAAA,cAAqB,WACvC,UAACC,KAAAA,CAAGF,UAAWC,IAAAA,aAAoB,UAAE,WACrC,WAACF,MAAAA,CAAIC,UAAWC,IAAAA,YAAmB,WACjC,WAACF,MAAAA,CAAIC,UAAWC,IAAAA,YAAmB,WACjC,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,WAAkB,UAAE,WACrC,UAACE,OAAAA,CAAKH,UAAWC,IAAAA,WAAkB,UAChCgI,EAAe,WAAa,WAIjC,WAAClI,MAAAA,CAAIC,UAAWC,IAAAA,aAAoB,WAClC,UAACM,SAAAA,CACCP,UAAWC,IAAAA,cAAqB,CAChCO,QAAS,IAAM0H,IACfzH,SAAUwH,WACX,YAID,UAAC1H,SAAAA,CACCP,UAAWC,IAAAA,eAAsB,CACjCO,QAjGZ,CAiGqBqK,QAjGZA,EAEP3C,GACF,EA+FYzH,SAAUwH,WACX,sBAQb,YC9KA,WAAkB,o/BEAlB,WAAkB,8+BC0BlB,eAAe6C,EAAcC,CAAW,MAAEzK,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAuB,CAAC,EAChE,GAAI,CASF,OARiB,MAAM6J,MAAMY,EAAK,CAChC,GAAGzK,CAAO,CACV0K,QAAS,CACP,eAAgB,mBAChB,GAAG1K,EAAQ0K,OAAO,CAEtB,EAGF,CAAE,MAAOlM,EAAO,CAEd,MADAC,QAAQD,KAAK,CAAC,gBAAoB,OAAJiM,EAAI,MAAKjM,GACjCA,CACR,CACF,CAKO,eAAenB,IAKpB,GAAI,CACF,IAAM0F,EAAW,MAAMyH,EAAc,sBAErC,GAAI,CAACzH,EAAS+G,EAAE,CACd,CADgB,KACV,MAAU,uBAAuC,OAAhB/G,EAAS4H,MAAM,GAGxD,OAAO,MAAM5H,EAASgH,IAAI,EAC5B,CAAE,MAAOvL,EAAO,CAEd,OADAC,QAAQD,KAAK,CAAC,kBAAmBA,GAC1B,CACLK,SAAS,EACTL,MAAOA,aAAiBkL,MAAQlL,EAAM+J,OAAO,CAAG,WAClD,CACF,CACF,CAKO,eAAeX,QAAegD,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAQ,EAAGC,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,EAAAA,SAAAA,CAAAA,EAAAA,CAC9C,EAD0D,CACtD,CACF,IAAM9H,EAAW,MAAMyH,EAAc,qBAAsB,CACzDM,OAAQ,MACRC,KAAMC,KAAKC,SAAS,CAAC,CACnBhE,KAAM,WACN2D,MAAOA,EAAM/Q,QAAQ,aACrBgR,CACF,EACF,GAEA,GAAI,CAAC9H,EAAS+G,EAAE,CACd,CADgB,KACV,MAAU,uBAAuC,OAAhB/G,EAAS4H,MAAM,GAGxD,OAAO,MAAM5H,EAASgH,IAAI,EAC5B,CAAE,MAAOvL,EAAO,CAEd,OADAC,QAAQD,KAAK,CAAC,cAAeA,GACtB,CACLK,SAAS,EACTL,MAAOA,aAAiBkL,MAAQlL,EAAM+J,OAAO,CAAG,WAClD,CACF,CACF,CA+BO,eAAezF,IACpB,GAAI,CACF,IAAMC,EAAW,MAAMyH,EAAc,mBAErC,GAAI,CAACzH,EAAS+G,EAAE,CACd,CADgB,KACV,MAAU,iBAAiC,OAAhB/G,EAAS4H,MAAM,GAGlD,OAAO,MAAM5H,EAASgH,IAAI,EAC5B,CAAE,MAAOvL,EAAO,CAEd,OADAC,QAAQD,KAAK,CAAC,kBAAmBA,GAC1B,CACLK,SAAS,EACTwE,WAAW,EACXV,QAAS,KACTnE,MAAOA,aAAiBkL,MAAQlL,EAAM+J,OAAO,CAAG,YAChD5O,UAAWD,KAAK4D,GAAG,EACrB,CACF,CACF,CAMO,eAAe4N,EAAmBhI,CAAe,EACtD,GAAI,CAEF,IAAMiI,EAAcH,KAAKC,SAAS,CAAC,QACjC/H,CACF,GAGMH,EAAW,MAAMyH,EAAc,+BAAgC,CACnEM,OAAQ,MACRC,KAAMI,CACR,GAGA,GAAI,CAACpI,EAAS+G,EAAE,CACd,CADgB,KACV,MAAU,oBAAoC,OAAhB/G,EAAS4H,MAAM,GAGrD,OAAO,MAAM5H,EAASgH,IAAI,EAC5B,CAAE,MAAOvL,EAAO,CAEd,OADAC,QAAQD,KAAK,CAAC,gBAAiBA,GACxB,CACLK,SAAS,EACTkJ,QAAS,GACTpJ,OAAQ,GACRH,MAAOA,aAAiBkL,MAAQlL,EAAM+J,OAAO,CAAG,YAChD5O,UAAWD,KAAK4D,GAAG,EACrB,CACF,CACF,CAOO,eAAe6G,EAAoC9E,CAAa,CAAE+L,CAAuB,EAC9F,GAAI,CAEF,IAAMD,EAAcH,KAAKC,SAAS,CAAC,MACjC5L,kBACA+L,CACF,GAGMrI,EAAW,MAAMyH,EAAc,kBAAmB,CACtDM,OAAQ,OACRC,KAAMI,CACR,GAGA,GAAI,CAACpI,EAAS+G,EAAE,CACd,CADgB,KACV,MAAU,iBAAiC,OAAhB/G,EAAS4H,MAAM,GAGlD,OAAO,MAAM5H,EAASgH,IAAI,EAC5B,CAAE,MAAOvL,EAAO,CAEd,OADAC,QAAQD,KAAK,CAAC,aAAcA,GACrB,CACLK,SAAS,EACTL,MAAOA,aAAiBkL,MAAQlL,EAAM+J,OAAO,CAAG,YAChD5O,UAAWD,KAAK4D,GAAG,EACrB,CACF,CACF,kBCvNA,sCAAkG","sources":["webpack://_N_E/./src/app/components/MemoryMonitor.module.css","webpack://_N_E/./src/app/components/MemoryMonitor.tsx","webpack://_N_E/./src/app/components/TypingStats.tsx","webpack://_N_E/./src/app/hooks/useToast.ts","webpack://_N_E/./src/app/utils/memory/hooks.ts","webpack://_N_E/./src/app/utils/gpu-acceleration.ts","webpack://_N_E/./src/app/utils/gpu-detection.ts","webpack://_N_E/./src/app/dashboard/page.tsx","webpack://_N_E/./src/app/components/TypingStats.module.css","webpack://_N_E/./node_modules/next/dist/api/navigation.js","webpack://_N_E/./src/app/dashboard/page.module.css","webpack://_N_E/./src/app/utils/nativeModuleClient.ts","webpack://_N_E/?ea99"],"sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MemoryMonitor_container__Jlysz\",\"darkMode\":\"MemoryMonitor_darkMode__pvpPp\",\"title\":\"MemoryMonitor_title__zHk4R\",\"chartContainer\":\"MemoryMonitor_chartContainer__qtleo\",\"statsContainer\":\"MemoryMonitor_statsContainer__PXru0\",\"safe\":\"MemoryMonitor_safe__qyeNq\",\"warning\":\"MemoryMonitor_warning__wxCZ1\",\"danger\":\"MemoryMonitor_danger__rVeHJ\",\"stat\":\"MemoryMonitor_stat__boKrL\",\"statLabel\":\"MemoryMonitor_statLabel__jkNx_\",\"statValue\":\"MemoryMonitor_statValue__VmgYe\",\"controls\":\"MemoryMonitor_controls__U0dwN\",\"refreshButton\":\"MemoryMonitor_refreshButton__vCWQ4\",\"gcButton\":\"MemoryMonitor_gcButton__N9Q5Y\",\"loading\":\"MemoryMonitor_loading__l_GMJ\",\"statusIndicator\":\"MemoryMonitor_statusIndicator__JCGD3\"};","'use client';\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { \r\n  Chart as ChartJS, \r\n  CategoryScale, \r\n  LinearScale, \r\n  PointElement, \r\n  LineElement, \r\n  Title, \r\n  Tooltip, \r\n  Legend, \r\n  ChartOptions \r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { getMemoryInfo } from '../utils/memory/memory-info';\r\nimport { requestGC } from '../utils/memory/gc-utils';\r\nimport styles from './MemoryMonitor.module.css';\r\n\r\n// 차트 등록\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\n// 메모리 타임스탬프 형식화\r\nconst formatTime = (timestamp: number) => {\r\n  const date = new Date(timestamp);\r\n  return `${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}`;\r\n};\r\n\r\n// 차트 옵션\r\nconst chartOptions: ChartOptions<'line'> = {\r\n  responsive: true,\r\n  maintainAspectRatio: false,\r\n  animation: {\r\n    duration: 500\r\n  },\r\n  scales: {\r\n    y: {\r\n      beginAtZero: true,\r\n      title: {\r\n        display: true,\r\n        text: 'Memory (MB)'\r\n      }\r\n    },\r\n    x: {\r\n      title: {\r\n        display: true,\r\n        text: 'Time'\r\n      }\r\n    }\r\n  },\r\n  plugins: {\r\n    legend: {\r\n      position: 'top',\r\n    },\r\n    tooltip: {\r\n      callbacks: {\r\n        label: (context) => {\r\n          const label = context.dataset.label || '';\r\n          const value = context.parsed.y || 0;\r\n          return `${label}: ${value.toFixed(2)} MB`;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\ninterface MemoryMonitorProps {\r\n  pollInterval?: number; // 데이터 수집 간격 (ms)\r\n  historyLength?: number; // 기록할 데이터 포인트 수\r\n  showControls?: boolean; // GC 버튼 등 컨트롤 표시 여부\r\n  height?: number; // 차트 높이\r\n  detailed?: boolean; // 상세 정보 표시 여부\r\n  darkMode?: boolean; // 다크 모드 여부\r\n}\r\n\r\n/**\r\n * 메모리 모니터링 컴포넌트\r\n * \r\n * 실시간으로 메모리 사용량을 그래프로 표시하고 메모리 관리 기능을 제공합니다.\r\n */\r\nexport default function MemoryMonitor({\r\n  pollInterval = 5000,\r\n  historyLength = 20,\r\n  showControls = true,\r\n  height = 300,\r\n  detailed = true,\r\n  darkMode = false\r\n}: MemoryMonitorProps) {\r\n  // 메모리 데이터 상태\r\n  const [memoryData, setMemoryData] = useState<{\r\n    labels: string[];\r\n    used: number[];\r\n    total: number[];\r\n    percent: number[];\r\n    rss?: number[];\r\n  }>({\r\n    labels: [],\r\n    used: [],\r\n    total: [],\r\n    percent: [],\r\n    rss: []\r\n  });\r\n  \r\n  // 현재 메모리 상태\r\n  const [currentMemory, setCurrentMemory] = useState<{\r\n    heapUsed: number;\r\n    heapTotal: number;\r\n    percentUsed: number;\r\n    rss?: number;\r\n    timestamp: number;\r\n  } | null>(null);\r\n  \r\n  // 갱신 중 상태\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n  \r\n  // GC 실행 중 상태\r\n  const [isPerformingGC, setIsPerformingGC] = useState(false);\r\n  \r\n  // 메모리 상태 (안전, 주의, 위험)\r\n  const [memoryStatus, setMemoryStatus] = useState<'safe' | 'warning' | 'danger'>('safe');\r\n  \r\n  // 애니메이션을 위한 타이머 ID\r\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\r\n  \r\n  // 메모리 상태 평가 함수\r\n  const evaluateMemoryStatus = (percentUsed: number) => {\r\n    if (percentUsed > 85) return 'danger';\r\n    if (percentUsed > 70) return 'warning';\r\n    return 'safe';\r\n  };\r\n  \r\n  // 메모리 정보 가져오기\r\n  const fetchMemoryInfo = async () => {\r\n    try {\r\n      setIsRefreshing(true);\r\n      \r\n      const memoryInfo = await getMemoryInfo();\r\n      \r\n      if (memoryInfo) {\r\n        const timestamp = memoryInfo.timestamp || Date.now();\r\n        const formattedTime = formatTime(timestamp);\r\n        \r\n        // 메모리 상태 업데이트\r\n        setCurrentMemory({\r\n          heapUsed: memoryInfo.heap_used_mb || memoryInfo.heapUsedMB || 0,\r\n          heapTotal: (memoryInfo.heap_total || 0) / (1024 * 1024),\r\n          percentUsed: memoryInfo.percent_used || memoryInfo.percentUsed || 0,\r\n          rss: memoryInfo.rss_mb || memoryInfo.rssMB,\r\n          timestamp\r\n        });\r\n        \r\n        // 메모리 상태 평가\r\n        setMemoryStatus(evaluateMemoryStatus(\r\n          memoryInfo.percent_used || memoryInfo.percentUsed || 0\r\n        ));\r\n        \r\n        // 차트 데이터 업데이트\r\n        setMemoryData(prev => {\r\n          // 새 데이터 포인트 추가\r\n          const newLabels = [...prev.labels, formattedTime];\r\n          const newUsed = [...prev.used, memoryInfo.heap_used_mb || memoryInfo.heapUsedMB || 0];\r\n          const newTotal = [...prev.total, (memoryInfo.heap_total || 0) / (1024 * 1024)];\r\n          const newPercent = [...prev.percent, memoryInfo.percent_used || memoryInfo.percentUsed || 0];\r\n          const newRSS = [...(prev.rss || []), memoryInfo.rss_mb || memoryInfo.rssMB || 0];\r\n          \r\n          // 데이터 개수 제한\r\n          if (newLabels.length > historyLength) {\r\n            newLabels.shift();\r\n            newUsed.shift();\r\n            newTotal.shift();\r\n            newPercent.shift();\r\n            if (newRSS.length > historyLength) newRSS.shift();\r\n          }\r\n          \r\n          return {\r\n            labels: newLabels,\r\n            used: newUsed,\r\n            total: newTotal,\r\n            percent: newPercent,\r\n            rss: newRSS\r\n          };\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('메모리 정보 가져오기 오류:', error);\r\n    } finally {\r\n      setIsRefreshing(false);\r\n    }\r\n  };\r\n  \r\n  // 가비지 컬렉션 요청\r\n  const handleGarbageCollection = async () => {\r\n    try {\r\n      setIsPerformingGC(true);\r\n      const result = await requestGC();\r\n      \r\n      if (result && result.success) {\r\n        const freedMB = result.freedMB || 0;\r\n        console.log(`가비지 컬렉션 완료: ${freedMB.toFixed(2)}MB 해제됨`);\r\n      }\r\n      \r\n      // GC 후 메모리 정보 갱신\r\n      await fetchMemoryInfo();\r\n    } catch (error) {\r\n      console.error('가비지 컬렉션 오류:', error);\r\n    } finally {\r\n      setIsPerformingGC(false);\r\n    }\r\n  };\r\n  \r\n  // 초기화 및 주기적 갱신\r\n  useEffect(() => {\r\n    // 초기 데이터 로드\r\n    fetchMemoryInfo();\r\n    \r\n    // 주기적 갱신 설정\r\n    timerRef.current = setInterval(() => {\r\n      fetchMemoryInfo();\r\n    }, pollInterval);\r\n    \r\n    // 정리 함수\r\n    return () => {\r\n      if (timerRef.current) {\r\n        clearInterval(timerRef.current);\r\n      }\r\n    };\r\n  }, [pollInterval]);\r\n  // 차트 데이터\r\n  const chartData = {\r\n    labels: memoryData.labels,\r\n    datasets: [\r\n      {\r\n        label: 'Heap Used (MB)',\r\n        data: memoryData.used,\r\n        borderColor: 'rgb(75, 192, 192)',\r\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n        tension: 0.4\r\n      },\r\n      ...(detailed ? [{\r\n        label: 'RSS (MB)',\r\n        data: memoryData.rss,\r\n        borderColor: 'rgb(153, 102, 255)',\r\n        backgroundColor: 'rgba(153, 102, 255, 0.2)',\r\n        tension: 0.4\r\n      }] : [])\r\n    ]\r\n  };\r\n  \r\n  return (\r\n    <div className={`${styles.container} ${darkMode ? styles.darkMode : ''}`}>\r\n      <h3 className={styles.title}>메모리 모니터링</h3>\r\n      \r\n      {/* 현재 메모리 상태 */}\r\n      <div className={`${styles.statsContainer} ${styles[memoryStatus]}`}>\r\n        {currentMemory ? (\r\n          <>\r\n            <div className={styles.stat}>\r\n              <span className={styles.statLabel}>사용됨:</span>\r\n              <span className={styles.statValue}>{currentMemory.heapUsed.toFixed(2)} MB</span>\r\n            </div>\r\n            {detailed && (\r\n              <div className={styles.stat}>\r\n                <span className={styles.statLabel}>전체:</span>\r\n                <span className={styles.statValue}>{currentMemory.heapTotal.toFixed(2)} MB</span>\r\n              </div>\r\n            )}\r\n            <div className={styles.stat}>\r\n              <span className={styles.statLabel}>사용률:</span>\r\n              <span className={styles.statValue}>{currentMemory.percentUsed.toFixed(1)}%</span>\r\n            </div>\r\n            {detailed && currentMemory.rss && (\r\n              <div className={styles.stat}>\r\n                <span className={styles.statLabel}>RSS:</span>\r\n                <span className={styles.statValue}>{currentMemory.rss.toFixed(2)} MB</span>\r\n              </div>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <div className={styles.loading}>데이터 로드 중...</div>\r\n        )}\r\n      </div>\r\n      \r\n      {/* 메모리 사용량 차트 */}\r\n      <div className={styles.chartContainer} style={{ height: `${height}px` }}>\r\n        <Line data={chartData} options={chartOptions} />\r\n      </div>\r\n      \r\n      {/* 컨트롤 버튼 */}\r\n      {showControls && (\r\n        <div className={styles.controls}>\r\n          <button \r\n            className={styles.refreshButton} \r\n            onClick={fetchMemoryInfo}\r\n            disabled={isRefreshing}\r\n          >\r\n            {isRefreshing ? '갱신 중...' : '수동 갱신'}\r\n          </button>\r\n          \r\n          <button \r\n            className={styles.gcButton} \r\n            onClick={handleGarbageCollection}\r\n            disabled={isPerformingGC}\r\n          >\r\n            {isPerformingGC ? 'GC 실행 중...' : '가비지 컬렉션 실행'}\r\n          </button>\r\n        </div>\r\n      )}\r\n      \r\n      {/* 메모리 상태 표시 */}\r\n      <div className={`${styles.statusIndicator} ${styles[memoryStatus]}`}>\r\n        <div className={styles.statusLabel}>\r\n          {memoryStatus === 'safe' && '정상'}\r\n          {memoryStatus === 'warning' && '주의'}\r\n          {memoryStatus === 'danger' && '위험'}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","'use client';\r\n\r\nimport React from 'react';\r\nimport styles from './TypingStats.module.css';\r\n\r\ninterface TypingStatsProps {\r\n  data: {\r\n    totalKeyCount?: number;\r\n    totalTypingTime?: number;\r\n    averageSpeed?: number;\r\n    averageAccuracy?: number;\r\n    totalSessions?: number;\r\n    lastSession?: {\r\n      timestamp: string;\r\n      keyCount: number;\r\n      typingTime: number;\r\n      accuracy?: number;\r\n    };\r\n    recentStats?: Array<{\r\n      date: string;\r\n      keyCount: number;\r\n      typingTime: number;\r\n    }>;\r\n  } | null;\r\n}\r\n\r\nexport default function TypingStats({ data }: TypingStatsProps) {\r\n  if (!data) {\r\n    return (\r\n      <div className={styles.noData}>\r\n        <p>통계 데이터가 없습니다.</p>\r\n        <p>새 타이핑 세션을 시작하여 통계를 수집하세요.</p>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // 시간 형식화 (초 → 시:분:초)\r\n  const formatTime = (seconds: number) => {\r\n    const hours = Math.floor(seconds / 3600);\r\n    const minutes = Math.floor((seconds % 3600) / 60);\r\n    const secs = Math.floor(seconds % 60);\r\n    \r\n    return `${hours > 0 ? `${hours}시간 ` : ''}${minutes}분 ${secs}초`;\r\n  };\r\n  \r\n  // 날짜 형식화\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('ko-KR', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n  \r\n  return (\r\n    <div className={styles.container}>\r\n      {/* 통계 요약 */}\r\n      <div className={styles.summary}>\r\n        <div className={styles.statItem}>\r\n          <div className={styles.statValue}>{data.totalKeyCount?.toLocaleString() || 0}</div>\r\n          <div className={styles.statLabel}>총 키 입력 수</div>\r\n        </div>\r\n        \r\n        <div className={styles.statItem}>\r\n          <div className={styles.statValue}>{formatTime(data.totalTypingTime || 0)}</div>\r\n          <div className={styles.statLabel}>총 타이핑 시간</div>\r\n        </div>\r\n        \r\n        <div className={styles.statItem}>\r\n          <div className={styles.statValue}>{data.averageSpeed || 0}</div>\r\n          <div className={styles.statLabel}>평균 KPM</div>\r\n        </div>\r\n        \r\n        <div className={styles.statItem}>\r\n          <div className={styles.statValue}>{data.averageAccuracy ? `${data.averageAccuracy.toFixed(2)}%` : 'N/A'}</div>\r\n          <div className={styles.statLabel}>평균 정확도</div>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* 최근 세션 정보 */}\r\n      {data.lastSession && (\r\n        <div className={styles.lastSession}>\r\n          <h3 className={styles.sectionTitle}>최근 세션</h3>\r\n          <div className={styles.sessionInfo}>\r\n            <div className={styles.sessionDate}>{formatDate(data.lastSession.timestamp)}</div>\r\n            <div className={styles.sessionStats}>\r\n              <div className={styles.sessionStat}>\r\n                <span className={styles.sessionStatLabel}>키 입력 수:</span>\r\n                <span className={styles.sessionStatValue}>{data.lastSession.keyCount.toLocaleString()}</span>\r\n              </div>\r\n              <div className={styles.sessionStat}>\r\n                <span className={styles.sessionStatLabel}>타이핑 시간:</span>\r\n                <span className={styles.sessionStatValue}>{formatTime(data.lastSession.typingTime)}</span>\r\n              </div>\r\n              <div className={styles.sessionStat}>\r\n                <span className={styles.sessionStatLabel}>타자 속도:</span>\r\n                <span className={styles.sessionStatValue}>\r\n                  {Math.round((data.lastSession.keyCount / data.lastSession.typingTime) * 60)} KPM\r\n                </span>\r\n              </div>\r\n              {data.lastSession.accuracy !== undefined && (\r\n                <div className={styles.sessionStat}>\r\n                  <span className={styles.sessionStatLabel}>정확도:</span>\r\n                  <span className={styles.sessionStatValue}>{data.lastSession.accuracy.toFixed(2)}%</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* 최근 통계 (표 형식) */}\r\n      {data.recentStats && data.recentStats.length > 0 && (\r\n        <div className={styles.recentStats}>\r\n          <h3 className={styles.sectionTitle}>최근 기록</h3>\r\n          <div className={styles.tableContainer}>\r\n            <table className={styles.statsTable}>\r\n              <thead>\r\n                <tr>\r\n                  <th>날짜</th>\r\n                  <th>키 입력 수</th>\r\n                  <th>타이핑 시간</th>\r\n                  <th>KPM</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {data.recentStats.map((stat, index) => (\r\n                  <tr key={index}>\r\n                    <td>{formatDate(stat.date)}</td>\r\n                    <td>{stat.keyCount.toLocaleString()}</td>\r\n                    <td>{formatTime(stat.typingTime)}</td>\r\n                    <td>{Math.round((stat.keyCount / stat.typingTime) * 60)}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}","'use client';\r\n\r\nimport { useState, useCallback } from 'react';\r\n\r\ninterface ToastOptions {\r\n  duration?: number;\r\n  type?: 'info' | 'success' | 'warning' | 'error';\r\n}\r\n\r\ninterface Toast {\r\n  id: number;\r\n  message: string;\r\n  type: 'info' | 'success' | 'warning' | 'error';\r\n}\r\n\r\nexport function useToast() {\r\n  const [toasts, setToasts] = useState<Toast[]>([]);\r\n  \r\n  // 토스트 메시지 표시\r\n  const showToast = useCallback((message: string, options: ToastOptions = {}) => {\r\n    const id = Date.now();\r\n    const type = options.type || 'info';\r\n    const duration = options.duration || 3000;\r\n    \r\n    // 토스트 추가\r\n    setToasts(prev => [...prev, { id, message, type }]);\r\n    \r\n    // 자동 제거 타이머 설정\r\n    setTimeout(() => {\r\n      setToasts(prev => prev.filter(toast => toast.id !== id));\r\n    }, duration);\r\n    \r\n    return id;\r\n  }, []);\r\n  \r\n  // 특정 토스트 제거\r\n  const hideToast = useCallback((id: number) => {\r\n    setToasts(prev => prev.filter(toast => toast.id !== id));\r\n  }, []);\r\n  \r\n  // 모든 토스트 제거\r\n  const clearAllToasts = useCallback(() => {\r\n    setToasts([]);\r\n  }, []);\r\n  \r\n  return {\r\n    toasts,\r\n    showToast,\r\n    hideToast,\r\n    clearAllToasts\r\n  };\r\n}\r\n","'use client';\r\n\r\n/**\r\n * 메모리 관련 React 훅 통합 모듈\r\n * \r\n * 네이티브 모듈과 기존 JavaScript 최적화 기능을 통합하여 사용하는\r\n * React 훅을 제공합니다.\r\n */\r\nimport { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { useToast } from '@/app/hooks/useToast';\r\nimport type { MemoryInfo, OptimizationResult, ProcessingMode } from '@/types';\r\nimport type { MemorySettings } from '@/types/memory-settings';\r\nimport { getMemoryInfo, optimizeMemory } from '@/app/utils/nativeModuleClient';\r\nimport { formatBytes } from '@/app/utils/format-utils';\r\n\r\nexport interface UseMemoryOptions {\r\n  autoFetch?: boolean;\r\n  interval?: number;\r\n  autoOptimize?: boolean;\r\n  threshold?: number;\r\n  optimizationLevel?: number;\r\n}\r\n\r\n/**\r\n * 메모리 정보 및 최적화를 위한 훅\r\n */\r\nexport function useMemory(options: UseMemoryOptions = {}) {\r\n  const {\r\n    autoFetch = false,\r\n    interval = 30000,\r\n    autoOptimize = false,\r\n    threshold = 80,\r\n    optimizationLevel = 0\r\n  } = options;\r\n\r\n  const [memoryInfo, setMemoryInfo] = useState<MemoryInfo | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const [autoOptimizeEnabled, setAutoOptimizeEnabled] = useState(autoOptimize);\r\n  const [thresholdValue, setThresholdValue] = useState(threshold);\r\n  const [optimizationLevelValue, _setOptimizationLevel] = useState<number>(optimizationLevel);\r\n  const [processingMode, setProcessingMode] = useState<ProcessingMode>('auto' as ProcessingMode);\r\n  const [lastUpdate, setLastUpdate] = useState(0);\r\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\r\n  const { showToast } = useToast();\r\n\r\n  // 메모리 정보 가져오기\r\n  const fetchMemoryInfo = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await getMemoryInfo();\r\n\r\n      if (response.success && response.memoryInfo) {\r\n        setMemoryInfo(response.memoryInfo);\r\n        setLastUpdate(Date.now());\r\n        setError(null);\r\n        return response.memoryInfo;\r\n      } else {\r\n        setError(new Error(response.error || 'Failed to fetch memory info'));\r\n        return null;\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err : new Error('Unknown error'));\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // 메모리 최적화 실행\r\n  const runMemoryOptimization = useCallback(async (level?: number) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const optimizeLvl = level !== undefined ? level : optimizationLevelValue;\r\n\r\n      const response = await optimizeMemory(optimizeLvl);\r\n\r\n      if (response.success) {\r\n        await fetchMemoryInfo();\r\n        showToast(`Memory Optimized: Freed ${response.result?.freed_mb.toFixed(2)} MB of memory`);\r\n        return response.result;\r\n      } else {\r\n        setError(new Error(response.error || 'Optimization failed'));\r\n        return null;\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err : new Error('Unknown error'));\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [fetchMemoryInfo, showToast, optimizationLevelValue]);\r\n\r\n  // 자동 최적화 수행\r\n  const checkAndOptimizeIfNeeded = useCallback(async () => {\r\n    const info = await fetchMemoryInfo();\r\n\r\n    if (info && autoOptimizeEnabled && info.percentUsed > thresholdValue) {\r\n      await runMemoryOptimization();\r\n    }\r\n  }, [autoOptimizeEnabled, fetchMemoryInfo, thresholdValue, runMemoryOptimization]);\r\n\r\n  // 초기화 및 주기적 실행\r\n  useEffect(() => {\r\n    if (autoFetch) {\r\n      fetchMemoryInfo();\r\n    }\r\n\r\n    if (autoFetch && interval > 0) {\r\n      intervalRef.current = setInterval(() => {\r\n        autoOptimizeEnabled ? checkAndOptimizeIfNeeded() : fetchMemoryInfo();\r\n      }, interval);\r\n    }\r\n\r\n    return () => {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    };\r\n  }, [autoFetch, autoOptimizeEnabled, checkAndOptimizeIfNeeded, fetchMemoryInfo, interval]);\r\n\r\n  return {\r\n    memoryInfo,\r\n    loading,\r\n    error,\r\n    lastUpdate,\r\n    optimizationLevelValue,\r\n    fetchMemoryInfo,\r\n    runMemoryOptimization,\r\n    autoOptimizeEnabled,\r\n    setAutoOptimizeEnabled,\r\n    thresholdValue,\r\n    setThresholdValue,\r\n    processingMode,\r\n    setProcessingMode\r\n  };\r\n}\r\n\r\n/**\r\n * 메모리 설정 관리를 위한 훅\r\n */\r\nexport function useMemorySettings() {\r\n  const [settings, setSettings] = useState<MemorySettings>({\r\n    preferNativeImplementation: true,\r\n    enableAutomaticFallback: true,\r\n    enableAutomaticOptimization: false,\r\n    optimizationThreshold: 200,\r\n    optimizationInterval: 120000,\r\n    aggressiveGC: false,\r\n    enableLogging: false,\r\n    enablePerformanceMetrics: true,\r\n    useMemoryPool: true,\r\n    fallbackRetryDelay: 300000,\r\n    poolCleanupInterval: 180000,\r\n    processingMode: 'auto' as ProcessingMode,\r\n    componentSpecificSettings: {}\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const loadSettings = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const savedSettings = localStorage.getItem('memorySettings');\r\n\r\n      if (savedSettings) {\r\n        setSettings(JSON.parse(savedSettings));\r\n      }\r\n\r\n      setError(null);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to load settings');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const saveSettings = useCallback((newSettings: Partial<MemorySettings>) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const updatedSettings = { ...settings, ...newSettings };\r\n\r\n      localStorage.setItem('memorySettings', JSON.stringify(updatedSettings));\r\n\r\n      setSettings(updatedSettings);\r\n      setError(null);\r\n\r\n      return true;\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to save settings');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [settings]);\r\n\r\n  useEffect(() => {\r\n    loadSettings();\r\n  }, [loadSettings]);\r\n\r\n  return {\r\n    settings,\r\n    loading,\r\n    error,\r\n    saveSettings,\r\n    loadSettings\r\n  };\r\n}\r\n\r\n/**\r\n * 메모리 사용량 로깅을 위한 훅\r\n */\r\nexport function useMemoryLogging(interval = 60000) {\r\n  const { memoryInfo } = useMemory({ autoFetch: true, interval });\r\n\r\n  useEffect(() => {\r\n    const logMemoryUsage = () => {\r\n      if (memoryInfo) {\r\n        console.log(`Memory Usage: ${memoryInfo.percentUsed}%`);\r\n      }\r\n    };\r\n\r\n    const intervalId = setInterval(logMemoryUsage, interval);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [memoryInfo, interval]);\r\n}\r\n\r\n/**\r\n * 메모리 사용량이 높을 때 자동 최적화를 수행하는 훅\r\n */\r\nexport function useAutoMemoryOptimization(options: {\r\n  enabled?: boolean;\r\n  threshold?: number;\r\n  interval?: number;\r\n  showNotifications?: boolean;\r\n} = {}) {\r\n  const {\r\n    enabled = true,\r\n    threshold = 80,\r\n    interval = 60000,\r\n    showNotifications = true\r\n  } = options;\r\n\r\n  const { showToast } = useToast();\r\n  const [isOptimizing, setIsOptimizing] = useState(false);\r\n  const [lastOptimization, setLastOptimization] = useState<OptimizationResult | null>(null);\r\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  const runOptimization = useCallback(async () => {\r\n    if (!enabled || isOptimizing) return;\r\n\r\n    try {\r\n      setIsOptimizing(true);\r\n\r\n      const memoryResponse = await getMemoryInfo();\r\n\r\n      if (!memoryResponse.success) {\r\n        throw new Error(memoryResponse.error || 'Failed to get memory info');\r\n      }\r\n\r\n      const memInfo = memoryResponse.memoryInfo;\r\n\r\n      if (memInfo && memInfo.percentUsed > threshold) {\r\n        const optimizationLevel =\r\n          memInfo.percentUsed > 90 ? 3 :\r\n            memInfo.percentUsed > 80 ? 2 : 1;\r\n\r\n        const optimizationResponse = await optimizeMemory(optimizationLevel);\r\n\r\n        if (optimizationResponse?.success && optimizationResponse?.result) {\r\n          setLastOptimization(optimizationResponse.result);\r\n\r\n          if (showNotifications) {\r\n            const freedMB = optimizationResponse.result?.freed_mb || 0;\r\n            showToast(`Memory Optimized: Freed ${freedMB.toFixed(2)} MB of memory`);\r\n          }\r\n        }\r\n      }\r\n    } catch (err) {\r\n      if (showNotifications) {\r\n        showToast(`Memory Optimization Failed: ${err instanceof Error ? err.message : 'Unknown error'}`);\r\n      }\r\n    } finally {\r\n      setIsOptimizing(false);\r\n    }\r\n  }, [enabled, isOptimizing, threshold, showNotifications, showToast]);\r\n\r\n  useEffect(() => {\r\n    if (enabled && interval > 0) {\r\n      runOptimization();\r\n\r\n      intervalRef.current = setInterval(runOptimization, interval);\r\n    }\r\n\r\n    return () => {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n        intervalRef.current = null;\r\n      }\r\n    };\r\n  }, [enabled, interval, runOptimization]);\r\n\r\n  return {\r\n    isOptimizing,\r\n    lastOptimization,\r\n    optimizeMemory: runOptimization\r\n  };\r\n}\r\n\r\n/**\r\n * 포맷된 메모리 정보를 제공하는 훅\r\n */\r\nexport function useFormattedMemoryInfo(options: {\r\n  autoFetch?: boolean;\r\n  interval?: number;\r\n} = {}) {\r\n  const {\r\n    autoFetch = true,\r\n    interval = 30000\r\n  } = options;\r\n\r\n  const { memoryInfo, loading, error, fetchMemoryInfo } =\r\n    useMemory({ autoFetch, interval });\r\n\r\n  const formattedInfo = memoryInfo ? {\r\n    heapUsed: formatBytes(memoryInfo.heapUsed ?? 0),\r\n    heapTotal: formatBytes(memoryInfo.heapTotal ?? 0),\r\n    rss: formatBytes(memoryInfo.rss ?? 0),\r\n    percentUsed: `${memoryInfo.percentUsed?.toFixed(1) ?? '0'}%`,\r\n    heapUsedMB: `${memoryInfo.heapUsedMB?.toFixed(2) ?? '0'} MB`,\r\n    rssMB: `${memoryInfo.rssMB?.toFixed(2) ?? '0'} MB`,\r\n    timestamp: new Date(memoryInfo.timestamp).toLocaleTimeString()\r\n  } : null;\r\n\r\n  return {\r\n    memoryInfo,\r\n    formattedInfo,\r\n    loading,\r\n    error,\r\n    fetchMemoryInfo\r\n  };\r\n}\r\n\r\n/**\r\n * 임계값에 따른 메모리 상태를 제공하는 훅\r\n */\r\nexport function useMemoryStatus(thresholds: {\r\n  warning?: number;\r\n  critical?: number;\r\n} = {}) {\r\n  const { warning = 70, critical = 85 } = thresholds;\r\n\r\n  const { memoryInfo, loading, error, fetchMemoryInfo } =\r\n    useMemory({ autoFetch: true });\r\n\r\n  const status = memoryInfo\r\n    ? ((memoryInfo.percentUsed ?? 0) >= critical\r\n      ? 'critical'\r\n      : (memoryInfo.percentUsed ?? 0) >= warning\r\n        ? 'warning'\r\n        : 'normal')\r\n    : 'unknown';\r\n\r\n  return {\r\n    memoryInfo,\r\n    status,\r\n    loading,\r\n    error,\r\n    fetchMemoryInfo,\r\n    isNormal: status === 'normal',\r\n    isWarning: status === 'warning',\r\n    isCritical: status === 'critical'\r\n  };\r\n}\r\n","/**\r\n * GPU 언어어 유틸리티\r\n * \r\n * 이 모듈은 네이티브 모듈을 사용하여 GPU 가속화를 관리합니다.\r\n */\r\n\r\nimport { getGpuInfo, performGpuComputation } from './nativeModuleClient';\r\nimport { setGpuAcceleration as remoteSetGpuAcceleration } from './nativeModuleClient';\r\nimport { GpuTaskType } from '@/types/gpu-types';\r\n\r\n/**\r\n * GPU 정보 인터페이스\r\n */\r\ninterface GpuInfo {\r\n  available: boolean;\r\n  accelerationEnabled: boolean;\r\n  driverVersion: string;\r\n  deviceName: string;\r\n  deviceType: string;\r\n  vendor: string;\r\n  timestamp: number;\r\n}\r\n\r\n// GpuAccelerationResponse 인터페이스는 파일 내에서 사용되지 않지만\r\n// 다른 컴포넌트에서 활용할 수 있도록 export 추가\r\nexport interface GpuAccelerationResponse {\r\n  success: boolean;\r\n  enabled?: boolean;\r\n  available?: boolean;\r\n  error?: string;\r\n  details?: Partial<GpuInfo>;\r\n}\r\n\r\n// 캐시된 GPU 정보\r\nlet gpuInfoCache: GpuInfo | null = null;\r\nlet gpuInfoExpiration = 0;\r\nconst GPU_INFO_TTL = 5000; // 5초\r\n\r\n/**\r\n * GPU 가속화 상태 확인\r\n * @returns 가속화 활성화 여부\r\n */\r\nexport async function isGpuAccelerationEnabled(): Promise<boolean> {\r\n  try {\r\n    // GPU 정보 가져오기 (캐시 사용)\r\n    const gpuInfo = await getGpuInformation();\r\n    return gpuInfo?.accelerationEnabled || false;\r\n  } catch (error) {\r\n    console.error('GPU 가속 상태 확인 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * GPU 정보 가져오기\r\n * @returns GPU 정보 객체\r\n */\r\nexport async function getGpuInformation(): Promise<GpuInfo | null> {\r\n  // 캐시된 정보가 있고 유효하다면 그것을 사용\r\n  const now = Date.now();\r\n  if (gpuInfoCache && now < gpuInfoExpiration) {\r\n    return gpuInfoCache;\r\n  }\r\n\r\n  try {\r\n    // 새로운 정보 가져오기\r\n    const response = await getGpuInfo();\r\n\r\n    if (!response.success || !response.gpuInfo) {\r\n      return null;\r\n    }\r\n\r\n    // 캐시 업데이트\r\n    gpuInfoCache = response.gpuInfo;\r\n    gpuInfoExpiration = now + GPU_INFO_TTL;\r\n\r\n    return response.gpuInfo;\r\n  } catch (error) {\r\n    console.error('GPU 정보 가져오기 오류:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * GPU 가속화 활성화/비활성화\r\n * @param enable 활성화 여부\r\n * @returns 성공 여부\r\n */\r\nexport async function toggleGpuAcceleration(enable: boolean): Promise<boolean> {\r\n  try {\r\n    const response = await remoteSetGpuAcceleration(enable);\r\n\r\n    if (response && response.success) {\r\n      // 캐시 무효화\r\n      gpuInfoCache = null;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  } catch (error) {\r\n    console.error(`GPU 가속화 ${enable ? '활성화' : '비활성화'} 오류:`, error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * GPU 가속화 활성화/비활성화\r\n * @param enable 활성화 여부\r\n * @returns 성공 여부\r\n */\r\nexport async function setGpuAcceleration(enable: boolean): Promise<boolean> {\r\n  return await toggleGpuAcceleration(enable);\r\n}\r\n\r\n/**\r\n * 기기 GPU 성능 평가\r\n * @returns 성능 점수 (0-100)\r\n */\r\nexport async function evaluateGpuPerformance(): Promise<number> {\r\n  try {\r\n    const gpuInfo = await getGpuInformation();\r\n\r\n    if (!gpuInfo || !gpuInfo.available) {\r\n      return 0;\r\n    }\r\n\r\n    // GPU 타입에 따른 기본 점수 할당\r\n    let score = 0;\r\n\r\n    if (gpuInfo.deviceType === 'DiscreteGpu') {\r\n      score = 70; // 독립 GPU는 높은 기본 점수\r\n    } else if (gpuInfo.deviceType === 'IntegratedGpu') {\r\n      score = 40; // 통합 GPU는 중간 기본 점수\r\n    } else {\r\n      score = 10; // 기타 GPU 타입은 낮은 기본 점수\r\n    }\r\n\r\n    // 벤더 정보에 따른 추가 점수\r\n    if (gpuInfo.vendor && gpuInfo.deviceName) {\r\n      const vendorLower = gpuInfo.vendor.toLowerCase();\r\n      const nameLower = gpuInfo.deviceName.toLowerCase();\r\n\r\n      if (vendorLower.includes('nvidia') &&\r\n        (nameLower.includes('rtx') || nameLower.includes('gtx'))) {\r\n        score += 20;\r\n      } else if (vendorLower.includes('amd') &&\r\n        (nameLower.includes('radeon') || nameLower.includes('vega'))) {\r\n        score += 15;\r\n      } else if (vendorLower.includes('intel') && nameLower.includes('iris')) {\r\n        score += 10;\r\n      }\r\n    }\r\n\r\n    // 점수를 0-100 범위로 제한\r\n    return Math.min(100, Math.max(0, score));\r\n  } catch (error) {\r\n    console.error('GPU 성능 평가 오류:', error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * GPU 작업 분석 및 계산 수행\r\n * @param taskType 작업 유형\r\n * @param data 작업 데이터\r\n * @returns 계산 결과\r\n */\r\nexport async function executeGpuTask<T = unknown>(\r\n  taskType: GpuTaskType | string,\r\n  data: unknown\r\n): Promise<T | null> {\r\n  try {\r\n    // GPU 가용성 확인\r\n    const gpuInfo = await getGpuInformation();\r\n    if (!gpuInfo || !gpuInfo.available || !gpuInfo.accelerationEnabled) {\r\n      console.warn('GPU 가속이 비활성화되었거나 사용할 수 없습니다.');\r\n      return null;\r\n    }\r\n\r\n    // GPU 작업 실행\r\n    const response = await performGpuComputation<T>(data, taskType.toString());\r\n\r\n    if (!response.success) {\r\n      console.error('GPU 작업 실패:', response.error);\r\n      return null;\r\n    }\r\n\r\n    return response.result as T;\r\n  } catch (error) {\r\n    console.error('GPU 작업 실행 오류:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * GPU 가속화 활성화\r\n * @returns 성공 여부\r\n */\r\nexport async function enableGpuAcceleration(): Promise<boolean> {\r\n  return toggleGpuAcceleration(true);\r\n}\r\n\r\n/**\r\n * GPU 가속화 비활성화\r\n * @returns 성공 여부\r\n */\r\nexport async function disableGpuAcceleration(): Promise<boolean> {\r\n  return toggleGpuAcceleration(false);\r\n}\r\n\r\n// 간단한 전역 API 설정\r\nif (typeof window !== 'undefined') {\r\n  window.__gpuAccelerator = {\r\n    isGpuAccelerationEnabled,\r\n    getGpuInformation,\r\n    toggleGpuAcceleration,\r\n    enableGpuAcceleration,\r\n    disableGpuAcceleration,\r\n    evaluateGpuPerformance,\r\n    executeGpuTask\r\n  };\r\n}\r\n","/**\r\n * GPU 감지 및 호환성 유틸리티\r\n * \r\n * 이 모듈은 클라이언트의 GPU 하드웨어를 감지하고 사용 가능한 기능을 확인합니다.\r\n * 다양한 브라우저와 운영체제 환경에서 최적의 GPU 가속 방법을 제공합니다.\r\n */\r\n\r\nimport { isGpuAccelerationEnabled } from './gpu-acceleration';\r\n\r\n// GPU 기능 호환성 인터페이스\r\nexport interface GpuCapabilities {\r\n  webGLSupported: boolean;\r\n  webGL2Supported: boolean;\r\n  webGPUSupported: boolean;\r\n  hardwareAccelerated: boolean;\r\n  vendor: string;\r\n  renderer: string;\r\n  isDiscrete: boolean;  // 독립형 GPU인지 여부\r\n  memorySizeMB?: number; // GPU 메모리 크기 (MB)\r\n  driverVersion?: string;\r\n  gpuTier: number; // 1-저사양, 2-중간, 3-고사양\r\n}\r\n\r\n// GPU 벤더 enum\r\nexport enum GpuVendor {\r\n  UNKNOWN = 'unknown',\r\n  NVIDIA = 'nvidia',\r\n  AMD = 'amd',\r\n  INTEL = 'intel',\r\n  APPLE = 'apple',\r\n  MICROSOFT = 'microsoft',\r\n  QUALCOMM = 'qualcomm',\r\n  ARM = 'arm',\r\n  IMAGINATION = 'imagination',\r\n  SOFTPIPE = 'software',\r\n  SWIFTSHADER = 'swiftshader'\r\n}\r\n\r\n// 아키텍처에 따른 GPU 분류 (독립 GPU vs 통합 GPU)\r\nexport enum GpuArchitecture {\r\n  UNKNOWN = 'unknown',\r\n  INTEGRATED = 'integrated',\r\n  DISCRETE = 'discrete'\r\n}\r\n\r\n// GPU 메모리 캐시 (반복 감지 방지)\r\nconst gpuCache = {\r\n  capabilities: null as GpuCapabilities | null,\r\n  lastCheck: 0,\r\n  vendor: GpuVendor.UNKNOWN,\r\n  architecture: GpuArchitecture.UNKNOWN\r\n};\r\n\r\n/**\r\n * GPU 기능 감지\r\n * \r\n * 클라이언트의 GPU 기능을 감지하고 호환성 정보를 반환합니다.\r\n */\r\nexport async function detectGpuCapabilities(): Promise<GpuCapabilities> {\r\n  // 캐시된 정보가 있으면 재사용 (30초 이내)\r\n  const now = Date.now();\r\n  if (gpuCache.capabilities && now - gpuCache.lastCheck < 30000) {\r\n    return gpuCache.capabilities;\r\n  }\r\n  \r\n  // 기본 기능 설정\r\n  const capabilities: GpuCapabilities = {\r\n    webGLSupported: false,\r\n    webGL2Supported: false,\r\n    webGPUSupported: false,\r\n    hardwareAccelerated: false,\r\n    vendor: 'unknown',\r\n    renderer: 'unknown',\r\n    isDiscrete: false,\r\n    gpuTier: 0\r\n  };\r\n  \r\n  try {\r\n    // 서버 사이드 렌더링 환경에서는 빈 객체 반환\r\n    if (typeof window === 'undefined' || typeof document === 'undefined') {\r\n      return capabilities;\r\n    }\r\n    \r\n    // WebGL 지원 확인\r\n    const canvas = document.createElement('canvas');\r\n    \r\n    // WebGL 1.0 확인\r\n    let gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl') as WebGLRenderingContext | null;\r\n    capabilities.webGLSupported = !!gl;\r\n    \r\n    if (gl) {\r\n      // GPU 정보 가져오기\r\n      const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');\r\n      if (debugInfo) {\r\n        capabilities.vendor = gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL) || 'unknown';\r\n        capabilities.renderer = gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL) || 'unknown';\r\n      }\r\n      \r\n      // 하드웨어 가속 여부 확인\r\n      capabilities.hardwareAccelerated = isHardwareAccelerated(capabilities.renderer);\r\n      \r\n      // 벤더 식별\r\n      gpuCache.vendor = identifyVendor(capabilities.vendor, capabilities.renderer);\r\n      \r\n      // 아키텍처 식별\r\n      gpuCache.architecture = identifyArchitecture(capabilities.renderer, gpuCache.vendor);\r\n      capabilities.isDiscrete = gpuCache.architecture === GpuArchitecture.DISCRETE;\r\n      \r\n      // GPU 티어 결정\r\n      capabilities.gpuTier = determineGpuTier(\r\n        gpuCache.vendor, \r\n        capabilities.renderer, \r\n        gpuCache.architecture, \r\n        capabilities.hardwareAccelerated\r\n      );\r\n    }\r\n    \r\n    // WebGL 2.0 확인\r\n    let gl2 = canvas.getContext('webgl2') as WebGL2RenderingContext | null;\r\n    capabilities.webGL2Supported = !!gl2;\r\n    \r\n    // WebGPU 확인 (아직 모든 브라우저에서 지원되지 않음)\r\n    capabilities.webGPUSupported = 'gpu' in navigator;\r\n    \r\n    // GPU 메모리 크기 추정 (가능한 경우)\r\n    if (gl && gpuCache.vendor !== GpuVendor.UNKNOWN) {\r\n      capabilities.memorySizeMB = estimateGpuMemory(gl, gpuCache.vendor, capabilities.gpuTier);\r\n    }\r\n    \r\n    // 캐시에 저장\r\n    gpuCache.capabilities = capabilities;\r\n    gpuCache.lastCheck = now;\r\n    \r\n    return capabilities;\r\n  } catch (error) {\r\n    console.error('GPU 기능 감지 중 오류:', error);\r\n    return capabilities;\r\n  }\r\n}\r\n\r\n/**\r\n * 하드웨어 가속 여부 확인\r\n */\r\nfunction isHardwareAccelerated(renderer: string): boolean {\r\n  const softwareRenderers = [\r\n    'swiftshader', 'llvmpipe', 'software', 'mesa offscreen', \r\n    'microsoft basic render', 'gdi generic', 'virgl', \r\n    'virtual box', 'basic render'\r\n  ];\r\n  \r\n  renderer = renderer.toLowerCase();\r\n  return !softwareRenderers.some(sr => renderer.includes(sr));\r\n}\r\n\r\n/**\r\n * GPU 벤더 식별\r\n */\r\nfunction identifyVendor(vendor: string, renderer: string): GpuVendor {\r\n  const vendorLower = vendor.toLowerCase();\r\n  const rendererLower = renderer.toLowerCase();\r\n  \r\n  if (vendorLower.includes('nvidia') || rendererLower.includes('nvidia')) {\r\n    return GpuVendor.NVIDIA;\r\n  } else if (vendorLower.includes('amd') || rendererLower.includes('amd') || \r\n             vendorLower.includes('ati') || rendererLower.includes('radeon')) {\r\n    return GpuVendor.AMD;\r\n  } else if (vendorLower.includes('intel') || rendererLower.includes('intel')) {\r\n    return GpuVendor.INTEL;\r\n  } else if (vendorLower.includes('apple') || rendererLower.includes('apple')) {\r\n    return GpuVendor.APPLE;\r\n  } else if (vendorLower.includes('microsoft') || rendererLower.includes('microsoft')) {\r\n    return GpuVendor.MICROSOFT;\r\n  } else if (vendorLower.includes('qualcomm') || rendererLower.includes('adreno')) {\r\n    return GpuVendor.QUALCOMM;\r\n  } else if (vendorLower.includes('arm') || rendererLower.includes('mali')) {\r\n    return GpuVendor.ARM;\r\n  } else if (vendorLower.includes('imagination') || rendererLower.includes('powervr')) {\r\n    return GpuVendor.IMAGINATION;\r\n  } else if (rendererLower.includes('swiftshader')) {\r\n    return GpuVendor.SWIFTSHADER;\r\n  } else if (rendererLower.includes('llvmpipe') || rendererLower.includes('softpipe')) {\r\n    return GpuVendor.SOFTPIPE;\r\n  }\r\n  \r\n  return GpuVendor.UNKNOWN;\r\n}\r\n\r\n/**\r\n * GPU 아키텍처 식별 (통합 vs 독립)\r\n */\r\nfunction identifyArchitecture(renderer: string, vendor: GpuVendor): GpuArchitecture {\r\n  const rendererLower = renderer.toLowerCase();\r\n  \r\n  // 명확한 독립 GPU 식별자\r\n  if (rendererLower.includes('rtx') || \r\n      rendererLower.includes('geforce') || \r\n      rendererLower.includes('quadro') ||\r\n      rendererLower.includes('radeon') ||\r\n      rendererLower.includes('firepro') ||\r\n      rendererLower.includes('rx') && rendererLower.match(/\\brx\\s+\\d{3,4}\\b/i)) {\r\n    return GpuArchitecture.DISCRETE;\r\n  }\r\n  \r\n  // 통합 GPU 식별자\r\n  if (rendererLower.includes('uhd') || \r\n      rendererLower.includes('iris') ||\r\n      rendererLower.includes('hd graphics') ||\r\n      vendor === GpuVendor.INTEL ||\r\n      rendererLower.includes('apple m') ||\r\n      vendor === GpuVendor.ARM ||\r\n      vendor === GpuVendor.QUALCOMM) {\r\n    return GpuArchitecture.INTEGRATED;\r\n  }\r\n  \r\n  // 불확실한 경우\r\n  return GpuArchitecture.UNKNOWN;\r\n}\r\n\r\n/**\r\n * GPU 티어 결정 (1-저사양, 2-중간, 3-고사양)\r\n */\r\nfunction determineGpuTier(\r\n  vendor: GpuVendor, \r\n  renderer: string, \r\n  architecture: GpuArchitecture, \r\n  hardwareAccelerated: boolean\r\n): number {\r\n  if (!hardwareAccelerated) {\r\n    return 0; // 하드웨어 가속 불가능\r\n  }\r\n  \r\n  const rendererLower = renderer.toLowerCase();\r\n  \r\n  // 소프트웨어 렌더러는 항상 티어 0\r\n  if (vendor === GpuVendor.SOFTPIPE || vendor === GpuVendor.SWIFTSHADER) {\r\n    return 0;\r\n  }\r\n  \r\n  // 독립 GPU는 일반적으로 고성능\r\n  if (architecture === GpuArchitecture.DISCRETE) {\r\n    // 고사양 GPU\r\n    if (rendererLower.includes('rtx') || \r\n        rendererLower.includes('geforce 30') || \r\n        rendererLower.includes('geforce 40') ||\r\n        rendererLower.includes('radeon rx 6') || \r\n        rendererLower.includes('radeon rx 7')) {\r\n      return 3;\r\n    }\r\n    \r\n    // 중간 사양 GPU\r\n    if (rendererLower.includes('geforce 20') || \r\n        rendererLower.includes('geforce 16') ||\r\n        rendererLower.includes('radeon rx 5') || \r\n        rendererLower.includes('radeon vega')) {\r\n      return 2;\r\n    }\r\n    \r\n    // 기본적으로 독립 GPU는 최소 티어 2\r\n    return 2;\r\n  }\r\n  \r\n  // 통합 GPU\r\n  if (architecture === GpuArchitecture.INTEGRATED) {\r\n    // 고성능 통합 GPU\r\n    if (rendererLower.includes('apple m2') || \r\n        rendererLower.includes('apple m3') ||\r\n        rendererLower.includes('iris xe') || \r\n        rendererLower.includes('intel arc')) {\r\n      return 2;\r\n    }\r\n    \r\n    // 일반 통합 GPU\r\n    return 1;\r\n  }\r\n  \r\n  // 기본값: 알 수 없는 경우 안전하게 티어 1 반환\r\n  return 1;\r\n}\r\n\r\n/**\r\n * GPU 메모리 크기 추정\r\n */\r\nfunction estimateGpuMemory(gl: WebGLRenderingContext, vendor: GpuVendor, tier: number): number {\r\n  // WebGL 확장에서 메모리 크기 추정 시도\r\n  const extension = gl.getExtension('WEBGL_debug_renderer_info');\r\n  if (extension) {\r\n    // 일부 브라우저는 GPU 메모리 정보를 제공하지만, 표준화되지 않음\r\n    // 간접적으로 추정\r\n    \r\n    // GPU 티어에 따른 추정\r\n    switch (tier) {\r\n      case 3: return 8 * 1024; // 8GB\r\n      case 2: return 4 * 1024; // 4GB\r\n      case 1: return 2 * 1024; // 2GB\r\n      default: return 1 * 1024; // 1GB\r\n    }\r\n  }\r\n  \r\n  // 기본값: 벤더와 티어에 따른 보수적 추정\r\n  switch (vendor) {\r\n    case GpuVendor.NVIDIA:\r\n      return tier === 3 ? 8 * 1024 : tier === 2 ? 4 * 1024 : 2 * 1024;\r\n    case GpuVendor.AMD:\r\n      return tier === 3 ? 8 * 1024 : tier === 2 ? 4 * 1024 : 2 * 1024;\r\n    case GpuVendor.INTEL:\r\n      return tier === 2 ? 2 * 1024 : 1 * 1024;\r\n    case GpuVendor.APPLE:\r\n      return tier === 2 ? 4 * 1024 : 2 * 1024;\r\n    default:\r\n      return 1 * 1024; // 알 수 없는 경우 1GB 가정\r\n  }\r\n}\r\n\r\n/**\r\n * WebGL 컨텍스트 생성 도우미\r\n */\r\nexport function createWebGLContext(\r\n  canvas: HTMLCanvasElement, \r\n  preferWebGL2: boolean = true, \r\n  contextAttributes: WebGLContextAttributes = {}\r\n): WebGLRenderingContext | WebGL2RenderingContext | null {\r\n  // 기본 컨텍스트 속성\r\n  const defaultAttributes: WebGLContextAttributes = {\r\n    alpha: false,              // 알파 채널 불필요하면 비활성화\r\n    antialias: false,          // 필요시 활성화\r\n    depth: true,               // 3D 필요하면 활성화\r\n    failIfMajorPerformanceCaveat: false,\r\n    powerPreference: 'high-performance',\r\n    premultipliedAlpha: false,\r\n    preserveDrawingBuffer: false,\r\n    stencil: false,\r\n    desynchronized: true       // 지연 감소\r\n  };\r\n  \r\n  const attributes = { ...defaultAttributes, ...contextAttributes };\r\n  \r\n  // WebGL 2.0 우선 시도\r\n  if (preferWebGL2) {\r\n    try {\r\n      const gl2 = canvas.getContext('webgl2', attributes) as WebGL2RenderingContext;\r\n      if (gl2) return gl2;\r\n    } catch (e) {\r\n      console.warn('WebGL 2 초기화 실패, WebGL 1로 폴백', e);\r\n    }\r\n  }\r\n  \r\n  // WebGL 1.0 폴백\r\n  try {\r\n    return canvas.getContext('webgl', attributes) || \r\n           canvas.getContext('experimental-webgl', attributes) as WebGLRenderingContext;\r\n  } catch (e) {\r\n    console.error('WebGL 초기화 실패', e);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * 웹 환경에서 GPU 가속화가 지원되는지 확인\r\n */\r\nexport async function isGpuSupported(): Promise<boolean> {\r\n  try {\r\n    // 네이티브 모듈 우선 확인\r\n    const nativeSupported = await isGpuAccelerationEnabled();\r\n    if (nativeSupported) {\r\n      return true;\r\n    }\r\n    \r\n    // 클라이언트 측 감지\r\n    const capabilities = await detectGpuCapabilities();\r\n    return capabilities.hardwareAccelerated && \r\n           (capabilities.webGLSupported || capabilities.webGPUSupported);\r\n  } catch (error) {\r\n    console.error('GPU 지원 확인 중 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// 전역 GPU 정보 캐싱 & 공유\r\nif (typeof window !== 'undefined') {\r\n  // 자동 감지\r\n  detectGpuCapabilities().then(info => {\r\n    window.__gpuInfo = {\r\n      isAccelerated: () => info.hardwareAccelerated,\r\n      renderer: info.renderer,\r\n      vendor: info.vendor,\r\n      getGPUTier: () => ({ tier: info.gpuTier, type: getTierDescription(info.gpuTier) }),\r\n      isHardwareAccelerated: () => info.hardwareAccelerated\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * GPU 티어 설명 반환\r\n */\r\nfunction getTierDescription(tier: number): string {\r\n  switch (tier) {\r\n    case 0: return 'software';\r\n    case 1: return 'entry-level';\r\n    case 2: return 'mid-range';\r\n    case 3: return 'high-end';\r\n    default: return 'unknown';\r\n  }\r\n}\r\n","'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport MemoryMonitor from '../components/MemoryMonitor';\r\nimport TypingStats from '../components/TypingStats';\r\nimport { useAutoMemoryOptimization as useMemoryOptimizer } from '../utils/memory/hooks';\r\nimport { detectGpuCapabilities } from '../utils/gpu-detection';\r\nimport styles from './page.module.css';\r\n\r\nexport default function DashboardPage() {\r\n  const router = useRouter();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [stats, setStats] = useState<any>(null);\r\n  const [gpuInfo, setGpuInfo] = useState<any>(null);\r\n  \r\n  // 메모리 최적화 기능 사용 - lastOptimization 앞에 _ 추가하거나 사용할 경우 _ 제거\r\n  const { isOptimizing, optimizeMemory } = useMemoryOptimizer({\r\n    enabled: true,\r\n    threshold: 80,\r\n    interval: 60000,\r\n    showNotifications: true\r\n  });\r\n  \r\n  // 통계 데이터 가져오기\r\n  useEffect(() => {\r\n    const fetchStats = async () => {\r\n      try {\r\n        // 서버에서 통계 데이터 가져오기\r\n        const response = await fetch('/api/stats');\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setStats(data);\r\n        }\r\n      } catch (error) {\r\n        console.error('통계 데이터 가져오기 오류:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    // GPU 정보 감지\r\n    const detectGpu = async () => {\r\n      try {\r\n        const capabilities = await detectGpuCapabilities();\r\n        setGpuInfo(capabilities);\r\n      } catch (error) {\r\n        console.error('GPU 감지 오류:', error);\r\n      }\r\n    };\r\n    \r\n    fetchStats();\r\n    detectGpu();\r\n    \r\n    // 주기적 데이터 업데이트 (60초마다)\r\n    const intervalId = setInterval(fetchStats, 60000);\r\n    \r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n  \r\n  // 새 세션 시작 처리\r\n  const handleStartNewSession = () => {\r\n    router.push('/session/new');\r\n  };\r\n\r\n  // 긴급 최적화 처리 - memoryOptimizer 대신 직접 구조 분해한 함수 사용\r\n  function handleEmergencyOptimize() {\r\n    // 긴급 최적화 모드로 호출\r\n    optimizeMemory();\r\n  }\r\n  \r\n  return (\r\n    <div className={styles.container}>\r\n      <section className={styles.header}>\r\n        <h1 className={styles.title}>대시보드</h1>\r\n        <p className={styles.subtitle}>타이핑 통계 및 시스템 모니터링</p>\r\n        \r\n        <button \r\n          className={styles.newSessionButton}\r\n          onClick={handleStartNewSession}\r\n        >\r\n          새 세션 시작\r\n        </button>\r\n      </section>\r\n      \r\n      <div className={styles.grid}>\r\n        <section className={styles.statsSection}>\r\n          <h2 className={styles.sectionTitle}>타이핑 통계</h2>\r\n          {isLoading ? (\r\n            <div className={styles.loading}>데이터 로딩 중...</div>\r\n          ) : (\r\n            <TypingStats data={stats} />\r\n          )}\r\n        </section>\r\n        \r\n        <section className={styles.monitoringSection}>\r\n          <h2 className={styles.sectionTitle}>시스템 모니터링</h2>\r\n          <MemoryMonitor \r\n            pollInterval={10000}     // 10초마다 갱신\r\n            historyLength={15}       // 15개 데이터 포인트 표시\r\n            showControls={true}      // 컨트롤 버튼 표시\r\n            height={250}             // 차트 높이\r\n            detailed={true}          // 상세 정보 표시\r\n          />\r\n          \r\n          {/* GPU 정보 표시 */}\r\n          {gpuInfo && (\r\n            <div className={styles.gpuInfo}>\r\n              <h3 className={styles.infoTitle}>GPU 정보</h3>\r\n              <div className={styles.infoGrid}>\r\n                <div className={styles.infoItem}>\r\n                  <span className={styles.infoLabel}>벤더:</span>\r\n                  <span className={styles.infoValue}>{gpuInfo.vendor}</span>\r\n                </div>\r\n                <div className={styles.infoItem}>\r\n                  <span className={styles.infoLabel}>렌더러:</span>\r\n                  <span className={styles.infoValue}>{gpuInfo.renderer}</span>\r\n                </div>\r\n                <div className={styles.infoItem}>\r\n                  <span className={styles.infoLabel}>하드웨어 가속:</span>\r\n                  <span className={styles.infoValue}>\r\n                    {gpuInfo.hardwareAccelerated ? '사용 가능' : '사용 불가'}\r\n                  </span>\r\n                </div>\r\n                <div className={styles.infoItem}>\r\n                  <span className={styles.infoLabel}>성능 수준:</span>\r\n                  <span className={styles.infoValue}>\r\n                    티어 {gpuInfo.gpuTier} ({\r\n                      gpuInfo.gpuTier === 0 ? '소프트웨어 렌더링' :\r\n                      gpuInfo.gpuTier === 1 ? '저사양' :\r\n                      gpuInfo.gpuTier === 2 ? '중간 사양' :\r\n                      '고사양'\r\n                    })\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </section>\r\n      </div>\r\n      \r\n      {/* 메모리 최적화 상태 및 컨트롤 */}\r\n      <section className={styles.memoryControls}>\r\n        <h3 className={styles.controlsTitle}>메모리 관리</h3>\r\n        <div className={styles.controlsGrid}>\r\n          <div className={styles.memoryStatus}>\r\n            <span className={styles.statusLabel}>현재 상태:</span>\r\n            <span className={styles.statusValue}>\r\n              {isOptimizing ? '최적화 중...' : '준비됨'}\r\n            </span>\r\n          </div>\r\n          \r\n          <div className={styles.memoryActions}>\r\n            <button \r\n              className={styles.optimizeButton}\r\n              onClick={() => optimizeMemory()}\r\n              disabled={isOptimizing}\r\n            >\r\n              메모리 최적화\r\n            </button>\r\n            \r\n            <button \r\n              className={styles.emergencyButton}\r\n              onClick={handleEmergencyOptimize}\r\n              disabled={isOptimizing}\r\n            >\r\n              긴급 최적화\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statsContainer\":\"TypingStats_statsContainer__ER9Ok\",\"statsGrid\":\"TypingStats_statsGrid__cgenG\",\"statCard\":\"TypingStats_statCard__Vz_Pu\",\"statValue\":\"TypingStats_statValue__fglm_\",\"container\":\"TypingStats_container__l6ant\",\"summary\":\"TypingStats_summary__yGlcZ\",\"statItem\":\"TypingStats_statItem__aEzNk\",\"statLabel\":\"TypingStats_statLabel__VyOHV\",\"lastSession\":\"TypingStats_lastSession__c_vmU\",\"sectionTitle\":\"TypingStats_sectionTitle__jq0Di\",\"sessionInfo\":\"TypingStats_sessionInfo__i7ic2\",\"sessionDate\":\"TypingStats_sessionDate__X7mIO\",\"sessionStats\":\"TypingStats_sessionStats__p3IBn\",\"sessionStat\":\"TypingStats_sessionStat__PecL6\",\"sessionStatLabel\":\"TypingStats_sessionStatLabel__yYxm5\",\"sessionStatValue\":\"TypingStats_sessionStatValue__Wj4xT\",\"recentStats\":\"TypingStats_recentStats__11G4N\",\"tableContainer\":\"TypingStats_tableContainer__S7gNF\",\"statsTable\":\"TypingStats_statsTable__wNoxu\",\"noData\":\"TypingStats_noData__Hp_J_\"};","export * from '../client/components/navigation';\n\n//# sourceMappingURL=navigation.js.map","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"page_container__WJamO\",\"header\":\"page_header__hMSOF\",\"title\":\"page_title__st_eQ\",\"subtitle\":\"page_subtitle__26Ix7\",\"newSessionButton\":\"page_newSessionButton__qFt1M\",\"grid\":\"page_grid__P1RQ3\",\"statsSection\":\"page_statsSection__CFt2V\",\"monitoringSection\":\"page_monitoringSection__Don15\",\"sectionTitle\":\"page_sectionTitle__8MSOY\",\"loading\":\"page_loading__eqTbn\",\"gpuInfo\":\"page_gpuInfo__KtDvF\",\"infoTitle\":\"page_infoTitle__CHzRR\",\"infoGrid\":\"page_infoGrid__Ljw4j\",\"infoItem\":\"page_infoItem__35p8H\",\"infoLabel\":\"page_infoLabel__TeEGa\",\"infoValue\":\"page_infoValue__u52jL\",\"memoryControls\":\"page_memoryControls__nh_gQ\",\"controlsTitle\":\"page_controlsTitle__1U2wH\",\"controlsGrid\":\"page_controlsGrid__g2Klq\",\"memoryStatus\":\"page_memoryStatus__H8BAF\",\"statusLabel\":\"page_statusLabel__dkPdA\",\"statusValue\":\"page_statusValue__epal5\",\"memoryActions\":\"page_memoryActions___uz8I\",\"optimizeButton\":\"page_optimizeButton__8pcyV\",\"emergencyButton\":\"page_emergencyButton__HITmk\"};","/**\r\n * 네이티브 모듈 클라이언트 API\r\n * \r\n * 프론트엔드에서 네이티브 모듈 기능을 사용하기 위한 래퍼 함수들을 제공합니다.\r\n */\r\n\r\nimport type {\r\n  MemoryInfo,\r\n  OptimizationResult,\r\n  GCResult,\r\n  // GpuInfo,\r\n  // GpuComputationResult,\r\n  // TaskResult \r\n} from '@/types';\r\nimport { OptimizationLevel } from '@/types/native-module';\r\n\r\n// 상태 캐시\r\nlet moduleStatusCache: any = null;\r\nlet lastStatusCheck = 0;\r\nconst STATUS_CACHE_TTL = 10000; // 10초\r\n\r\n// 브라우저 환경인지 확인 - 상수로 변경\r\nconst isBrowser = typeof window !== 'undefined';\r\n\r\n/**\r\n * fetch 요청을 래핑하는 함수\r\n */\r\nasync function enhancedFetch(url: string, options: RequestInit = {}): Promise<Response> {\r\n  try {\r\n    const response = await fetch(url, {\r\n      ...options,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n    });\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error(`Fetch 요청 실패 (${url}):`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 메모리 정보 가져오기\r\n */\r\nexport async function getMemoryInfo() {\r\n  if (!isBrowser) {\r\n    return { success: false, error: 'Server environment', timestamp: Date.now() };\r\n  }\r\n\r\n  try {\r\n    const response = await enhancedFetch('/api/native/memory');\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('메모리 정보 가져오기 실패:', error);\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 메모리 최적화 수행\r\n */\r\nexport async function optimizeMemory(level = 2, emergency = false) {\r\n  try {\r\n    const response = await enhancedFetch('/api/native/memory', {\r\n      method: 'PUT',\r\n      body: JSON.stringify({\r\n        type: 'optimize',\r\n        level: level.toString(),\r\n        emergency\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('메모리 최적화 실패:', error);\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 가비지 컬렉션 강제 수행\r\n */\r\nexport async function forceGarbageCollection() {\r\n  try {\r\n    const response = await enhancedFetch('/api/native/memory', {\r\n      method: 'PUT',\r\n      body: JSON.stringify({\r\n        type: 'gc'\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('가비지 컬렉션 실패:', error);\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * GPU 정보 가져오기\r\n */\r\nexport async function getGpuInfo() {\r\n  try {\r\n    const response = await enhancedFetch('/api/native/gpu');\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`GPU 정보 요청 실패: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('GPU 정보 가져오기 오류:', error);\r\n    return {\r\n      success: false,\r\n      available: false,\r\n      gpuInfo: null,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * GPU 가속 활성화/비활성화\r\n * @param enable 활성화 여부\r\n */\r\nexport async function setGpuAcceleration(enable: boolean) {\r\n  try {\r\n    // 요청 데이터 준비\r\n    const requestBody = JSON.stringify({\r\n      enable\r\n    });\r\n\r\n    // 요청 보내기\r\n    const response = await enhancedFetch('/api/native/gpu/acceleration', {\r\n      method: 'PUT',\r\n      body: requestBody\r\n    });\r\n\r\n    // 응답 처리\r\n    if (!response.ok) {\r\n      throw new Error(`GPU 가속 설정 요청 실패: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('GPU 가속 설정 오류:', error);\r\n    return {\r\n      success: false,\r\n      enabled: false,\r\n      result: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * GPU 계산 수행\r\n * @param data 계산에 사용할 데이터\r\n * @param computationType 계산 유형\r\n */\r\nexport async function performGpuComputation<_T = unknown>(data: unknown, computationType: string) {\r\n  try {\r\n    // 요청 데이터 준비\r\n    const requestBody = JSON.stringify({\r\n      data,\r\n      computationType\r\n    });\r\n\r\n    // 요청 보내기\r\n    const response = await enhancedFetch('/api/native/gpu', {\r\n      method: 'POST',\r\n      body: requestBody\r\n    });\r\n\r\n    // 응답 처리\r\n    if (!response.ok) {\r\n      throw new Error(`GPU 계산 요청 실패: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('GPU 계산 오류:', error);\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 네이티브 모듈 상태 확인\r\n */\r\nexport async function getNativeModuleStatus() {\r\n  if (!isBrowser) {\r\n    return { success: false, error: 'Server environment', timestamp: Date.now() };\r\n  }\r\n\r\n  // 캐시된 상태가 있고 TTL 내라면 캐시된 값 반환\r\n  const now = Date.now();\r\n  if (moduleStatusCache && now - lastStatusCheck < STATUS_CACHE_TTL) {\r\n    return moduleStatusCache;\r\n  }\r\n\r\n  try {\r\n    const response = await enhancedFetch('/api/native/status');\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`네이티브 모듈 상태 요청 실패: ${response.status}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n\r\n    // 캐시 업데이트\r\n    moduleStatusCache = result;\r\n    lastStatusCheck = now;\r\n\r\n    return result;\r\n  } catch (error) {\r\n    console.error('네이티브 모듈 상태 확인 실패:', error);\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n    };\r\n  }\r\n}\r\n","import(/* webpackMode: \"eager\" */ \"C:\\\\Users\\\\user\\\\Desktop\\\\loop\\\\src\\\\app\\\\dashboard\\\\page.tsx\");\n"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","formatTime","date","Date","timestamp","getHours","toString","padStart","getMinutes","getSeconds","chartOptions","responsive","maintainAspectRatio","animation","duration","scales","y","beginAtZero","title","display","text","x","plugins","legend","position","tooltip","callbacks","label","context","dataset","value","parsed","toFixed","MemoryMonitor","pollInterval","historyLength","showControls","height","detailed","darkMode","memoryData","setMemoryData","useState","labels","used","total","percent","rss","currentMemory","setCurrentMemory","isRefreshing","setIsRefreshing","isPerformingGC","setIsPerformingGC","memoryStatus","setMemoryStatus","timerRef","useRef","evaluateMemoryStatus","percentUsed","fetchMemoryInfo","memoryInfo","getMemoryInfo","now","formattedTime","heapUsed","heap_used_mb","heapUsedMB","heapTotal","heap_total","percent_used","rss_mb","rssMB","prev","newLabels","newUsed","newTotal","newPercent","newRSS","length","shift","error","console","handleGarbageCollection","result","requestGC","success","freedMB","log","useEffect","current","setInterval","chartData","datasets","data","borderColor","backgroundColor","tension","div","className","styles","h3","span","style","Line","options","button","onClick","disabled","TypingStats","p","hours","Math","floor","seconds","minutes","secs","formatDate","dateString","toLocaleDateString","year","month","day","hour","minute","totalKeyCount","toLocaleString","totalTypingTime","averageSpeed","averageAccuracy","lastSession","keyCount","typingTime","round","accuracy","recentStats","table","thead","tr","th","tbody","map","stat","index","td","gpuInfoCache","gpuInfoExpiration","isGpuAccelerationEnabled","gpuInfo","getGpuInformation","accelerationEnabled","getGpuInfo","response","GPU_INFO_TTL","toggleGpuAcceleration","enable","remoteSetGpuAcceleration","evaluateGpuPerformance","available","score","deviceType","vendor","deviceName","vendorLower","toLowerCase","nameLower","includes","min","max","executeGpuTask","taskType","warn","performGpuComputation","enableGpuAcceleration","disableGpuAcceleration","window","__gpuAccelerator","gpuCache","capabilities","lastCheck","architecture","detectGpuCapabilities","webGLSupported","webGL2Supported","webGPUSupported","hardwareAccelerated","renderer","isDiscrete","gpuTier","document","canvas","createElement","gl","getContext","debugInfo","getExtension","getParameter","UNMASKED_VENDOR_WEBGL","UNMASKED_RENDERER_WEBGL","isHardwareAccelerated","some","sr","identifyVendor","rendererLower","identifyArchitecture","match","determineGpuTier","gl2","navigator","memorySizeMB","estimateGpuMemory","tier","extension","then","info","__gpuInfo","isAccelerated","getGPUTier","type","getTierDescription","DashboardPage","router","useRouter","isLoading","setIsLoading","stats","setStats","setGpuInfo","isOptimizing","optimizeMemory","useMemoryOptimizer","useAutoMemoryOptimization","enabled","threshold","interval","showNotifications","showToast","useToast","toasts","useCallback","message","id","setToasts","setTimeout","filter","toast","hideToast","clearAllToasts","setIsOptimizing","lastOptimization","setLastOptimization","intervalRef","runOptimization","memoryResponse","memInfo","optimizationLevel","optimizationResponse","freed_mb","err","Error","clearInterval","fetchStats","fetch","ok","json","detectGpu","intervalId","section","h1","handleStartNewSession","push","h2","handleEmergencyOptimize","enhancedFetch","url","headers","status","level","emergency","method","body","JSON","stringify","setGpuAcceleration","requestBody","computationType"],"sourceRoot":"","ignoreList":[9]}