{"version":3,"file":"static/chunks/app/page-35508910cdacb6b7.js","mappings":"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","sources":["webpack://_N_E/./src/app/components/WindowControls.module.css","webpack://_N_E/./src/app/components/ThemeProvider.tsx","webpack://_N_E/./src/app/components/TypingMonitor.tsx","webpack://_N_E/./src/app/components/TypingChart.tsx","webpack://_N_E/./src/app/components/TabNavigation.tsx","webpack://_N_E/./src/app/components/WindowControls.tsx","webpack://_N_E/./src/app/components/AppHeader.tsx","webpack://_N_E/./src/app/components/AppFooter.tsx","webpack://_N_E/./src/app/components/MainLayout.tsx","webpack://_N_E/./src/app/components/DebugPanel.tsx","webpack://_N_E/./src/app/components/dialogs/ConfirmDialog.tsx","webpack://_N_E/./src/app/components/dialogs/SaveConfirmDialog.tsx","webpack://_N_E/./src/app/components/Settings.tsx","webpack://_N_E/./src/app/components/RestartLoading.tsx","webpack://_N_E/./src/app/hooks/useElectronApi.ts","webpack://_N_E/./src/app/utils/darkModeUtils.ts","webpack://_N_E/./src/app/hooks/useSettings.ts","webpack://_N_E/./src/app/hooks/useTypingStats.ts","webpack://_N_E/./src/app/hooks/useTabNavigation.ts","webpack://_N_E/./src/app/hooks/useMemoryManagement.ts","webpack://_N_E/./src/app/hooks/useAutoHideHeader.ts","webpack://_N_E/./src/app/components/HomeContent.tsx","webpack://_N_E/./src/app/page.tsx","webpack://_N_E/./src/app/components/TypingMonitor.module.css","webpack://_N_E/./src/app/components/Toast.tsx","webpack://_N_E/./src/app/components/ToastContext.tsx","webpack://_N_E/./src/app/components/AppHeader.module.css","webpack://_N_E/./src/app/components/TypingChart.module.css","webpack://_N_E/./src/app/components/Settings.module.css","webpack://_N_E/./src/app/components/dialogs/ConfirmDialog.module.css","webpack://_N_E/./src/app/components/RestartLoading.module.css","webpack://_N_E/./src/app/components/Toast.module.css","webpack://_N_E/./src/app/page.module.css","webpack://_N_E/?c500"],"sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"windowControls\":\"WindowControls_windowControls__SbBFq\",\"windowButton\":\"WindowControls_windowButton__rzJFU\",\"buttonContent\":\"WindowControls_buttonContent__1XpLJ\",\"minimizeButton\":\"WindowControls_minimizeButton__hBC_D\",\"maximizeButton\":\"WindowControls_maximizeButton__19xOw\",\"closeButton\":\"WindowControls_closeButton__GWHV_\",\"minimizeIcon\":\"WindowControls_minimizeIcon__HwMi5\",\"maximizeIcon\":\"WindowControls_maximizeIcon__H4uH1\",\"closeIcon\":\"WindowControls_closeIcon__OfU_7\"};","'use client';\r\n\r\nimport React, { createContext, useState, useContext, ReactNode, useEffect } from 'react';\r\n\r\n// 테마 컨텍스트 정의\r\ninterface ThemeContextType {\r\n  theme: 'light' | 'dark';\r\n  toggleTheme: () => void;\r\n  setDarkMode: (enabled: boolean) => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType>({\r\n  theme: 'light',\r\n  toggleTheme: () => {},\r\n  setDarkMode: () => {},\r\n});\r\n\r\n// useTheme 훅 생성\r\nexport const useTheme = () => useContext(ThemeContext);\r\n\r\ninterface ThemeProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function ThemeProvider({ children }: ThemeProviderProps) {\r\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\r\n  \r\n  // 다크 모드 설정 함수\r\n  const setDarkMode = (enabled: boolean) => {\r\n    setTheme(enabled ? 'dark' : 'light');\r\n    \r\n    // HTML 태그에 dark-mode 클래스 적용\r\n    if (enabled) {\r\n      document.documentElement.classList.add('dark-mode');\r\n    } else {\r\n      document.documentElement.classList.remove('dark-mode');\r\n    }\r\n    \r\n    // 로컬 스토리지에 설정 저장\r\n    try {\r\n      const savedSettings = localStorage.getItem('app-settings');\r\n      const settings = savedSettings ? JSON.parse(savedSettings) : {};\r\n      settings.darkMode = enabled;\r\n      localStorage.setItem('app-settings', JSON.stringify(settings));\r\n    } catch (e) {\r\n      console.error('설정 저장 오류:', e);\r\n    }\r\n    \r\n    // Electron API가 있으면 설정 저장\r\n    if (window.electronAPI) {\r\n      window.electronAPI.setDarkMode(enabled);\r\n    }\r\n  };\r\n  \r\n  // 테마 토글 함수\r\n  const toggleTheme = () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setDarkMode(newTheme === 'dark');\r\n  };\r\n  \r\n  useEffect(() => {\r\n    // 로컬 스토리지에서 다크 모드 설정 불러오기\r\n    try {\r\n      const savedSettings = localStorage.getItem('app-settings');\r\n      if (savedSettings) {\r\n        const settings = JSON.parse(savedSettings);\r\n        setDarkMode(settings.darkMode || false);\r\n      } else {\r\n        // 시스템 다크 모드 감지\r\n        const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n        setDarkMode(prefersDarkMode);\r\n      }\r\n    } catch (e) {\r\n      console.error('설정 파싱 오류:', e);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme, setDarkMode }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}","'use client';\r\n\r\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport styles from './TypingMonitor.module.css';\r\n\r\ninterface TypingMonitorProps {\r\n  stats: {\r\n    keyCount: number;\r\n    typingTime: number;\r\n    windowTitle: string;\r\n    browserName?: string;\r\n    totalChars?: number;\r\n    totalCharsNoSpace?: number;\r\n    totalWords?: number;\r\n    pages?: number;\r\n    accuracy?: number;\r\n  };\r\n  isTracking: boolean;\r\n  onStartTracking: () => void;\r\n  onStopTracking: () => void;\r\n  onSaveStats: (content: string) => void;\r\n}\r\n\r\n// 포맷 함수를 컴포넌트 외부로 이동하여 렌더링마다 재생성되지 않도록 함\r\nconst formatTime = (seconds: number): string => {\r\n  if (seconds < 60) return `${seconds}초`;\r\n  \r\n  const minutes = Math.floor(seconds / 60);\r\n  const remainingSeconds = seconds % 60;\r\n  \r\n  if (minutes < 60) {\r\n    return `${minutes}분 ${remainingSeconds}초`;\r\n  }\r\n  \r\n  const hours = Math.floor(minutes / 60);\r\n  const remainingMinutes = minutes % 60;\r\n  \r\n  return `${hours}시간 ${remainingMinutes}분 ${remainingSeconds}초`;\r\n};\r\n\r\n// 평균 속도 계산 함수도 외부로 이동\r\nconst getAverageSpeed = (keyCount: number, time: number): string => {\r\n  if (time <= 0) return '0 타/분';\r\n  return `${Math.round((keyCount / time) * 60)} 타/분`;\r\n};\r\n\r\nexport const TypingMonitor = React.memo(function TypingMonitor({ \r\n  stats, \r\n  isTracking, \r\n  onStartTracking, \r\n  onStopTracking,\r\n  onSaveStats\r\n}: TypingMonitorProps) {\r\n  const [description, setDescription] = useState('');\r\n  const [lastAction, setLastAction] = useState<string>('');\r\n  const [activeWebsiteTab, setActiveWebsiteTab] = useState<string>('docs');\r\n  const [activeStatsTab, setActiveStatsTab] = useState<string>('typing'); \r\n  \r\n  // 브라우저 체크 결과를 ref로 변경하여 리렌더링 방지\r\n  const browserCheckResultRef = React.useRef<{\r\n    name: string | null;\r\n    isGoogleDocs: boolean;\r\n    title: string | null;\r\n  } | null>(null);\r\n\r\n  // 브라우저 정보 확인 함수 메모이제이션\r\n  const checkBrowserInfo = useCallback(async () => {\r\n    if (window.electronAPI?.getCurrentBrowserInfo) {\r\n      try {\r\n        const info = await window.electronAPI.getCurrentBrowserInfo();\r\n        browserCheckResultRef.current = info;\r\n      } catch (error) {\r\n        console.error('브라우저 정보 확인 오류:', error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // 정기적으로 브라우저 정보 업데이트 (5초 → 30초로 변경하여 부하 대폭 감소)\r\n  useEffect(() => {\r\n    if (isTracking) {\r\n      // 초기 확인\r\n      checkBrowserInfo();\r\n      \r\n      // 더 긴 간격(30초)으로 업데이트하여 리소스 사용 감소\r\n      const interval = setInterval(checkBrowserInfo, 30000);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isTracking, checkBrowserInfo]);\r\n\r\n  // 메모이제이션된 핸들러 함수들\r\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setDescription(e.target.value);\r\n  }, []);\r\n\r\n  const handleSave = useCallback(() => {\r\n    onSaveStats(description);\r\n    setDescription('');\r\n    setLastAction('저장됨');\r\n    \r\n    // 2초 후 메시지 제거\r\n    setTimeout(() => {\r\n      setLastAction('');\r\n    }, 2000);\r\n  }, [description, onSaveStats]);\r\n\r\n  const handleToggleTracking = useCallback(() => {\r\n    if (isTracking) {\r\n      onStopTracking();\r\n    } else {\r\n      onStartTracking();\r\n    }\r\n  }, [isTracking, onStartTracking, onStopTracking]);\r\n\r\n  const handleWebsiteTabChange = useCallback((tab: string) => {\r\n    setActiveWebsiteTab(tab);\r\n  }, []);\r\n\r\n  const handleStatsTabChange = useCallback((tab: string) => {\r\n    setActiveStatsTab(tab);\r\n  }, []);\r\n\r\n  // 웹사이트 탭 컨텐츠 메모이제이션\r\n  const websiteTabContent = useMemo(() => {\r\n    switch (activeWebsiteTab) {\r\n      case 'docs':\r\n        return (\r\n          <div className={styles.websiteLinks}>\r\n            <a href=\"https://docs.google.com/document/\" target=\"_blank\" rel=\"noopener noreferrer\" className={styles.websiteLink}>\r\n              구글 문서 열기\r\n            </a>\r\n            <a href=\"https://docs.google.com/spreadsheets/\" target=\"_blank\" rel=\"noopener noreferrer\" className={styles.websiteLink}>\r\n              구글 스프레드시트 열기\r\n            </a>\r\n            <a href=\"https://docs.google.com/presentation/\" target=\"_blank\" rel=\"noopener noreferrer\" className={styles.websiteLink}>\r\n              구글 프레젠테이션 열기\r\n            </a>\r\n            <a href=\"https://www.notion.so/\" target=\"_blank\" rel=\"noopener noreferrer\" className={styles.websiteLink}>\r\n              Notion 열기\r\n            </a>\r\n          </div>\r\n        );\r\n      case 'office':\r\n        return (\r\n          <div className={styles.websiteLinks}>\r\n            <a href=\"https://www.office.com/launch/word\" target=\"_blank\" rel=\"noopener noreferrer\" className={styles.websiteLink}>\r\n              Word 온라인 열기\r\n            </a>\r\n            <a href=\"https://www.office.com/launch/excel\" target=\"_blank\" rel=\"noopener noreferrer\" className={styles.websiteLink}>\r\n              Excel 온라인 열기\r\n            </a>\r\n            <a href=\"https://www.office.com/launch/powerpoint\" target=\"_blank\" rel=\"noopener noreferrer\" className={styles.websiteLink}>\r\n              PowerPoint 온라인 열기\r\n            </a>\r\n            <a href=\"https://www.hancom.com/main/main.do\" target=\"_blank\" rel=\"noopener noreferrer\" className={styles.websiteLink}>\r\n              한글과컴퓨터 열기\r\n            </a>\r\n          </div>\r\n        );\r\n      case 'coding':\r\n        return (\r\n          <div className={styles.websiteLinks}>\r\n            <a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener noreferrer\" className={styles.websiteLink}>\r\n              GitHub 열기\r\n            </a>\r\n            <a href=\"https://gitlab.com/\" target=\"_blank\" rel=\"noopener noreferrer\" className={styles.websiteLink}>\r\n              GitLab 열기\r\n            </a>\r\n            <a href=\"https://codesandbox.io/\" target=\"_blank\" rel=\"noopener noreferrer\" className={styles.websiteLink}>\r\n              CodeSandbox 열기\r\n            </a>\r\n            <a href=\"https://codepen.io/\" target=\"_blank\" rel=\"noopener noreferrer\" className={styles.websiteLink}>\r\n              CodePen 열기\r\n            </a>\r\n          </div>\r\n        );\r\n      case 'sns':\r\n        return (\r\n          <div className={styles.websiteLinks}>\r\n            <a href=\"https://slack.com/\" target=\"_blank\" rel=\"noopener noreferrer\" className={styles.websiteLink}>\r\n              Slack 열기\r\n            </a>\r\n            <a href=\"https://discord.com/\" target=\"_blank\" rel=\"noopener noreferrer\" className={styles.websiteLink}>\r\n              Discord 열기\r\n            </a>\r\n            <a href=\"https://www.messenger.com/\" target=\"_blank\" rel=\"noopener noreferrer\" className={styles.websiteLink}>\r\n              Messenger 열기\r\n            </a>\r\n            <a href=\"https://mail.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\" className={styles.websiteLink}>\r\n              Gmail 열기\r\n            </a>\r\n          </div>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  }, [activeWebsiteTab]);\r\n\r\n  // 통계 탭 컨텐츠 메모이제이션\r\n  const statsTabContent = useMemo(() => {\r\n    switch (activeStatsTab) {\r\n      case 'typing':\r\n        return (\r\n          <div className={styles.statsGroup}>\r\n            <div className={styles.statCard}>\r\n              <div className={styles.statLabel}>타자 수</div>\r\n              <div className={styles.statValue}>{stats.keyCount.toLocaleString()}</div>\r\n            </div>\r\n            \r\n            <div className={styles.statCard}>\r\n              <div className={styles.statLabel}>타이핑 시간</div>\r\n              <div className={styles.statValue}>{formatTime(stats.typingTime)}</div>\r\n            </div>\r\n            \r\n            <div className={styles.statCard}>\r\n              <div className={styles.statLabel}>평균 속도</div>\r\n              <div className={styles.statValue}>{getAverageSpeed(stats.keyCount, stats.typingTime)}</div>\r\n            </div>\r\n          </div>\r\n        );\r\n      case 'document':\r\n        return (\r\n          <div className={styles.statsGroup}>\r\n            <div className={styles.statCard}>\r\n              <div className={styles.statLabel}>페이지 수</div>\r\n              <div className={styles.statValue}>{stats.pages?.toFixed(1) || '0.0'}</div>\r\n            </div>\r\n            \r\n            <div className={styles.statCard}>\r\n              <div className={styles.statLabel}>단어 수</div>\r\n              <div className={styles.statValue}>{stats.totalWords?.toLocaleString() || '0'}</div>\r\n            </div>\r\n            \r\n            <div className={styles.statCard}>\r\n              <div className={styles.statLabel}>글자 수</div>\r\n              <div className={styles.statValue}>{stats.totalChars?.toLocaleString() || '0'}</div>\r\n            </div>\r\n          </div>\r\n        );\r\n      case 'accuracy':\r\n        return (\r\n          <div className={styles.statsGroup}>\r\n            <div className={styles.statCard}>\r\n              <div className={styles.statLabel}>글자 수 (공백 제외)</div>\r\n              <div className={styles.statValue}>{stats.totalCharsNoSpace?.toLocaleString() || '0'}</div>\r\n            </div>\r\n            \r\n            <div className={styles.statCard}>\r\n              <div className={styles.statLabel}>정확도</div>\r\n              <div className={styles.statValue}>{stats.accuracy || 100}%</div>\r\n            </div>\r\n          </div>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  }, [activeStatsTab, stats]);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.monitorHeader}>\r\n        <h2>타이핑 모니터링</h2>\r\n        <button \r\n          className={`${styles.trackingButton} ${isTracking ? styles.trackingActive : ''}`}\r\n          onClick={handleToggleTracking}\r\n        >\r\n          {isTracking ? '모니터링 중지' : '모니터링 시작'}\r\n        </button>\r\n      </div>\r\n\r\n      <div className={styles.statusIndicator}>\r\n        <div className={`${styles.indicator} ${isTracking ? styles.active : ''}`}></div>\r\n        <span>모니터링 상태: <strong>{isTracking ? '활성화' : '비활성화'}</strong></span>\r\n        \r\n        {lastAction && (\r\n          <div className={styles.actionFeedback}>{lastAction}</div>\r\n        )}\r\n      </div>\r\n      \r\n      <div className={styles.contentWrapper}>\r\n        <div className={styles.leftPanel}>\r\n          <div className={styles.browserStatus}>\r\n            <h3>브라우저 상태</h3>\r\n            <div className={styles.browserInfo}>\r\n              <div className={styles.browserRow}>\r\n                <span>감지된 브라우저:</span>\r\n                <span className={styles.browserValue}>\r\n                  {stats.browserName || browserCheckResultRef.current?.name || '없음'}\r\n                </span>\r\n              </div>\r\n              \r\n              <div className={styles.browserRow}>\r\n                <span>구글 문서 감지:</span>\r\n                <span className={styles.browserValue}>\r\n                  {browserCheckResultRef.current?.isGoogleDocs ? (\r\n                    <span className={styles.detectedBadge}>감지됨 ✓</span>\r\n                  ) : (\r\n                    <span className={styles.notDetectedBadge}>아님 ⨯</span>\r\n                  )}\r\n                </span>\r\n              </div>\r\n              \r\n              <div className={styles.browserRow}>\r\n                <span>현재 창:</span>\r\n                <span className={styles.browserValue} title={stats.windowTitle || browserCheckResultRef.current?.title || ''}>\r\n                  {(stats.windowTitle || browserCheckResultRef.current?.title || '없음').substring(0, 60)}\r\n                  {(stats.windowTitle || browserCheckResultRef.current?.title || '').length > 60 ? '...' : ''}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className={styles.websiteTabs}>\r\n            <div className={styles.websiteTabHeader}>\r\n              <button \r\n                className={`${styles.websiteTabButton} ${activeWebsiteTab === 'docs' ? styles.activeWebsiteTab : ''}`}\r\n                onClick={() => handleWebsiteTabChange('docs')}\r\n              >\r\n                구글 문서\r\n              </button>\r\n              <button \r\n                className={`${styles.websiteTabButton} ${activeWebsiteTab === 'office' ? styles.activeWebsiteTab : ''}`}\r\n                onClick={() => handleWebsiteTabChange('office')}\r\n              >\r\n                오피스\r\n              </button>\r\n              <button \r\n                className={`${styles.websiteTabButton} ${activeWebsiteTab === 'coding' ? styles.activeWebsiteTab : ''}`}\r\n                onClick={() => handleWebsiteTabChange('coding')}\r\n              >\r\n                코딩\r\n              </button>\r\n              <button \r\n                className={`${styles.websiteTabButton} ${activeWebsiteTab === 'sns' ? styles.activeWebsiteTab : ''}`}\r\n                onClick={() => handleWebsiteTabChange('sns')}\r\n              >\r\n                SNS/메신저\r\n              </button>\r\n            </div>\r\n            \r\n            <div className={styles.websiteTabContent}>\r\n              {websiteTabContent}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className={styles.rightPanel}>\r\n          {/* 통계 패널을 탭 형식으로 변경 */}\r\n          <div className={styles.statsTabs}>\r\n            <button\r\n              className={`${styles.statsTabButton} ${activeStatsTab === 'typing' ? styles.activeStatsTab : ''}`}\r\n              onClick={() => handleStatsTabChange('typing')}\r\n            >\r\n              타이핑 정보\r\n            </button>\r\n            <button\r\n              className={`${styles.statsTabButton} ${activeStatsTab === 'document' ? styles.activeStatsTab : ''}`}\r\n              onClick={() => handleStatsTabChange('document')}\r\n            >\r\n              문서 정보\r\n            </button>\r\n            <button\r\n              className={`${styles.statsTabButton} ${activeStatsTab === 'accuracy' ? styles.activeStatsTab : ''}`}\r\n              onClick={() => handleStatsTabChange('accuracy')}\r\n            >\r\n              정확도 & 속도\r\n            </button>\r\n          </div>\r\n          \r\n          <div className={styles.statsTabContent}>\r\n            {statsTabContent}\r\n          </div>\r\n          \r\n          <div className={styles.saveSection}>\r\n            <h3>세션 저장</h3>\r\n            <p>작업한 내용에 대한 설명을 입력하세요</p>\r\n            <textarea\r\n              className={styles.descriptionInput}\r\n              value={description}\r\n              onChange={handleDescriptionChange}\r\n              placeholder=\"작업 내용 (예: 보고서 작성, 논문 작성 등)\"\r\n              rows={4}\r\n            />\r\n            <button \r\n              className={styles.saveButton} \r\n              onClick={handleSave}\r\n              disabled={stats.keyCount === 0 || !description.trim()}\r\n            >\r\n              통계 저장\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});","'use client';\r\n\r\nimport React, { useEffect, useState, useCallback, useMemo, useRef } from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './TypingChart.module.css';\r\n\r\n// Chart.js 컴포넌트 등록\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\ninterface LogType {\r\n  id: number;\r\n  content: string;\r\n  key_count: number;\r\n  typing_time: number;\r\n  timestamp: string;\r\n  created_at: string;\r\n}\r\n\r\ninterface TypingChartProps {\r\n  logs: LogType[];\r\n}\r\n\r\n// 로그 데이터 필터링 함수 - 컴포넌트 외부로 이동\r\nconst filterLogsForChart = (logs: LogType[]) => {\r\n  // 최근 7일 데이터만 표시 (30일에서 7일로 단축)\r\n  const sevenDaysAgo = new Date();\r\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\r\n  \r\n  return logs\r\n    .filter(log => new Date(log.timestamp) >= sevenDaysAgo)\r\n    .slice(0, 50); // 최대 50개 항목으로 제한 (100개에서 50개로 축소)\r\n};\r\n\r\nexport const TypingChart = React.memo(function TypingChart({ logs }: TypingChartProps) {\r\n  // 다크 모드 상태 추적\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  \r\n  // 차트 인스턴스 참조 저장\r\n  const chartRefs = useRef<any[]>([]);\r\n  \r\n  // 컴포넌트 마운트/언마운트 감지\r\n  const isMountedRef = useRef(true);\r\n  \r\n  // 다크 모드 감지 함수 개선\r\n  useEffect(() => {\r\n    const checkDarkMode = () => {\r\n      const isDark = document.documentElement.classList.contains('dark-mode') || \r\n                    document.body.classList.contains('dark-mode');\r\n      setIsDarkMode(isDark);\r\n    };\r\n    \r\n    // 초기 확인\r\n    checkDarkMode();\r\n    \r\n    // 커스텀 이벤트 리스너 추가\r\n    const handleDarkModeChange = (event: CustomEvent<{darkMode: boolean}>) => {\r\n      setIsDarkMode(event.detail.darkMode);\r\n    };\r\n    \r\n    window.addEventListener('darkmode-changed', handleDarkModeChange as EventListener);\r\n    \r\n    // DOM 변화 관찰\r\n    const observer = new MutationObserver(checkDarkMode);\r\n    observer.observe(document.documentElement, { \r\n      attributes: true, \r\n      attributeFilter: ['class'] \r\n    });\r\n    observer.observe(document.body, { \r\n      attributes: true, \r\n      attributeFilter: ['class'] \r\n    });\r\n    \r\n    // 컴포넌트 마운트 상태 설정\r\n    isMountedRef.current = true;\r\n    \r\n    return () => {\r\n      // 컴포넌트 언마운트 시 모든 리소스 해제\r\n      isMountedRef.current = false;\r\n      observer.disconnect();\r\n      window.removeEventListener('darkmode-changed', handleDarkModeChange as EventListener);\r\n      \r\n      // 차트 인스턴스 정리\r\n      chartRefs.current.forEach(chart => {\r\n        if (chart && chart.destroy) {\r\n          chart.destroy();\r\n        }\r\n      });\r\n      \r\n      // 메모리 정리 요청\r\n      if (window.gc) {\r\n        try {\r\n          window.gc();\r\n        } catch (e) {\r\n          console.log('GC 호출 실패');\r\n        }\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // 필터링된 로그 데이터 메모이제이션 (최소 데이터만 사용)\r\n  const filteredLogs = useMemo(() => {\r\n    try {\r\n      // 데이터 검증 추가\r\n      if (!Array.isArray(logs)) {\r\n        console.warn('유효하지 않은 로그 데이터:', logs);\r\n        return [];\r\n      }\r\n      return filterLogsForChart(logs);\r\n    } catch (error) {\r\n      console.error('로그 필터링 중 오류:', error);\r\n      return [];\r\n    }\r\n  }, [logs]);\r\n\r\n  // 차트 옵션 - 다크 모드에 따라 변경되는 옵션들\r\n  const getChartOptions = useCallback((title: string) => {\r\n    return {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      // 메모리 사용량 감소를 위한 설정 추가\r\n      animation: {\r\n        duration: 0 // 애니메이션 비활성화\r\n      },\r\n      // 데이터 포인트 수 제한\r\n      elements: {\r\n        point: {\r\n          radius: 2, // 더 작은 포인트 크기\r\n          hoverRadius: 4,\r\n        },\r\n        line: {\r\n          tension: 0, // 직선으로 연결 (곡선 없음)\r\n        }\r\n      },\r\n      // 렌더링 성능 개선\r\n      devicePixelRatio: 1,\r\n      plugins: {\r\n        legend: { \r\n          position: 'top' as const,\r\n          labels: {\r\n            color: isDarkMode ? '#E0E0E0' : '#333',\r\n            // 폰트 크기 축소\r\n            font: {\r\n              size: 11,\r\n            }\r\n          }\r\n        },\r\n        title: { \r\n          display: true, \r\n          text: title,\r\n          color: isDarkMode ? '#E0E0E0' : '#333',\r\n          // 수정: 'normal'을 리터럴로 변경\r\n          font: {\r\n            size: 12,\r\n            weight: 'normal' as const, // 타입 문제 해결\r\n          }\r\n        },\r\n        tooltip: {\r\n          enabled: true, // 필요한 경우에만 활성화\r\n          backgroundColor: isDarkMode ? 'rgba(30, 30, 30, 0.8)' : 'rgba(255, 255, 255, 0.8)',\r\n          titleColor: isDarkMode ? '#E0E0E0' : '#333',\r\n          bodyColor: isDarkMode ? '#B0B0B0' : '#666',\r\n          borderColor: isDarkMode ? '#303030' : '#ddd',\r\n          borderWidth: 1,\r\n          // 툴팁 콜백 간소화\r\n          callbacks: {\r\n            label: function(context: any) {\r\n              return context.raw;\r\n            }\r\n          }\r\n        }\r\n      },\r\n      scales: {\r\n        x: {\r\n          ticks: { \r\n            color: isDarkMode ? '#B0B0B0' : '#666',\r\n            // 표시할 틱 수 제한\r\n            maxTicksLimit: 7,\r\n            font: {\r\n              size: 10,\r\n            }\r\n          },\r\n          grid: { \r\n            color: isDarkMode ? 'rgba(60, 60, 60, 0.3)' : 'rgba(0, 0, 0, 0.1)',\r\n            // 그리드 간소화\r\n            display: false\r\n          }\r\n        },\r\n        y: {\r\n          ticks: { \r\n            color: isDarkMode ? '#B0B0B0' : '#666',\r\n            font: {\r\n              size: 10,\r\n            }\r\n          },\r\n          grid: { \r\n            color: isDarkMode ? 'rgba(60, 60, 60, 0.3)' : 'rgba(0, 0, 0, 0.1)',\r\n            // 그리드 선 수 제한\r\n            tickLength: 5\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }, [isDarkMode]);\r\n\r\n  // 날짜별 통계 데이터 가공 - 메모이제이션\r\n  const chartData = useMemo(() => {\r\n    try {\r\n      // 데이터가 없으면 기본값 반환\r\n      if (!Array.isArray(filteredLogs) || filteredLogs.length === 0) {\r\n        return {\r\n          labels: [],\r\n          keyCountData: [],\r\n          timeData: [],\r\n          speedData: [],\r\n          wordData: [],\r\n          charData: []\r\n        };\r\n      }\r\n      \r\n      const dataMap = new Map();\r\n\r\n      // 데이터 검증 추가\r\n      for (let i = 0; i < filteredLogs.length; i++) {\r\n        const log = filteredLogs[i];\r\n        if (!log || typeof log !== 'object') continue;\r\n        \r\n        // timestamp가 없거나 유효하지 않은 경우 건너뛰기\r\n        if (!log.timestamp || !Date.parse(log.timestamp)) continue;\r\n        \r\n        const date = new Date(log.timestamp).toLocaleDateString();\r\n        \r\n        if (!dataMap.has(date)) {\r\n          dataMap.set(date, {\r\n            totalKeyCount: 0,\r\n            totalTime: 0,\r\n            totalChars: 0,\r\n            totalWords: 0,\r\n          });\r\n        }\r\n\r\n        const data = dataMap.get(date);\r\n        data.totalKeyCount += log.key_count || 0;\r\n        data.totalTime += log.typing_time || 0;\r\n        \r\n        // 콘텐츠 길이 기반 계산 (간소화)\r\n        const contentLength = log.content?.length || 0;\r\n        data.totalChars += contentLength;\r\n        data.totalWords += Math.ceil(contentLength / 5);\r\n      }\r\n\r\n      // 배열로 변환 (Object.entries 사용)\r\n      const sortedDates = Array.from(dataMap.keys()).sort((a, b) => \r\n        new Date(a).getTime() - new Date(b).getTime()\r\n      );\r\n      \r\n      return {\r\n        // 날짜 레이블 간략화 (월/일만 표시)\r\n        labels: sortedDates.map(date => {\r\n          const parts = date.split('/');\r\n          return parts.length >= 2 ? `${parts[0]}/${parts[1]}` : date;\r\n        }),\r\n        keyCountData: sortedDates.map(date => dataMap.get(date).totalKeyCount),\r\n        // 분 단위로 변환하고 정수로 반올림\r\n        timeData: sortedDates.map(date => Math.round(dataMap.get(date).totalTime / 60)),\r\n        // 속도 계산도 간소화\r\n        speedData: sortedDates.map(date => {\r\n          const d = dataMap.get(date);\r\n          return d.totalTime > 0 ? Math.round((d.totalKeyCount / d.totalTime) * 60) : 0;\r\n        }),\r\n        wordData: sortedDates.map(date => dataMap.get(date).totalWords),\r\n        charData: sortedDates.map(date => dataMap.get(date).totalChars),\r\n      };\r\n    } catch (error) {\r\n      console.error('차트 데이터 생성 중 오류:', error);\r\n      // 오류 발생 시 빈 데이터 반환\r\n      return {\r\n        labels: [],\r\n        keyCountData: [],\r\n        timeData: [],\r\n        speedData: [],\r\n        wordData: [],\r\n        charData: []\r\n      };\r\n    }\r\n  }, [filteredLogs]);\r\n\r\n  // 차트 데이터 생성 함수 - 메모리 사용 최적화\r\n  const createChartData = useCallback((\r\n    labels: string[], \r\n    data: number[], \r\n    label: string, \r\n    color: string, \r\n    bgColor: string\r\n  ) => {\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label,\r\n          data,\r\n          borderColor: color,\r\n          backgroundColor: bgColor,\r\n          // 불필요한 옵션 제거\r\n          pointBackgroundColor: color,\r\n          borderWidth: 1,\r\n          fill: false,\r\n        },\r\n      ],\r\n    };\r\n  }, []);\r\n\r\n  // 메모이제이션된 차트 데이터 (함수로 생성)\r\n  const speedChartData = useMemo(() => \r\n    createChartData(\r\n      chartData.labels,\r\n      chartData.speedData,\r\n      '평균 타이핑 속도 (타/분)',\r\n      isDarkMode ? 'rgb(3, 218, 198)' : 'rgb(75, 192, 192)',\r\n      isDarkMode ? 'rgba(3, 218, 198, 0.5)' : 'rgba(75, 192, 192, 0.5)'\r\n    ),\r\n  [chartData.labels, chartData.speedData, isDarkMode, createChartData]);\r\n\r\n  // 더 효율적인 렌더링을 위한 지연 로딩 상태\r\n  const [shouldRenderCharts, setShouldRenderCharts] = useState(false);\r\n\r\n  // 지연 로딩 설정\r\n  useEffect(() => {\r\n    if (!shouldRenderCharts && filteredLogs.length > 0) {\r\n      // 약간의 지연 후 차트 렌더링 시작\r\n      const timer = setTimeout(() => {\r\n        if (isMountedRef.current) {\r\n          setShouldRenderCharts(true);\r\n        }\r\n      }, 100);\r\n      \r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [filteredLogs.length, shouldRenderCharts]);\r\n\r\n  // 차트 참조 설정 콜백\r\n  const setChartRef = useCallback((instance: any) => {\r\n    if (instance) {\r\n      chartRefs.current.push(instance);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.chartContainer}>\r\n      <h2>타이핑 통계 차트</h2>\r\n      \r\n      {filteredLogs.length > 0 ? (\r\n        <div className={styles.charts}>\r\n          {/* 차트 렌더링에 지연 로딩 및 조건부 렌더링 적용 */}\r\n          {shouldRenderCharts && chartData.labels.length > 0 && (\r\n            <div className={styles.chartItem}>\r\n              <h3>일별 평균 타이핑 속도</h3>\r\n              <div className={styles.chartWrapper}>\r\n                <Line \r\n                  data={speedChartData} \r\n                  options={getChartOptions('일별 평균 속도 (타/분)')}\r\n                  redraw={false}\r\n                  ref={setChartRef}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {/* 다른 차트들은 사용자가 탭을 전환할 때만 렌더링하도록 지연 로딩 처리 */}\r\n          {shouldRenderCharts && (\r\n            <>\r\n              <div className={styles.chartItem}>\r\n                <h3>일별 총 타자 수</h3>\r\n                <div className={styles.chartWrapper}>\r\n                  <Bar \r\n                    data={{\r\n                      labels: chartData.labels,\r\n                      datasets: [{\r\n                        label: '총 타자 수',\r\n                        data: chartData.keyCountData,\r\n                        backgroundColor: isDarkMode ? 'rgba(30, 136, 229, 0.7)' : 'rgba(54, 162, 235, 0.5)',\r\n                      }]\r\n                    }}\r\n                    options={getChartOptions('일별 총 타자 수')}\r\n                    redraw={false}\r\n                    ref={setChartRef}\r\n                  />\r\n                </div>\r\n              </div>\r\n              \r\n              <div className={styles.chartItem}>\r\n                <h3>일별 총 타이핑 시간</h3>\r\n                <div className={styles.chartWrapper}>\r\n                  <Bar \r\n                    data={{\r\n                      labels: chartData.labels,\r\n                      datasets: [{\r\n                        label: '총 타이핑 시간 (분)',\r\n                        data: chartData.timeData,\r\n                        backgroundColor: isDarkMode ? 'rgba(207, 102, 121, 0.7)' : 'rgba(255, 99, 132, 0.5)',\r\n                      }]\r\n                    }}\r\n                    options={getChartOptions('일별 총 타이핑 시간 (분)')}\r\n                    redraw={false}\r\n                    ref={setChartRef}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <p className={styles.noData}>저장된 타이핑 데이터가 없습니다.</p>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n","'use client';\r\n\r\nimport React, { memo } from 'react';\r\nimport styles from '../page.module.css';\r\n\r\ninterface TabNavigationProps {\r\n  activeTab: string;\r\n  onTabChange: (tab: string) => void;\r\n  onDebugToggle: () => void;\r\n  debugMode: boolean;\r\n}\r\n\r\nexport const TabNavigation = memo(function TabNavigation({\r\n  activeTab,\r\n  onTabChange,\r\n  onDebugToggle,\r\n  debugMode\r\n}: TabNavigationProps) {\r\n  return (\r\n    <div className={styles.appTabs} style={{ pointerEvents: 'auto' }}>\r\n      <button \r\n        className={`${styles.tabButton} ${activeTab === 'monitor' ? styles.activeTab : ''}`}\r\n        onClick={() => onTabChange('monitor')}\r\n        style={{ pointerEvents: 'auto' }}\r\n      >\r\n        모니터링\r\n      </button>\r\n      \r\n      <button \r\n        className={`${styles.tabButton} ${activeTab === 'history' ? styles.activeTab : ''}`}\r\n        onClick={() => onTabChange('history')}\r\n        style={{ pointerEvents: 'auto' }}\r\n      >\r\n        히스토리\r\n      </button>\r\n      \r\n      <button \r\n        className={`${styles.tabButton} ${activeTab === 'stats' ? styles.activeTab : ''}`}\r\n        onClick={() => onTabChange('stats')}\r\n        style={{ pointerEvents: 'auto' }}\r\n      >\r\n        통계\r\n      </button>\r\n      \r\n      <button \r\n        className={`${styles.tabButton} ${activeTab === 'chart' ? styles.activeTab : ''}`}\r\n        onClick={() => onTabChange('chart')}\r\n        style={{ pointerEvents: 'auto' }}\r\n      >\r\n        차트\r\n      </button>\r\n      \r\n      <button \r\n        className={`${styles.tabButton} ${activeTab === 'settings' ? styles.activeTab : ''}`}\r\n        onClick={() => onTabChange('settings')}\r\n        style={{ pointerEvents: 'auto' }}\r\n      >\r\n        설정\r\n      </button>\r\n      \r\n      {/* 디버그 모드 토글 버튼 */}\r\n      <button \r\n        className={`${styles.tabButton} ${styles.debugButton} ${debugMode ? styles.debugActive : ''}`}\r\n        onClick={onDebugToggle}\r\n        title=\"디버그 모드 토글\"\r\n        style={{ pointerEvents: 'auto' }}\r\n      >\r\n        🐞\r\n      </button>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default TabNavigation;\r\n","'use client';\r\n\r\nimport React from 'react';\r\nimport styles from './WindowControls.module.css';\r\n\r\ninterface WindowControlsProps {\r\n  api: any; // api prop 타입 정의 추가\r\n}\r\n\r\nexport function WindowControls({ api }: WindowControlsProps) {\r\n  const handleMinimize = () => {\r\n    if (api && typeof api.windowControl === 'function') {\r\n      api.windowControl('minimize');\r\n    }\r\n  };\r\n\r\n  const handleMaximize = () => {\r\n    if (api && typeof api.windowControl === 'function') {\r\n      api.windowControl('maximize');\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (api && typeof api.windowControl === 'function') {\r\n      api.windowControl('close');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.windowControls}>\r\n      <button \r\n        className={`${styles.windowButton} ${styles.minimizeButton}`} \r\n        onClick={handleMinimize}\r\n        aria-label=\"최소화\"\r\n      >\r\n        <div className={styles.buttonContent}>\r\n          <MinimizeIcon />\r\n        </div>\r\n      </button>\r\n      <button \r\n        className={`${styles.windowButton} ${styles.maximizeButton}`} \r\n        onClick={handleMaximize}\r\n        aria-label=\"최대화\"\r\n      >\r\n        <div className={styles.buttonContent}>\r\n          <MaximizeIcon />\r\n        </div>\r\n      </button>\r\n      <button \r\n        className={`${styles.windowButton} ${styles.closeButton}`} \r\n        onClick={handleClose}\r\n        aria-label=\"닫기\"\r\n      >\r\n        <div className={styles.buttonContent}>\r\n          <CloseIcon />\r\n        </div>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 아이콘 컴포넌트들\r\nfunction MinimizeIcon() {\r\n  return <span className={styles.minimizeIcon}>&#8211;</span>;\r\n}\r\n\r\nfunction MaximizeIcon() {\r\n  return <span className={styles.maximizeIcon}>&#x25A1;</span>;\r\n}\r\n\r\nfunction CloseIcon() {\r\n  return <span className={styles.closeIcon}>&#x2715;</span>;\r\n}\r\n","'use client';\r\n\r\nimport { memo, useState, useEffect, useRef } from 'react';\r\nimport { useTheme } from './ThemeProvider';\r\nimport { WindowControls } from './WindowControls';\r\nimport styles from './AppHeader.module.css';\r\nimport Image from 'next/image';\r\n\r\ninterface AppHeaderProps {\r\n  api: any;\r\n  isVisible?: boolean;\r\n  onVisibilityChange?: (visible: boolean) => void;\r\n  autoHide?: boolean;\r\n}\r\n\r\nexport const AppHeader = memo(function AppHeader({ \r\n  api, \r\n  isVisible = true, \r\n  onVisibilityChange,\r\n  autoHide = false\r\n}: AppHeaderProps) {\r\n  const { theme } = useTheme();\r\n  const [visibility, setVisibility] = useState(isVisible);\r\n  const lastMouseY = useRef(0);\r\n  const headerRef = useRef<HTMLDivElement>(null);\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const mouseInsideHeader = useRef(false);\r\n\r\n  useEffect(() => {\r\n    setVisibility(isVisible);\r\n  }, [isVisible]);\r\n\r\n  useEffect(() => {\r\n    if (!autoHide) return;\r\n    const handleMouseMove = (e: MouseEvent) => {\r\n      const currentY = e.clientY;\r\n      if (currentY < 20 && !visibility) {\r\n        setVisibility(true);\r\n        onVisibilityChange && onVisibilityChange(true);\r\n      } else if (currentY > 80 && !mouseInsideHeader.current && visibility) {\r\n        if (timeoutRef.current) clearTimeout(timeoutRef.current);\r\n        timeoutRef.current = setTimeout(() => {\r\n          setVisibility(false);\r\n          onVisibilityChange && onVisibilityChange(false);\r\n          timeoutRef.current = null;\r\n        }, 1000);\r\n      }\r\n      lastMouseY.current = currentY;\r\n    };\r\n    \r\n    const handleHeaderMouseEnter = () => {\r\n      mouseInsideHeader.current = true;\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n        timeoutRef.current = null;\r\n      }\r\n    };\r\n    const handleHeaderMouseLeave = () => {\r\n      mouseInsideHeader.current = false;\r\n    };\r\n    \r\n    document.addEventListener('mousemove', handleMouseMove);\r\n    const headerElement = headerRef.current;\r\n    if (headerElement) {\r\n      headerElement.addEventListener('mouseenter', handleHeaderMouseEnter);\r\n      headerElement.addEventListener('mouseleave', handleHeaderMouseLeave);\r\n    }\r\n    return () => {\r\n      document.removeEventListener('mousemove', handleMouseMove);\r\n      if (headerElement) {\r\n        headerElement.removeEventListener('mouseenter', handleHeaderMouseEnter);\r\n        headerElement.removeEventListener('mouseleave', handleHeaderMouseLeave);\r\n      }\r\n      if (timeoutRef.current) clearTimeout(timeoutRef.current);\r\n    };\r\n  }, [autoHide, visibility, onVisibilityChange]);\r\n  \r\n  useEffect(() => {\r\n    if (!autoHide) return;\r\n    const handleClick = () => {\r\n      if (!visibility) {\r\n        setVisibility(true);\r\n        onVisibilityChange && onVisibilityChange(true);\r\n      }\r\n    };\r\n    document.addEventListener('click', handleClick);\r\n    return () => {\r\n      document.removeEventListener('click', handleClick);\r\n    };\r\n  }, [autoHide, visibility, onVisibilityChange]);\r\n\r\n  return (\r\n    <div \r\n      ref={headerRef}\r\n      className={`${styles.header} ${!visibility ? styles.hidden : ''} ${theme === 'dark' ? styles.darkMode : ''}`}\r\n      aria-hidden={!visibility}\r\n    >\r\n      <div className={styles.titleBar}>\r\n        <div className={styles.appIcon}>\r\n          <Image \r\n            src=\"/app-icon.png\" \r\n            alt=\"App Icon\"\r\n            width={24}\r\n            height={24}\r\n            onError={(e) => {\r\n              (e.target as HTMLImageElement).style.display = 'none';\r\n            }}\r\n          />\r\n        </div>\r\n        <div className={styles.appTitle}>타이핑 통계 앱</div>\r\n        <WindowControls api={api} />\r\n      </div>\r\n    </div>\r\n  );\r\n});","import React from 'react';\r\n\r\nexport function AppFooter() {\r\n  const year = new Date().getFullYear();\r\n\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"copyright\">\r\n        © {year} loop. All rights reserved.\r\n      </div>\r\n    </footer>\r\n  );\r\n}","import React, { memo, useRef, ReactNode } from 'react';\r\nimport { AppHeader } from './AppHeader';\r\nimport { AppFooter } from './AppFooter';\r\nimport styles from '../page.module.css';\r\n\r\ninterface MainLayoutProps {\r\n  children: ReactNode;\r\n  darkMode: boolean;\r\n  windowMode: string;\r\n  electronAPI: ElectronAPI | null;\r\n  isHeaderVisible?: boolean;\r\n}\r\n\r\nexport const MainLayout = memo(function MainLayout({ \r\n  children,\r\n  darkMode,\r\n  windowMode,\r\n  electronAPI,\r\n  isHeaderVisible = true\r\n}: MainLayoutProps) {\r\n  const headerDetectionRef = useRef<HTMLDivElement>(null);\r\n\r\n  return (\r\n    <div \r\n      className={`${styles.container} ${darkMode ? 'dark-mode' : ''} ${windowMode === 'fullscreen-auto-hide' ? styles.zenMode : ''}`}\r\n      style={{ position: 'relative', zIndex: 1 }}\r\n    >\r\n      {/* AppHeader 컴포넌트 추가 */}\r\n      <AppHeader api={electronAPI} />\r\n      \r\n      {/* 자동 숨김 모드일 때 감지 영역 추가 */}\r\n      {windowMode === 'fullscreen-auto-hide' && (\r\n        <div \r\n          ref={headerDetectionRef}\r\n          className={styles.headerDetectionArea}\r\n          aria-hidden=\"true\"\r\n          style={{ pointerEvents: 'auto' }} \r\n        />\r\n      )}\r\n      \r\n      <main className={styles.mainContent}>\r\n        {children}\r\n      </main>\r\n      \r\n      <AppFooter />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MainLayout;\r\n","import React, { memo } from 'react';\r\nimport styles from '../page.module.css';\r\n\r\ninterface DebugPanelProps {\r\n  isVisible: boolean;\r\n  stats: {\r\n    keyCount: number;\r\n    windowTitle: string;\r\n    browserName: string;\r\n  };\r\n  logsCount: number;\r\n  isTracking: boolean;\r\n  windowMode: string;\r\n}\r\n\r\nexport const DebugPanel = memo(function DebugPanel({\r\n  isVisible,\r\n  stats,\r\n  logsCount,\r\n  isTracking,\r\n  windowMode\r\n}: DebugPanelProps) {\r\n  if (!isVisible) return null;\r\n  \r\n  return (\r\n    <div className={styles.debugPanelBottom}>\r\n      <h3>디버그 정보</h3>\r\n      <div className={styles.debugInfo}>\r\n        <div><strong>isTracking:</strong> {isTracking ? 'true' : 'false'}</div>\r\n        <div><strong>Logs:</strong> {logsCount}개</div>\r\n        <div><strong>Current keyCount:</strong> {stats.keyCount}</div>\r\n        <div><strong>Browser:</strong> {stats.browserName || 'N/A'}</div>\r\n        <div><strong>Window:</strong> {stats.windowTitle || 'N/A'}</div>\r\n        <div><strong>Window Mode:</strong> {windowMode}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default DebugPanel;\r\n","'use client';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport styles from './ConfirmDialog.module.css';\r\n\r\ninterface ConfirmDialogProps {\r\n  title: string;\r\n  message: string;\r\n  isOpen: boolean;\r\n  onConfirm: () => void;\r\n  onCancel: () => void;\r\n  confirmText?: string;\r\n  cancelText?: string;\r\n  type?: 'info' | 'warning' | 'error' | 'success';\r\n  isDarkMode?: boolean;\r\n}\r\n\r\nexport const ConfirmDialog: React.FC<ConfirmDialogProps> = ({\r\n  title,\r\n  message,\r\n  isOpen,\r\n  onConfirm,\r\n  onCancel,\r\n  confirmText = '확인',\r\n  cancelText = '취소',\r\n  type = 'info',\r\n  isDarkMode = false\r\n}) => {\r\n  // ESC 키 누를 때 닫기\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape' && isOpen) {\r\n        onCancel();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [isOpen, onCancel]);\r\n  \r\n  // Enter 키로 확인 처리\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      if (e.key === 'Enter' && isOpen) {\r\n        onConfirm();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [isOpen, onConfirm]);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className={`${styles.overlay} ${isDarkMode ? styles.darkMode : ''}`}>\r\n      <div className={styles.dialog}>\r\n        <div className={`${styles.header} ${styles[type]}`}>\r\n          <h2>{title}</h2>\r\n          <button \r\n            className={styles.closeButton} \r\n            onClick={onCancel}\r\n            aria-label=\"닫기\"\r\n          >\r\n            ×\r\n          </button>\r\n        </div>\r\n        <div className={styles.content}>\r\n          <p className={styles.message}>{message}</p>\r\n        </div>\r\n        <div className={styles.actions}>\r\n          <button\r\n            className={`${styles.button} ${styles.cancelButton}`}\r\n            onClick={onCancel}\r\n          >\r\n            {cancelText}\r\n          </button>\r\n          <button\r\n            className={`${styles.button} ${styles.confirmButton} ${styles[type + 'Button']}`}\r\n            onClick={onConfirm}\r\n            autoFocus\r\n          >\r\n            {confirmText}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfirmDialog;\r\n","'use client';\r\n\r\nimport React from 'react';\r\nimport ConfirmDialog from './ConfirmDialog';\r\n\r\ninterface SaveConfirmDialogProps {\r\n  isOpen: boolean;\r\n  onConfirm: () => void;\r\n  onCancel: () => void;\r\n  settingsType?: string;\r\n  isDarkMode?: boolean;\r\n}\r\n\r\n/**\r\n * 설정 저장 확인 대화상자\r\n */\r\nconst SaveConfirmDialog: React.FC<SaveConfirmDialogProps> = ({\r\n  isOpen,\r\n  onConfirm,\r\n  onCancel,\r\n  settingsType = '설정',\r\n  isDarkMode = false\r\n}) => {\r\n  const title = `${settingsType} 저장`;\r\n  const message = `변경된 ${settingsType}을(를) 저장하시겠습니까?`;\r\n\r\n  return (\r\n    <ConfirmDialog\r\n      title={title}\r\n      message={message}\r\n      isOpen={isOpen}\r\n      onConfirm={onConfirm}\r\n      onCancel={onCancel}\r\n      confirmText=\"저장\"\r\n      cancelText=\"취소\"\r\n      type=\"info\"\r\n      isDarkMode={isDarkMode}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SaveConfirmDialog;\r\n","import { useState, useEffect, useCallback } from 'react';\r\nimport styles from './Settings.module.css';\r\nimport { useToast } from './ToastContext';\r\nimport SaveConfirmDialog from './dialogs/SaveConfirmDialog';\r\n\r\ninterface EnabledCategories {\r\n  docs: boolean;\r\n  office: boolean;\r\n  coding: boolean;\r\n  sns: boolean;\r\n}\r\n\r\ntype WindowModeType = 'windowed' | 'fullscreen' | 'fullscreen-auto-hide';\r\n\r\nexport interface SettingsState {\r\n  enabledCategories: EnabledCategories;\r\n  autoStartMonitoring: boolean;\r\n  darkMode: boolean;\r\n  windowMode: WindowModeType;\r\n  // 트레이 관련 설정 추가\r\n  minimizeToTray: boolean;\r\n  showTrayNotifications: boolean;\r\n  reduceMemoryInBackground: boolean;\r\n  // 미니뷰 설정 추가\r\n  enableMiniView: boolean;\r\n  // GPU 가속 관련 설정 추가\r\n  useHardwareAcceleration: boolean;\r\n  processingMode: 'auto' | 'normal' | 'cpu-intensive' | 'gpu-intensive';\r\n  maxMemoryThreshold: number;\r\n  // 유휴 상태 관련 설정 추가\r\n  resumeAfterIdle: boolean;\r\n}\r\n\r\ninterface SettingsProps {\r\n  onSave: (settings: SettingsState) => void;\r\n  initialSettings: SettingsState;\r\n  darkMode: boolean;\r\n  onDarkModeChange: (enabled: boolean) => void;\r\n  onWindowModeChange: (mode: WindowModeType) => void;\r\n}\r\n\r\nexport function Settings({ \r\n  onSave, \r\n  initialSettings, \r\n  darkMode, \r\n  onDarkModeChange, \r\n  onWindowModeChange \r\n}: SettingsProps) {\r\n  const [settings, setSettings] = useState<SettingsState>({\r\n    enabledCategories: {\r\n      docs: true,\r\n      office: true,\r\n      coding: true,\r\n      sns: true\r\n    },\r\n    autoStartMonitoring: true,\r\n    darkMode: false,\r\n    windowMode: 'windowed',\r\n    minimizeToTray: true,\r\n    showTrayNotifications: true,\r\n    reduceMemoryInBackground: true,\r\n    enableMiniView: true, // 미니뷰 기본값 true\r\n    // 수정: 타입 오류 해결을 위해 옵셔널 체이닝과 nullish 병합 연산자 수정\r\n    useHardwareAcceleration: initialSettings && 'useHardwareAcceleration' in initialSettings \r\n      ? initialSettings.useHardwareAcceleration \r\n      : false,\r\n    processingMode: initialSettings && 'processingMode' in initialSettings \r\n      ? initialSettings.processingMode \r\n      : 'auto',\r\n    maxMemoryThreshold: initialSettings && 'maxMemoryThreshold' in initialSettings \r\n      ? initialSettings.maxMemoryThreshold \r\n      : 100,\r\n    // resumeAfterIdle 속성 추가\r\n    resumeAfterIdle: initialSettings && 'resumeAfterIdle' in initialSettings\r\n      ? initialSettings.resumeAfterIdle\r\n      : true\r\n  });\r\n  const [needsRestart, setNeedsRestart] = useState(false);\r\n  const [showSaveConfirm, setShowSaveConfirm] = useState(false);\r\n  const { showToast } = useToast();\r\n\r\n  // 재시작 API 디버깅 상태 추가\r\n  const [apiDebugInfo, setApiDebugInfo] = useState<string>('');\r\n  const [showDebugInfo, setShowDebugInfo] = useState<boolean>(false);\r\n\r\n  // 초기 설정 변경 시 state 업데이트\r\n  useEffect(() => {\r\n    if (initialSettings) {\r\n      setSettings(initialSettings);\r\n    }\r\n  }, [initialSettings]);\r\n\r\n  // 다크 모드 처리를 위한 효과 추가\r\n  useEffect(() => {\r\n    // 다크 모드 클래스가 서버 렌더링과 클라이언트 간에 일치하도록 함\r\n    if (typeof window !== 'undefined') {\r\n      const isDarkMode = settings.darkMode;\r\n      if (isDarkMode) {\r\n        document.documentElement.classList.add('dark-mode');\r\n      } else {\r\n        document.documentElement.classList.remove('dark-mode');\r\n      }\r\n    }\r\n  }, [settings.darkMode]);\r\n\r\n  // Handler functions\r\n  const handleCategoryToggle = (category: keyof typeof settings.enabledCategories) => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      enabledCategories: {\r\n        ...prev.enabledCategories,\r\n        [category]: !prev.enabledCategories[category]\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleAutoStartToggle = () => {\r\n    setSettings(prev => ({\r\n      ...prev, \r\n      autoStartMonitoring: !prev.autoStartMonitoring\r\n    }));\r\n  };\r\n\r\n  const handleDarkModeToggle = () => {\r\n    const newDarkMode = !settings.darkMode;\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      darkMode: newDarkMode\r\n    }));\r\n    onDarkModeChange(newDarkMode);\r\n  };\r\n\r\n  const handleWindowModeChange = (mode: WindowModeType) => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      windowMode: mode\r\n    }));\r\n    onWindowModeChange(mode);\r\n  };\r\n\r\n  // 트레이 관련 핸들러 추가\r\n  const handleMinimizeToTrayToggle = () => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      minimizeToTray: !prev.minimizeToTray\r\n    }));\r\n  };\r\n  \r\n  const handleShowTrayNotificationsToggle = () => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      showTrayNotifications: !prev.showTrayNotifications\r\n    }));\r\n  };\r\n  \r\n  const handleReduceMemoryToggle = () => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      reduceMemoryInBackground: !prev.reduceMemoryInBackground\r\n    }));\r\n  };\r\n\r\n  // 미니뷰 토글 핸들러 추가\r\n  const handleMiniViewToggle = () => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      enableMiniView: !prev.enableMiniView\r\n    }));\r\n  };\r\n\r\n  const handleSettingChange = (key: keyof SettingsState, value: any) => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      [key]: value\r\n    }));\r\n  };\r\n\r\n  // GPU 가속 설정 변경 감지 함수 추가\r\n  const handleHardwareAccelerationToggle = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newValue = e.target.checked;\r\n    // 이전 값과 다른 경우에만 재시작 필요 플래그 설정\r\n    if (newValue !== initialSettings.useHardwareAcceleration) {\r\n      setNeedsRestart(true);\r\n    }\r\n    handleSettingChange('useHardwareAcceleration', newValue);\r\n  };\r\n\r\n  const handleSaveSettings = () => {\r\n    // 변경 사항이 있을 때만 저장 확인 대화상자 표시\r\n    const hasChanges = JSON.stringify(settings) !== JSON.stringify(initialSettings);\r\n    \r\n    if (hasChanges) {\r\n      setShowSaveConfirm(true);\r\n    } else {\r\n      showToast('변경된 설정이 없습니다.', 'info');\r\n    }\r\n  };\r\n  \r\n  const confirmSaveSettings = () => {\r\n    setShowSaveConfirm(false);\r\n    \r\n    // 설정 저장 실행\r\n    onSave(settings);\r\n    \r\n    if (needsRestart) {\r\n      // 재시작이 필요한 경우 특별 메시지 표시\r\n      showToast('GPU 가속 설정이 변경되었습니다. 변경 사항을 적용하려면 앱을 재시작하세요.', 'info');\r\n      \r\n      // 재시작 확인 대화상자 표시\r\n      if (window.electronAPI) {\r\n        if (typeof window.electronAPI.showRestartPrompt === 'function') {\r\n          window.electronAPI.showRestartPrompt();\r\n        } else {\r\n          // 대체 방법: 재시작 여부 확인 후 재시작 요청\r\n          if (window.confirm('GPU 가속 설정이 변경되었습니다. 지금 앱을 재시작하시겠습니까?')) {\r\n            if (typeof window.electronAPI.restartApp === 'function') {\r\n              window.electronAPI.restartApp();\r\n            } else {\r\n              console.error('restartApp 함수를 찾을 수 없습니다.');\r\n              showToast('앱을 수동으로 재시작해 주세요.', 'warning');\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      showToast('설정이 저장되었습니다.', 'success');\r\n    }\r\n  };\r\n  \r\n  const cancelSaveSettings = () => {\r\n    setShowSaveConfirm(false);\r\n  };\r\n\r\n  // 재시작 버튼 클릭 핸들러 수정 - 실무적인 방식으로 개선\r\n  const handleRestartClick = useCallback(() => {\r\n    try {\r\n      // API 객체가 정의되어 있는지 먼저 확인\r\n      if (!window.electronAPI) {\r\n        showToast('Electron API를 찾을 수 없습니다. preload 스크립트가 올바르게 로드되었는지 확인하세요.', 'error');\r\n        return;\r\n      }\r\n\r\n      // API 정보 수집 (디버깅용)\r\n      const apiInfo = Object.keys(window.electronAPI)\r\n        .map(key => `${key}: ${typeof (window.electronAPI as any)[key]}`)\r\n        .join('\\n');\r\n      \r\n      console.log('사용 가능한 API 목록:', apiInfo);\r\n      setApiDebugInfo(apiInfo);\r\n      \r\n      // 앱 재시작 요청 전송 시도\r\n      if (typeof window.electronAPI.restartApp === 'function') {\r\n        window.electronAPI.restartApp();\r\n        return;\r\n      } \r\n      \r\n      // 첫 번째 방식이 실패한 경우 재시작 안내 창 사용 시도\r\n      if (typeof window.electronAPI.showRestartPrompt === 'function') {\r\n        window.electronAPI.showRestartPrompt();\r\n        return;\r\n      }\r\n      \r\n      // 두 방법 모두 실패했을 경우 일반 IPC 직접 호출 시도\r\n      if (window.electron && typeof window.electron.restartApp === 'function') {\r\n        window.electron.restartApp();\r\n        return;\r\n      }\r\n      \r\n      // 모든 방법이 실패한 경우 오류 메시지 표시\r\n      showToast('재시작 기능을 사용할 수 없습니다. 앱을 수동으로 재시작하세요.', 'warning');\r\n      setShowDebugInfo(true);\r\n      \r\n    } catch (error) {\r\n      console.error('앱 재시작 시도 중 오류:', error);\r\n      showToast(`재시작 중 오류: ${(error as Error).message}`, 'error');\r\n      setApiDebugInfo(String(error));\r\n      setShowDebugInfo(true);\r\n    }\r\n  }, [showToast]);\r\n\r\n  // API 디버그 정보 표시 함수 추가\r\n  const toggleDebugInfo = () => {\r\n    // API 정보 새로고침\r\n    if (window.electronAPI) {\r\n      const apiInfo = Object.keys(window.electronAPI)\r\n        .map(key => {\r\n          const type = typeof (window.electronAPI as any)[key];\r\n          return `${key}: ${type}`;\r\n        })\r\n        .join('\\n');\r\n        \r\n      setApiDebugInfo(apiInfo);\r\n    } else {\r\n      setApiDebugInfo('electronAPI가 정의되지 않았습니다');\r\n    }\r\n    \r\n    setShowDebugInfo(!showDebugInfo);\r\n  };\r\n\r\n  return (\r\n    <div className={`${styles.settingsContainer} ${darkMode ? styles.darkMode : ''}`}>\r\n      <h2>설정</h2>\r\n      \r\n      {/* 자동 모니터링 설정 섹션 (새로 추가) */}\r\n      <div className={`${styles.settingSection} ${styles.highlightedSetting}`}>\r\n        <h3>모니터링 자동 시작</h3>\r\n        <div className={styles.toggleItem}>\r\n          <label>\r\n            <input \r\n              type=\"checkbox\" \r\n              checked={settings.autoStartMonitoring} \r\n              onChange={handleAutoStartToggle}\r\n            />\r\n            <span className={styles.toggleLabel}>앱 시작 시 자동으로 모니터링 시작</span>\r\n          </label>\r\n        </div>\r\n        \r\n        <div className={styles.toggleItem}>\r\n          <label>\r\n            <input \r\n              type=\"checkbox\" \r\n              checked={settings.resumeAfterIdle || false} \r\n              onChange={(e) => handleSettingChange('resumeAfterIdle', e.target.checked)}\r\n            />\r\n            <span className={styles.toggleLabel}>일정 시간 사용하지 않다가 돌아왔을 때 자동 재시작</span>\r\n          </label>\r\n        </div>\r\n        \r\n        <div className={styles.settingDescription}>\r\n          자동 모니터링 설정을 통해 앱 시작 시 또는 일정 시간 사용하지 않다가 돌아왔을 때 \r\n          자동으로 타이핑 모니터링을 시작할 수 있습니다.\r\n        </div>\r\n      </div>\r\n      \r\n      <div className={`${styles.settingSection}`}>\r\n        <h3>일반 설정</h3>\r\n        <div className={styles.toggleItem}>\r\n          <label>\r\n            <input \r\n              type=\"checkbox\" \r\n              checked={settings.darkMode} \r\n              onChange={handleDarkModeToggle}\r\n            />\r\n            <span className={styles.toggleLabel}>다크 모드</span>\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={styles.settingSection}>\r\n        <h3>화면 모드</h3>\r\n        <div className={styles.radioGroup}>\r\n          <label className={styles.radioLabel}>\r\n            <input \r\n              type=\"radio\" \r\n              name=\"windowMode\" \r\n              checked={settings.windowMode === 'windowed'} \r\n              onChange={() => handleWindowModeChange('windowed')}\r\n            />\r\n            <span className={styles.radioText}>창 모드</span>\r\n          </label>\r\n          \r\n          <label className={styles.radioLabel}>\r\n            <input \r\n              type=\"radio\" \r\n              name=\"windowMode\" \r\n              checked={settings.windowMode === 'fullscreen'} \r\n              onChange={() => handleWindowModeChange('fullscreen')}\r\n            />\r\n            <span className={styles.radioText}>전체화면 모드</span>\r\n          </label>\r\n\r\n          <label className={styles.radioLabel}>\r\n            <input\r\n              type=\"radio\"\r\n              name=\"windowMode\"\r\n              value=\"fullscreen-auto-hide\"\r\n              checked={settings.windowMode === 'fullscreen-auto-hide'}\r\n              onChange={() => handleWindowModeChange('fullscreen-auto-hide')}\r\n            />\r\n            <span className={styles.radioText}>자동 숨김 모드</span>\r\n          </label>\r\n        </div>\r\n        \r\n        <p className={styles.settingDescription}>\r\n          자동 숨김 모드에서는 마우스를 화면 상단에 가져가면 도구모음이 자동으로 표시됩니다.\r\n        </p>\r\n      </div>\r\n      \r\n      <div className={styles.settingSection}>\r\n        <h3>모니터링 대상 카테고리</h3>\r\n        <div className={styles.categoryToggles}>\r\n          <div className={styles.toggleItem}>\r\n            <label>\r\n              <input \r\n                type=\"checkbox\" \r\n                checked={settings.enabledCategories.docs} \r\n                onChange={() => handleCategoryToggle('docs')}\r\n              />\r\n              <span className={styles.toggleLabel}>문서 작업 (Notion, Google Docs 등)</span>\r\n            </label>\r\n          </div>\r\n\r\n          <div className={styles.toggleItem}>\r\n            <label>\r\n              <input \r\n                type=\"checkbox\" \r\n                checked={settings.enabledCategories.office} \r\n                onChange={() => handleCategoryToggle('office')}\r\n              />\r\n              <span className={styles.toggleLabel}>오피스 웹앱 (Microsoft Office, 한컴오피스 등)</span>\r\n            </label>\r\n          </div>\r\n\r\n          <div className={styles.toggleItem}>\r\n            <label>\r\n              <input \r\n                type=\"checkbox\" \r\n                checked={settings.enabledCategories.coding} \r\n                onChange={() => handleCategoryToggle('coding')}\r\n              />\r\n              <span className={styles.toggleLabel}>코딩 관련 (GitHub, GitLab 등)</span>\r\n            </label>\r\n          </div>\r\n\r\n          <div className={styles.toggleItem}>\r\n            <label>\r\n              <input \r\n                type=\"checkbox\" \r\n                checked={settings.enabledCategories.sns} \r\n                onChange={() => handleCategoryToggle('sns')}\r\n              />\r\n              <span className={styles.toggleLabel}>SNS/메신저 (Discord, Slack 등)</span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 시스템 트레이 설정 섹션 */}\r\n      <div className={styles.settingSection}>\r\n        <h3>시스템 트레이 설정</h3>\r\n        <div className={styles.toggleItem}>\r\n          <label>\r\n            <input \r\n              type=\"checkbox\" \r\n              checked={settings.minimizeToTray} \r\n              onChange={handleMinimizeToTrayToggle}\r\n            />\r\n            <span className={styles.toggleLabel}>창 닫기 시 트레이로 최소화 (백그라운드 실행)</span>\r\n          </label>\r\n        </div>\r\n        \r\n        <div className={styles.toggleItem}>\r\n          <label>\r\n            <input \r\n              type=\"checkbox\" \r\n              checked={settings.showTrayNotifications} \r\n              onChange={handleShowTrayNotificationsToggle}\r\n              disabled={!settings.minimizeToTray}\r\n            />\r\n            <span className={styles.toggleLabel}>\r\n              트레이 알림 표시\r\n              {!settings.minimizeToTray && (\r\n                <small className={styles.disabledNote}> (트레이로 최소화 옵션이 활성화되어야 함)</small>\r\n              )}\r\n            </span>\r\n          </label>\r\n        </div>\r\n        \r\n        <div className={styles.toggleItem}>\r\n          <label>\r\n            <input \r\n              type=\"checkbox\" \r\n              checked={settings.reduceMemoryInBackground} \r\n              onChange={handleReduceMemoryToggle}\r\n              disabled={!settings.minimizeToTray}\r\n            />\r\n            <span className={styles.toggleLabel}>\r\n              백그라운드에서 메모리 사용 최적화\r\n              {!settings.minimizeToTray && (\r\n                <small className={styles.disabledNote}> (트레이로 최소화 옵션이 활성화되어야 함)</small>\r\n              )}\r\n            </span>\r\n          </label>\r\n        </div>\r\n        \r\n        {/* 미니뷰 설정 추가 */}\r\n        <div className={styles.toggleItem}>\r\n          <label>\r\n            <input \r\n              type=\"checkbox\" \r\n              checked={settings.enableMiniView} \r\n              onChange={handleMiniViewToggle}\r\n              disabled={!settings.minimizeToTray}\r\n            />\r\n            <span className={styles.toggleLabel}>\r\n              트레이 아이콘 클릭 시 미니뷰(PiP) 표시\r\n              {!settings.minimizeToTray && (\r\n                <small className={styles.disabledNote}> (트레이로 최소화 옵션이 활성화되어야 함)</small>\r\n              )}\r\n            </span>\r\n          </label>\r\n        </div>\r\n        \r\n        <p className={styles.settingDescription}>\r\n          트레이로 최소화 기능을 사용하면 창을 닫아도 앱이 백그라운드에서 계속 실행되어 타이핑을 모니터링합니다.\r\n          메모리 사용 최적화 옵션은 백그라운드 실행 시 RAM 사용량을 줄여줍니다.\r\n        </p>\r\n        \r\n        <p className={styles.settingDescription}>\r\n          미니뷰를 활성화하면 트레이 아이콘을 클릭할 때 화면 상단에 작은 통계 창이 표시됩니다.\r\n          이를 통해 앱을 최소화한 상태에서도 중요한 타이핑 통계를 확인할 수 있습니다.\r\n        </p>\r\n      </div>\r\n\r\n      {/* 성능 섹션 */}\r\n      <div className={styles.settingSection}>\r\n        <h3>성능 설정</h3>\r\n        \r\n        <div className={styles.toggleItem}>\r\n          <label>\r\n            <input \r\n              type=\"checkbox\" \r\n              checked={settings.useHardwareAcceleration} \r\n              onChange={handleHardwareAccelerationToggle}\r\n            />\r\n            <span className={styles.toggleLabel}>\r\n              GPU 하드웨어 가속 사용 (재시작 필요)\r\n            </span>\r\n          </label>\r\n          <p className={styles.settingDescription}>\r\n            GPU 하드웨어 가속을 활성화하면 그래픽 렌더링과 일부 계산이 더 빨라질 수 있지만,\r\n            일부 시스템에서는 불안정할 수 있습니다. 변경 후 앱 재시작이 필요합니다.\r\n          </p>\r\n          {needsRestart && (\r\n            <div className={styles.restartNotice}>\r\n              <p>GPU 가속 설정이 변경되었습니다. 변경 사항을 적용하려면 앱을 재시작해야 합니다.</p>\r\n              <div className={styles.buttonGroup}>\r\n                <button \r\n                  className={styles.restartButton}\r\n                  onClick={handleRestartClick}\r\n                >\r\n                  지금 재시작\r\n                </button>\r\n                <button \r\n                  className={styles.debugButton}\r\n                  onClick={toggleDebugInfo}\r\n                >\r\n                  API 디버그 정보\r\n                </button>\r\n              </div>\r\n              \r\n              {/* 디버그 정보 표시 영역 */}\r\n              {showDebugInfo && (\r\n                <div className={styles.debugInfo}>\r\n                  <h4>API 디버그 정보</h4>\r\n                  <pre>{apiDebugInfo || '정보 없음'}</pre>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div className={styles.toggleItem}>\r\n          <label className={styles.selectLabel}>처리 모드:</label>\r\n          <select \r\n            className={styles.selectControl}\r\n            value={settings.processingMode || 'auto'} \r\n            onChange={(e) => handleSettingChange('processingMode', e.target.value)}\r\n          >\r\n            <option value=\"auto\">자동 (리소스에 따라 결정)</option>\r\n            <option value=\"normal\">일반 모드</option>\r\n            <option value=\"cpu-intensive\">CPU 집약적 모드 (메모리 최적화)</option>\r\n            <option value=\"gpu-intensive\">GPU 가속 모드 (실험적)</option>\r\n          </select>\r\n        </div>\r\n        <p className={styles.settingDescription}>\r\n          처리 모드에 따라 타이핑 통계 계산 방식이 달라집니다. 자동 모드는 시스템 리소스에 따라\r\n          최적의 모드를 선택합니다. CPU 집약적 모드는 메모리 사용을 줄이고, GPU 가속 모드는\r\n          GPU를 활용하여 계산 속도를 높입니다.\r\n        </p>\r\n        \r\n        <div className={styles.toggleItem}>\r\n          <label className={styles.selectLabel}>메모리 임계치 (MB):</label>\r\n          <input \r\n            type=\"number\" \r\n            className={styles.numberInput}\r\n            value={settings.maxMemoryThreshold || 100} \r\n            onChange={(e) => handleSettingChange('maxMemoryThreshold', parseInt(e.target.value))}\r\n            min={50}\r\n            max={500}\r\n          />\r\n        </div>\r\n        <p className={styles.settingDescription}>\r\n          메모리 사용량이 이 임계치를 초과하면 메모리 최적화 모드로 전환됩니다.\r\n          값이 높을수록 더 많은 메모리를 사용하지만 성능이 향상될 수 있습니다.\r\n        </p>\r\n      </div>\r\n\r\n      <div className={styles.buttonRow}>\r\n        <button \r\n          className={styles.saveButton}\r\n          onClick={handleSaveSettings}\r\n        >\r\n          설정 저장\r\n        </button>\r\n      </div>\r\n      \r\n      {/* 설정 저장 확인 대화상자 */}\r\n      <SaveConfirmDialog \r\n        isOpen={showSaveConfirm}\r\n        onConfirm={confirmSaveSettings}\r\n        onCancel={cancelSaveSettings}\r\n        isDarkMode={darkMode}\r\n      />\r\n    </div>\r\n  );\r\n}","'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport styles from './RestartLoading.module.css';\r\n\r\ninterface RestartLoadingProps {\r\n  message?: string;\r\n  isVisible: boolean;\r\n  onClose?: () => void;\r\n}\r\n\r\nexport default function RestartLoading({ \r\n  message = '앱을 재시작하는 중입니다...',\r\n  isVisible,\r\n  onClose\r\n}: RestartLoadingProps) {\r\n  const [dots, setDots] = useState('');\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  // 로딩 애니메이션 효과\r\n  useEffect(() => {\r\n    if (!isVisible) return;\r\n    \r\n    // 진행 점 애니메이션\r\n    const dotsInterval = setInterval(() => {\r\n      setDots(prev => {\r\n        if (prev.length >= 3) return '';\r\n        return prev + '.';\r\n      });\r\n    }, 500);\r\n    \r\n    // 진행 표시줄 애니메이션\r\n    const progressInterval = setInterval(() => {\r\n      setProgress(prev => {\r\n        if (prev >= 100) return 100;\r\n        return prev + 5;\r\n      });\r\n    }, 100);\r\n    \r\n    return () => {\r\n      clearInterval(dotsInterval);\r\n      clearInterval(progressInterval);\r\n    };\r\n  }, [isVisible]);\r\n\r\n  if (!isVisible) return null;\r\n\r\n  return (\r\n    <div className={styles.overlay}>\r\n      <div className={styles.loadingContainer}>\r\n        <div className={styles.spinner}></div>\r\n        <h3 className={styles.title}>{message}{dots}</h3>\r\n        \r\n        <div className={styles.progressContainer}>\r\n          <div \r\n            className={styles.progressBar}\r\n            style={{ width: `${progress}%` }}\r\n          ></div>\r\n        </div>\r\n        \r\n        <p className={styles.note}>앱이 곧 다시 시작됩니다.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect, useMemo } from 'react';\r\n\r\n// 더미 일렉트론 API 생성 함수\r\nconst createDummyElectronAPI = (): ElectronAPI => ({\r\n  onTypingStatsUpdate: () => () => {},\r\n  onStatsSaved: () => () => {},\r\n  startTracking: () => console.log('개발용 startTracking 호출'),\r\n  stopTracking: () => console.log('개발용 stopTracking 호출'),\r\n  saveStats: () => console.log('개발용 saveStats 호출'),\r\n  getCurrentBrowserInfo: () => Promise.resolve({ name: null, isGoogleDocs: false, title: null }),\r\n  getDebugInfo: () => Promise.resolve({\r\n    isTracking: false,\r\n    currentStats: {\r\n      keyCount: 0,\r\n      typingTime: 0,\r\n      startTime: null,\r\n      lastActiveTime: null,\r\n      currentWindow: null,\r\n      currentBrowser: null,\r\n      totalChars: 0,\r\n      totalWords: 0,\r\n      totalCharsNoSpace: 0,\r\n      pages: 0,\r\n      accuracy: 100\r\n    },\r\n    platform: 'web',\r\n    electronVersion: 'N/A',\r\n    nodeVersion: 'N/A'\r\n  }),\r\n  saveSettings: (settings: SettingsState) => Promise.resolve({ success: true, settings }),\r\n  loadSettings: () => Promise.resolve({\r\n    enabledCategories: { docs: true, office: true, coding: true, sns: true },\r\n    autoStartMonitoring: true,\r\n    darkMode: false,\r\n    windowMode: 'windowed',\r\n    minimizeToTray: true,\r\n    showTrayNotifications: true,\r\n    reduceMemoryInBackground: true,\r\n    enableMiniView: true,\r\n    // 누락된 필수 속성 추가\r\n    useHardwareAcceleration: false,\r\n    processingMode: 'auto',\r\n    maxMemoryThreshold: 100,\r\n    // resumeAfterIdle 속성 추가\r\n    resumeAfterIdle: true\r\n  }),\r\n  setDarkMode: () => Promise.resolve({ success: true }),\r\n  setWindowMode: () => Promise.resolve({ success: true }),\r\n  getWindowMode: () => Promise.resolve('windowed' as WindowModeType),\r\n  windowControl: () => {},\r\n  checkAutoStart: () => {},\r\n  onAutoTrackingStarted: () => () => {},\r\n  onSwitchTab: () => () => {},\r\n  onOpenSaveStatsDialog: () => () => {},\r\n  requestStatsUpdate: () => {},\r\n  onMiniViewStatsUpdate: () => () => {},\r\n  toggleMiniView: () => {},\r\n  updateTraySettings: () => Promise.resolve({ success: true }),\r\n  quitApp: () => console.log('개발용 quitApp 호출'),\r\n  toggleWindow: () => console.log('개발용 toggleWindow 호출'),\r\n  onBackgroundModeChange: () => () => {},\r\n  onTrayCommand: () => () => {},\r\n  restartApp: () => console.log('개발용 restartApp 호출'),\r\n  // showRestartPrompt 메서드 추가\r\n  showRestartPrompt: () => console.log('개발용 showRestartPrompt 호출'),\r\n  // closeWindow 메서드 추가\r\n  closeWindow: () => console.log('개발용 closeWindow 호출'),\r\n  // getDarkMode 메서드 추가\r\n  getDarkMode: () => Promise.resolve(false)\r\n});\r\n\r\nexport function useElectronApi() {\r\n  const [electronAPI, setElectronAPI] = useState<ElectronAPI | null>(null);\r\n\r\n  // 더미 API - 개발 환경이나 일렉트론 API가 없을 때 사용\r\n  const dummyApi = useMemo(() => createDummyElectronAPI(), []);\r\n\r\n  // 실제 또는 더미 API - 항상 사용 가능한 API 제공\r\n  const api = useMemo(() => electronAPI || dummyApi, [electronAPI, dummyApi]);\r\n\r\n  // window 객체에서 electronAPI 가져오기 (클라이언트 사이드에서만 실행)\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined') {\r\n      if (window.electronAPI) {\r\n        setElectronAPI(window.electronAPI);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return { electronAPI, api };\r\n}\r\n","/**\r\n * 다크 모드 클래스를 전역 요소에 적용하는 함수\r\n */\r\nexport function applyDarkModeToAllElements(isDark: boolean) {\r\n  if (isDark) {\r\n    document.body.classList.add('dark-mode');\r\n    document.documentElement.classList.add('dark-mode');\r\n    \r\n    // 주요 컨테이너에도 클래스 추가\r\n    document.querySelectorAll('.tab-content, .chart-container, .history-table').forEach(el => {\r\n      el.classList.add('dark-mode');\r\n    });\r\n  } else {\r\n    document.body.classList.remove('dark-mode');\r\n    document.documentElement.classList.remove('dark-mode');\r\n    \r\n    // 주요 컨테이너에서도 클래스 제거\r\n    document.querySelectorAll('.tab-content, .chart-container, .history-table').forEach(el => {\r\n      el.classList.remove('dark-mode');\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * 현재 시스템이 다크 모드인지 확인하는 함수\r\n */\r\nexport function isSystemInDarkMode(): boolean {\r\n  if (typeof window === 'undefined') return false;\r\n  return window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n}\r\n","import { useState, useEffect, useCallback } from 'react';\r\nimport { useToast } from '../components/ToastContext';\r\nimport { applyDarkModeToAllElements } from '../utils/darkModeUtils';\r\n\r\n// 기본 설정 값 - GPU 및 처리 모드 추가\r\nconst defaultSettings: SettingsState = {\r\n  enabledCategories: {\r\n    docs: true,\r\n    office: true,\r\n    coding: true,\r\n    sns: true\r\n  },\r\n  autoStartMonitoring: true,\r\n  resumeAfterIdle: true, // 필수 속성으로 추가\r\n  darkMode: false,\r\n  windowMode: 'windowed',\r\n  minimizeToTray: true,\r\n  showTrayNotifications: true,\r\n  reduceMemoryInBackground: true,\r\n  enableMiniView: true,\r\n  useHardwareAcceleration: false, // GPU 하드웨어 가속 기본값 추가\r\n  processingMode: 'auto', // 처리 모드 기본값 추가\r\n  maxMemoryThreshold: 100 // 메모리 임계치 기본값\r\n};\r\n\r\nexport function useSettings(electronAPI: ElectronAPI | null) {\r\n  const [settings, setSettings] = useState<SettingsState>(defaultSettings);\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const [windowMode, setWindowMode] = useState<WindowModeType>('windowed');\r\n  const { showToast } = useToast();\r\n\r\n  // 로컬 스토리지에 설정 저장\r\n  const saveSettingsToLocalStorage = useCallback((settingsToSave: SettingsState) => {\r\n    try {\r\n      localStorage.setItem('app-settings', JSON.stringify(settingsToSave));\r\n    } catch (error) {\r\n      console.error('설정 저장 중 오류:', error);\r\n    }\r\n  }, []);\r\n\r\n  // 로컬 스토리지에서 설정 로드\r\n  const loadSettingsFromLocalStorage = useCallback(() => {\r\n    try {\r\n      const savedSettings = localStorage.getItem('app-settings');\r\n      if (savedSettings) {\r\n        const parsedSettings = JSON.parse(savedSettings) as Partial<SettingsState>;\r\n        \r\n        // 누락된 필드가 있을 경우 기본값 추가\r\n        const completeSettings: SettingsState = {\r\n          enabledCategories: {\r\n            docs: parsedSettings.enabledCategories?.docs ?? true,\r\n            office: parsedSettings.enabledCategories?.office ?? true,\r\n            coding: parsedSettings.enabledCategories?.coding ?? true,\r\n            sns: parsedSettings.enabledCategories?.sns ?? true\r\n          },\r\n          autoStartMonitoring: parsedSettings.autoStartMonitoring ?? true,\r\n          resumeAfterIdle: parsedSettings.resumeAfterIdle ?? true, // 필수 속성으로 추가\r\n          darkMode: parsedSettings.darkMode ?? false,\r\n          windowMode: parsedSettings.windowMode ?? 'windowed',\r\n          minimizeToTray: parsedSettings.minimizeToTray ?? true,\r\n          showTrayNotifications: parsedSettings.showTrayNotifications ?? true,\r\n          reduceMemoryInBackground: parsedSettings.reduceMemoryInBackground ?? true,\r\n          enableMiniView: parsedSettings.enableMiniView ?? true,\r\n          useHardwareAcceleration: parsedSettings.useHardwareAcceleration ?? false, // GPU 가속 설정 추가\r\n          processingMode: parsedSettings.processingMode ?? 'auto', // 처리 모드 설정 추가\r\n          maxMemoryThreshold: parsedSettings.maxMemoryThreshold ?? 100 // 메모리 임계치 추가\r\n        };\r\n        \r\n        setSettings(completeSettings);\r\n        setDarkMode(completeSettings.darkMode);\r\n        return completeSettings;\r\n      }\r\n    } catch (error) {\r\n      console.error('설정 로드 중 오류:', error);\r\n    }\r\n    return null;\r\n  }, []);\r\n\r\n  // 설정 저장 핸들러\r\n  const handleSaveSettings = useCallback(async (newSettings: SettingsState) => {\r\n    setSettings(newSettings);\r\n    saveSettingsToLocalStorage(newSettings);\r\n    setDarkMode(newSettings.darkMode);\r\n    \r\n    // Electron API로 설정 저장\r\n    try {\r\n      if (!electronAPI) return;\r\n      \r\n      const savePromise = electronAPI.saveSettings(newSettings);\r\n      if (savePromise instanceof Promise) {\r\n        const result = await savePromise;\r\n        if (result.success) {\r\n          showToast('설정이 저장되었습니다.', 'success');\r\n        } else {\r\n          showToast('설정 저장에 실패했습니다.', 'error');\r\n        }\r\n      }\r\n      \r\n      // 다크 모드 적용\r\n      if (electronAPI.setDarkMode) {\r\n        await electronAPI.setDarkMode(newSettings.darkMode);\r\n      }\r\n      \r\n      // 창 모드 적용\r\n      if (electronAPI.setWindowMode) {\r\n        await electronAPI.setWindowMode(newSettings.windowMode);\r\n      }\r\n    } catch (error) {\r\n      console.error('Electron 설정 적용 오류:', error);\r\n      showToast('설정 적용 중 오류가 발생했습니다.', 'error');\r\n    }\r\n  }, [saveSettingsToLocalStorage, electronAPI, showToast]);\r\n\r\n  // 다크 모드 변경 핸들러\r\n  const handleDarkModeChange = useCallback((enabled: boolean) => {\r\n    setDarkMode(enabled);\r\n    \r\n    // 전역 요소에 다크 모드 적용\r\n    applyDarkModeToAllElements(enabled);\r\n    \r\n    if (electronAPI) {\r\n      electronAPI.setDarkMode(enabled);\r\n    }\r\n  }, [electronAPI]);\r\n\r\n  // 창 모드 변경 핸들러\r\n  const handleWindowModeChange = useCallback(async (mode: WindowModeType) => {\r\n    try {\r\n      setWindowMode(mode); // UI 즉시 업데이트\r\n      \r\n      if (electronAPI && typeof electronAPI.setWindowMode === 'function') {\r\n        const timeoutPromise = new Promise((_, reject) => {\r\n          setTimeout(() => reject(new Error('창 모드 변경 시간 초과')), 3000);\r\n        });\r\n        \r\n        const result = await Promise.race([\r\n          electronAPI.setWindowMode(mode),\r\n          timeoutPromise\r\n        ]) as {success: boolean, error?: string};\r\n        \r\n        if (!result.success) {\r\n          console.error(`창 모드 변경 실패: ${result.error || '알 수 없는 오류'}`);\r\n          showToast('창 모드 변경에 실패했습니다.', 'error');\r\n        }\r\n      } else {\r\n        console.warn('setWindowMode API를 사용할 수 없습니다. UI만 업데이트됩니다.');\r\n      }\r\n    } catch (error) {\r\n      console.error('창 모드 변경 중 오류:', error);\r\n      showToast('창 모드 변경 중 오류가 발생했습니다.', 'error');\r\n    }\r\n  }, [electronAPI, showToast]);\r\n\r\n  // 초기 설정 로드 및 다크모드 적용\r\n  useEffect(() => {\r\n    loadSettingsFromLocalStorage();\r\n  }, [loadSettingsFromLocalStorage]);\r\n\r\n  // 다크 모드 변경 시 전역 클래스 적용\r\n  useEffect(() => {\r\n    applyDarkModeToAllElements(darkMode);\r\n    \r\n    // 다크 모드 변경 이벤트 발생\r\n    const darkModeEvent = new CustomEvent('darkmode-changed', { detail: { darkMode } });\r\n    window.dispatchEvent(darkModeEvent);\r\n  }, [darkMode]);\r\n\r\n  // 앱이 종료되거나 페이지가 새로고침될 때 설정 저장\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      saveSettingsToLocalStorage(settings);\r\n    };\r\n    \r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n    \r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, [settings, saveSettingsToLocalStorage]);\r\n\r\n  return {\r\n    settings,\r\n    darkMode,\r\n    windowMode,\r\n    handleSaveSettings,\r\n    handleDarkModeChange,\r\n    handleWindowModeChange,\r\n    loadSettingsFromLocalStorage\r\n  };\r\n}\r\n","import { useState, useRef, useCallback, useEffect } from 'react';\r\nimport { useToast } from '../components/ToastContext';\r\n\r\nconst MAX_LOGS_TO_LOAD = 100; // 최대 로그 수 제한\r\n\r\nexport interface TypingStatsState {\r\n  keyCount: number;\r\n  typingTime: number;\r\n  windowTitle: string;\r\n  browserName: string;\r\n  totalChars: number;\r\n  totalCharsNoSpace: number;\r\n  totalWords: number;\r\n  pages: number;\r\n  accuracy: number;\r\n}\r\n\r\nexport function useTypingStats(electronAPI: ElectronAPI | null) {\r\n  // API에서 가져온 로그 데이터\r\n  const [logs, setLogs] = useState<LogEntry[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isTracking, setIsTracking] = useState(false);\r\n  \r\n  // 메모리 관리를 위한 ref 사용\r\n  const eventsCleanupRef = useRef<(() => void)[]>([]);\r\n  const intervalsRef = useRef<NodeJS.Timeout[]>([]);\r\n  \r\n  // 현재 통계 상태 - useRef로 관리하여 불필요한 렌더링 방지\r\n  const currentStatsRef = useRef<TypingStatsState>({\r\n    keyCount: 0,\r\n    typingTime: 0,\r\n    windowTitle: '',\r\n    browserName: '',\r\n    totalChars: 0,\r\n    totalCharsNoSpace: 0,\r\n    totalWords: 0,\r\n    pages: 0,\r\n    accuracy: 100\r\n  });\r\n  \r\n  // 화면에 표시할 통계만 useState로 관리\r\n  const [displayStats, setDisplayStats] = useState({...currentStatsRef.current});\r\n  const { showToast } = useToast();\r\n  \r\n  // 주기적으로 표시 통계 업데이트 (불필요한 렌더링 방지)\r\n  useEffect(() => {\r\n    const updateInterval = setInterval(() => {\r\n      // 변경사항이 있는 경우에만 상태 업데이트\r\n      if (JSON.stringify(currentStatsRef.current) !== JSON.stringify(displayStats)) {\r\n        setDisplayStats({...currentStatsRef.current});\r\n      }\r\n    }, 2000); // 2초마다 업데이트\r\n    \r\n    intervalsRef.current.push(updateInterval);\r\n    \r\n    return () => clearInterval(updateInterval);\r\n  }, [displayStats]);\r\n\r\n  // 통계 시작 핸들러\r\n  const handleStartTracking = useCallback(() => {\r\n    try {\r\n      if (electronAPI) {\r\n        electronAPI.startTracking();\r\n        setIsTracking(true);\r\n      } else {\r\n        console.warn('electronAPI가 없습니다.');\r\n        setIsTracking(true); // API가 없어도 UI는 tracking 상태 표시\r\n      }\r\n    } catch (error) {\r\n      console.error('startTracking 호출 오류:', error);\r\n      setIsTracking(true);\r\n    }\r\n  }, [electronAPI]);\r\n\r\n  // 통계 중지 핸들러\r\n  const handleStopTracking = useCallback(() => {\r\n    try {\r\n      if (electronAPI) {\r\n        electronAPI.stopTracking();\r\n        setIsTracking(false);\r\n      } else {\r\n        console.warn('electronAPI가 없습니다.');\r\n        setIsTracking(false);\r\n      }\r\n    } catch (error) {\r\n      console.error('stopTracking 호출 오류:', error);\r\n      setIsTracking(false);\r\n    }\r\n  }, [electronAPI]);\r\n\r\n  // 로그 데이터 로드 함수\r\n  const fetchLogs = useCallback(async (limit = MAX_LOGS_TO_LOAD) => {\r\n    try {\r\n      setIsLoading(true);\r\n      const endpoint = `/api/getLogs?limit=${limit}`;\r\n      const response = await fetch(endpoint);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`API 요청 실패: ${response.status} ${response.statusText}`);\r\n      }\r\n      \r\n      const contentType = response.headers.get('content-type');\r\n      if (!contentType || !contentType.includes('application/json')) {\r\n        throw new Error('서버에서 잘못된 응답 형식 반환');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        // 필요한 필드만 추출하여 메모리 최적화\r\n        const optimizedLogs = data.logs.map((log: any) => ({\r\n          id: log.id,\r\n          content: log.content,\r\n          key_count: log.key_count,\r\n          typing_time: log.typing_time,\r\n          timestamp: log.timestamp,\r\n          created_at: log.created_at,\r\n          window_title: log.window_title,\r\n          browser_name: log.browser_name,\r\n          total_chars: log.total_chars,\r\n          total_words: log.total_words,\r\n          pages: log.pages,\r\n          accuracy: log.accuracy\r\n        }));\r\n        \r\n        setLogs(optimizedLogs);\r\n      } else {\r\n        console.error('로그 불러오기 실패:', data.error);\r\n        setLogs([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('로그 API 요청 오류:', error);\r\n      setLogs([]);\r\n      showToast?.('데이터 로드 중 오류가 발생했습니다', 'error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [showToast]);\r\n\r\n  // 데이터베이스 저장 함수\r\n  const saveToDatabase = useCallback(async (record: RecordData) => {\r\n    try {\r\n      const response = await fetch('/api/saveLogs', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(record)\r\n      });\r\n\r\n      const result = await response.json();\r\n      \r\n      if (response.ok) {\r\n        await fetchLogs(); // 로그 다시 불러오기\r\n      } else {\r\n        console.error('저장 실패:', result.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('저장 API 요청 오류:', error);\r\n    }\r\n  }, [fetchLogs]);\r\n\r\n  // 통계 저장 핸들러\r\n  const handleSaveStats = useCallback((content: string) => {\r\n    try {\r\n      if (electronAPI) {\r\n        electronAPI.saveStats(content);\r\n      }\r\n      \r\n      // DB에도 저장\r\n      const recordData: RecordData = {\r\n        content,\r\n        keyCount: currentStatsRef.current.keyCount,\r\n        typingTime: currentStatsRef.current.typingTime,\r\n        timestamp: new Date().toISOString(),\r\n        windowTitle: currentStatsRef.current.windowTitle,\r\n        browserName: currentStatsRef.current.browserName,\r\n        totalChars: currentStatsRef.current.totalChars,\r\n        totalWords: currentStatsRef.current.totalWords,\r\n        pages: currentStatsRef.current.pages,\r\n        accuracy: currentStatsRef.current.accuracy\r\n      };\r\n      \r\n      saveToDatabase(recordData);\r\n    } catch (error) {\r\n      console.error('saveStats 호출 오류:', error);\r\n      // API 호출 실패해도 데이터베이스에는 저장 시도\r\n      const recordData: RecordData = {\r\n        content,\r\n        keyCount: currentStatsRef.current.keyCount,\r\n        typingTime: currentStatsRef.current.typingTime,\r\n        timestamp: new Date().toISOString(),\r\n        windowTitle: currentStatsRef.current.windowTitle,\r\n        browserName: currentStatsRef.current.browserName || 'Unknown',\r\n        totalChars: currentStatsRef.current.totalChars,\r\n        totalWords: currentStatsRef.current.totalWords,\r\n        pages: currentStatsRef.current.pages,\r\n        accuracy: currentStatsRef.current.accuracy\r\n      };\r\n      saveToDatabase(recordData);\r\n    }\r\n  }, [electronAPI, saveToDatabase]);\r\n\r\n  // 모니터링 이벤트 처리\r\n  useEffect(() => {\r\n    if (!electronAPI) return;\r\n    \r\n    const cleanupFunctions: (() => void)[] = [];\r\n    \r\n    try {\r\n      // 실시간 타이핑 통계 업데이트 이벤트\r\n      const unsubscribeStats = electronAPI.onTypingStatsUpdate((data: TypingStatsUpdate) => {\r\n        // ref로 상태 관리하여 불필요한 렌더링 방지\r\n        currentStatsRef.current = {\r\n          ...currentStatsRef.current,\r\n          keyCount: data.keyCount,\r\n          typingTime: data.typingTime,\r\n          windowTitle: data.windowTitle || currentStatsRef.current.windowTitle,\r\n          browserName: data.browserName || currentStatsRef.current.browserName,\r\n          totalChars: data.totalChars || 0,\r\n          totalCharsNoSpace: data.totalCharsNoSpace || 0,\r\n          totalWords: data.totalWords || 0,\r\n          pages: data.pages || 0,\r\n          accuracy: data.accuracy || 100\r\n        };\r\n        \r\n        if (!isTracking) {\r\n          setIsTracking(true);\r\n        }\r\n      });\r\n      \r\n      cleanupFunctions.push(unsubscribeStats);\r\n      \r\n      // 통계 저장 완료 이벤트\r\n      const unsubscribeSaved = electronAPI.onStatsSaved(() => {\r\n        // 저장 완료 시 로그 업데이트\r\n        fetchLogs();\r\n      });\r\n      \r\n      cleanupFunctions.push(unsubscribeSaved);\r\n      \r\n      eventsCleanupRef.current = cleanupFunctions;\r\n    } catch (error) {\r\n      console.error('Electron API 이벤트 구독 오류:', error);\r\n    }\r\n    \r\n    // 컴포넌트 언마운트 시 이벤트 리스너 정리\r\n    return () => {\r\n      cleanupFunctions.forEach(cleanup => {\r\n        try {\r\n          cleanup();\r\n        } catch (error) {\r\n          console.error('이벤트 리스너 정리 오류:', error);\r\n        }\r\n      });\r\n    };\r\n  }, [electronAPI, isTracking, fetchLogs]);\r\n\r\n  // 메모리 관리를 위한 정리 함수\r\n  useEffect(() => {\r\n    return () => {\r\n      // 등록된 모든 이벤트 리스너 제거\r\n      eventsCleanupRef.current.forEach(cleanup => cleanup());\r\n      eventsCleanupRef.current = [];\r\n      \r\n      // 등록된 모든 인터벌 제거\r\n      intervalsRef.current.forEach(clearInterval);\r\n      intervalsRef.current = [];\r\n      \r\n      // 대용량 객체 참조 끊기\r\n      setLogs([]);\r\n      currentStatsRef.current = {\r\n        keyCount: 0,\r\n        typingTime: 0,\r\n        windowTitle: '',\r\n        browserName: '',\r\n        totalChars: 0,\r\n        totalCharsNoSpace: 0,\r\n        totalWords: 0,\r\n        pages: 0,\r\n        accuracy: 100\r\n      };\r\n      \r\n      // 메모리 해제 요청\r\n      if (window.gc) {\r\n        try {\r\n          window.gc();\r\n        } catch (e) {\r\n          console.log('GC 호출 실패');\r\n        }\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // 초기 로딩시 로그 데이터 가져오기\r\n  useEffect(() => {\r\n    fetchLogs();\r\n  }, [fetchLogs]);\r\n\r\n  return {\r\n    logs,\r\n    isLoading, \r\n    isTracking,\r\n    displayStats,\r\n    handleStartTracking,\r\n    handleStopTracking,\r\n    handleSaveStats,\r\n    fetchLogs,\r\n    currentStatsRef\r\n  };\r\n}\r\n","import { useState, useCallback, useEffect } from 'react';\r\n\r\nexport interface TabNavigationOptions {\r\n  initialTab?: string;\r\n  onTabChange?: (tab: string) => void;\r\n  electronAPI?: ElectronAPI | null;\r\n}\r\n\r\nexport function useTabNavigation({ \r\n  initialTab = 'monitor', \r\n  onTabChange, \r\n  electronAPI = null \r\n}: TabNavigationOptions = {}) {\r\n  const [activeTab, setActiveTab] = useState(initialTab);\r\n  const [debugMode, setDebugMode] = useState(false);\r\n  \r\n  // 탭 변경 핸들러\r\n  const handleTabChange = useCallback((tab: string) => {\r\n    setActiveTab(tab);\r\n    onTabChange?.(tab);\r\n  }, [onTabChange]);\r\n  \r\n  // 디버그 모드 토글\r\n  const toggleDebugMode = useCallback(() => {\r\n    setDebugMode(prev => !prev);\r\n  }, []);\r\n  \r\n  // 트레이 메뉴에서 탭 전환 이벤트 처리\r\n  useEffect(() => {\r\n    if (!electronAPI) return;\r\n    \r\n    // 트레이 메뉴에서 특정 탭으로 이동하는 이벤트 처리\r\n    const unsubscribeSwitchTab = electronAPI.onSwitchTab((tab: string) => {\r\n      console.log(`트레이 메뉴에서 ${tab} 탭으로 이동 요청`);\r\n      handleTabChange(tab);\r\n    });\r\n    \r\n    // 트레이 메뉴에서 통계 저장 다이얼로그 열기 요청 처리\r\n    const unsubscribeOpenSaveDialog = electronAPI.onOpenSaveStatsDialog(() => {\r\n      console.log('트레이 메뉴에서 통계 저장 다이얼로그 열기 요청');\r\n      handleTabChange('monitor'); // 모니터링 탭으로 전환\r\n    });\r\n    \r\n    // 이벤트 리스너 정리\r\n    return () => {\r\n      unsubscribeSwitchTab();\r\n      unsubscribeOpenSaveDialog();\r\n    };\r\n  }, [electronAPI, handleTabChange]);\r\n\r\n  return {\r\n    activeTab,\r\n    debugMode,\r\n    handleTabChange,\r\n    toggleDebugMode\r\n  };\r\n}\r\n","import { useEffect, useRef, useCallback } from 'react';\r\nimport { MemoryInfo } from '../utils/memory/types';\r\n\r\nexport interface MemoryManagementOptions {\r\n  debugMode?: boolean;\r\n  checkInterval?: number;\r\n  memoryThreshold?: number;\r\n  activeTab?: string;\r\n  onClearLogs?: () => void;\r\n}\r\n\r\n/**\r\n * 메모리 관리를 위한 커스텀 훅\r\n * 주기적으로 메모리 상태를 확인하고 필요시 정리 작업을 수행합니다.\r\n */\r\nexport function useMemoryManagement({ \r\n  debugMode = false,\r\n  checkInterval = 30000, // 기본 30초\r\n  memoryThreshold = 100, // 기본 100MB\r\n  activeTab = 'monitor',\r\n  onClearLogs = () => {}\r\n}: MemoryManagementOptions = {}) {\r\n  const intervalsRef = useRef<NodeJS.Timeout[]>([]);\r\n  const memoryWarningShownRef = useRef<boolean>(false);\r\n  const lastCleanupTimeRef = useRef<number>(0);\r\n  const CLEANUP_COOLDOWN = 60000; // 정리 작업 간 최소 시간 간격 (1분)\r\n  \r\n  // 메모리 사용량 확인 및 정리 함수\r\n  const checkMemoryUsage = useCallback(() => {\r\n    // 브라우저에서 실행 중인지 확인\r\n    if (typeof window === 'undefined') return;\r\n\r\n    // 성능 API를 통한 메모리 정보 수집\r\n    if (window.performance && (window.performance as any).memory) {\r\n      const memoryInfo = (window.performance as any).memory;\r\n      const usedHeapSize = memoryInfo.usedJSHeapSize / (1024 * 1024);\r\n      const totalHeapSize = memoryInfo.totalJSHeapSize / (1024 * 1024);\r\n      const percentUsed = (usedHeapSize / totalHeapSize) * 100;\r\n      \r\n      if (debugMode) {\r\n        console.log(`메모리 사용량: ${Math.round(usedHeapSize)}MB (${Math.round(percentUsed)}%)`);\r\n      }\r\n      \r\n      // 임계치 이상이면 불필요한 데이터 해제 (쿨다운 시간 체크)\r\n      const now = Date.now();\r\n      if (usedHeapSize > memoryThreshold && (now - lastCleanupTimeRef.current > CLEANUP_COOLDOWN)) {\r\n        lastCleanupTimeRef.current = now;\r\n        \r\n        // 경고 로그 (한 번만 표시)\r\n        if (!memoryWarningShownRef.current && debugMode) {\r\n          console.warn(`메모리 사용량 경고: ${Math.round(usedHeapSize)}MB (임계치: ${memoryThreshold}MB)`);\r\n          memoryWarningShownRef.current = true;\r\n        }\r\n        \r\n        // 필요하지 않은 큰 객체 참조 해제\r\n        if (activeTab !== 'history' && activeTab !== 'stats' && activeTab !== 'chart') {\r\n          // 로그 데이터가 필요 없는 탭에서는 메모리에서 해제\r\n          onClearLogs();\r\n          \r\n          // 자동 최적화 수행\r\n          if (typeof window.__memoryOptimizer?.optimizeMemory === 'function') {\r\n            window.__memoryOptimizer.optimizeMemory(usedHeapSize > memoryThreshold * 1.5);\r\n            if (debugMode) {\r\n              console.log('메모리 자동 최적화 수행됨');\r\n            }\r\n          }\r\n          \r\n          // GC 힌트 제공\r\n          if (window.gc) {\r\n            window.gc();\r\n            if (debugMode) {\r\n              console.log('GC 호출됨');\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      // 메모리 사용량이 임계치 아래로 내려가면 경고 상태 초기화\r\n      if (usedHeapSize < memoryThreshold * 0.8) {\r\n        memoryWarningShownRef.current = false;\r\n      }\r\n    }\r\n  }, [activeTab, debugMode, memoryThreshold, onClearLogs]);\r\n  \r\n  // 컴포넌트 마운트 시 타이머 설정\r\n  useEffect(() => {\r\n    // 초기 메모리 체크\r\n    checkMemoryUsage();\r\n    \r\n    // 주기적으로 메모리 사용량 체크\r\n    const memoryCheckInterval = setInterval(checkMemoryUsage, checkInterval);\r\n    intervalsRef.current.push(memoryCheckInterval);\r\n    \r\n    // 페이지 가시성 변경 이벤트 핸들러\r\n    const handleVisibilityChange = () => {\r\n      if (document.visibilityState === 'visible') {\r\n        // 탭이 다시 보이게 되면 메모리 체크 실행\r\n        checkMemoryUsage();\r\n      }\r\n    };\r\n    \r\n    // 이벤트 리스너 등록\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    \r\n    // 페이지 언마운트 시 정리\r\n    return () => {\r\n      clearInterval(memoryCheckInterval);\r\n      \r\n      // 등록된 모든 인터벌 제거\r\n      intervalsRef.current.forEach(clearInterval);\r\n      intervalsRef.current = [];\r\n      \r\n      // 이벤트 리스너 제거\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n      \r\n      // 메모리 해제 요청\r\n      if (window.gc) {\r\n        try {\r\n          window.gc();\r\n        } catch (e) {\r\n          console.warn('GC 호출 실패');\r\n        }\r\n      }\r\n    };\r\n  }, [checkMemoryUsage, checkInterval]);\r\n  \r\n  // 수동으로 메모리 정리 실행 함수\r\n  const cleanupMemory = useCallback(() => {\r\n    // 브라우저 환경 확인\r\n    if (typeof window === 'undefined') return false;\r\n    \r\n    // 최적화 유틸리티 사용 시도\r\n    if (typeof window.__memoryOptimizer?.optimizeMemory === 'function') {\r\n      window.__memoryOptimizer.optimizeMemory(true);\r\n      if (debugMode) {\r\n        console.log('수동 메모리 최적화 실행됨');\r\n      }\r\n      return true;\r\n    }\r\n    \r\n    // 브라우저에 GC 권장\r\n    if (window.gc) {\r\n      try {\r\n        window.gc();\r\n        if (debugMode) {\r\n          console.log('GC 호출 성공');\r\n        }\r\n        return true;\r\n      } catch (e) {\r\n        console.warn('GC 호출 실패');\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }, [debugMode]);\r\n\r\n  // 인터벌 관리를 위한 추가 함수\r\n  const addInterval = useCallback((interval: NodeJS.Timeout) => {\r\n    intervalsRef.current.push(interval);\r\n  }, []);\r\n  \r\n  const clearIntervals = useCallback(() => {\r\n    intervalsRef.current.forEach(clearInterval);\r\n    intervalsRef.current = [];\r\n  }, []);\r\n\r\n  return {\r\n    cleanupMemory,\r\n    addInterval,\r\n    clearIntervals,\r\n    checkMemoryUsage\r\n  };\r\n}\r\n","import { useState, useEffect, useRef, useCallback } from 'react';\r\n\r\nexport interface AutoHideHeaderOptions {\r\n  windowMode: string; \r\n  electronAPI: ElectronAPI | null;\r\n}\r\n\r\nexport function useAutoHideHeader({ windowMode, electronAPI }: AutoHideHeaderOptions) {\r\n  const [isHeaderVisible, setIsHeaderVisible] = useState(true);\r\n  const autoHideTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  \r\n  // 자동 숨김 기능 처리 (윈도우 기본 헤더용)\r\n  useEffect(() => {\r\n    const isAutoHideMode = windowMode === 'fullscreen-auto-hide';\r\n    \r\n    if (!isAutoHideMode) {\r\n      // 자동 숨김이 아닌 경우 항상 표시\r\n      if (electronAPI && typeof electronAPI.windowControl === 'function') {\r\n        // TypeScript 오류 해결 - 타입 단언 사용\r\n        (electronAPI.windowControl as Function)('showHeader');\r\n      }\r\n      return;\r\n    }\r\n    \r\n    const handleMouseMove = (e: MouseEvent) => {\r\n      const { clientY } = e;\r\n      \r\n      // 마우스가 화면 상단 100px 이내에 있을 때 헤더 표시\r\n      if (clientY < 100) {\r\n        setIsHeaderVisible(true);\r\n        if (electronAPI && typeof electronAPI.windowControl === 'function') {\r\n          (electronAPI.windowControl as Function)('showHeader');\r\n        }\r\n        \r\n        if (autoHideTimeoutRef.current) {\r\n          clearTimeout(autoHideTimeoutRef.current);\r\n          autoHideTimeoutRef.current = null;\r\n        }\r\n      } else if (clientY > 150 && isHeaderVisible) {\r\n        // 마우스가 아래로 이동했을 때 타이머 설정\r\n        if (!autoHideTimeoutRef.current) {\r\n          autoHideTimeoutRef.current = setTimeout(() => {\r\n            setIsHeaderVisible(false);\r\n            if (electronAPI && typeof electronAPI.windowControl === 'function') {\r\n              (electronAPI.windowControl as Function)('hideHeader');\r\n            }\r\n            autoHideTimeoutRef.current = null;\r\n          }, 1500);\r\n        }\r\n      }\r\n    };\r\n    \r\n    // 캡처 옵션과 우선순위 높임\r\n    window.addEventListener('mousemove', handleMouseMove, { \r\n      passive: true, \r\n      capture: true \r\n    });\r\n    \r\n    return () => {\r\n      window.removeEventListener('mousemove', handleMouseMove, { capture: true });\r\n      if (autoHideTimeoutRef.current) {\r\n        clearTimeout(autoHideTimeoutRef.current);\r\n      }\r\n    };\r\n  }, [windowMode, isHeaderVisible, electronAPI]);\r\n  \r\n  // 헤더 표시/숨김 설정을 위한 함수\r\n  const setHeaderVisibility = useCallback((isVisible: boolean) => {\r\n    setIsHeaderVisible(isVisible);\r\n    if (electronAPI && typeof electronAPI.windowControl === 'function') {\r\n      (electronAPI.windowControl as Function)(isVisible ? 'showHeader' : 'hideHeader');\r\n    }\r\n  }, [electronAPI]);\r\n\r\n  return {\r\n    isHeaderVisible,\r\n    setHeaderVisibility\r\n  };\r\n}\r\n","'use client';\r\n\r\nimport React, { useMemo, useState, useCallback, useEffect } from 'react';\r\nimport { TypingStats } from './TypingStats';\r\nimport { TypingMonitor } from './TypingMonitor';\r\nimport { TypingHistory } from './TypingHistory';\r\nimport { TypingChart } from './TypingChart';\r\nimport { TabNavigation } from './TabNavigation';\r\nimport { MainLayout } from './MainLayout';\r\nimport { DebugPanel } from './DebugPanel';\r\nimport { Settings } from './Settings'; \r\nimport RestartLoading from './RestartLoading';\r\n// useToast를 사용하지 않는다면 임포트 제거\r\n// import { useToast } from './ToastContext';\r\nimport { useElectronApi } from '../hooks/useElectronApi';\r\nimport { useSettings } from '../hooks/useSettings';\r\nimport { useTypingStats } from '../hooks/useTypingStats';\r\nimport { useTabNavigation } from '../hooks/useTabNavigation';\r\nimport { useMemoryManagement } from '../hooks/useMemoryManagement';\r\nimport { useAutoHideHeader } from '../hooks/useAutoHideHeader';\r\n\r\n// LogEntry 타입 정의 추가\r\ninterface LogEntry {\r\n  id: number;\r\n  content: string;\r\n  key_count: number;\r\n  typing_time: number;\r\n  timestamp: string;\r\n  created_at: string;\r\n  is_saved?: boolean;\r\n  window_title?: string;\r\n  browser_name?: string;\r\n  total_chars?: number;\r\n  total_chars_no_space?: number;\r\n  total_words?: number;\r\n  pages?: number;\r\n  accuracy?: number;\r\n}\r\n\r\nexport const HomeContent = React.memo(function HomeContent() {\r\n  // Electron API 초기화\r\n  const { electronAPI, api } = useElectronApi();\r\n  \r\n  // 설정 상태 관리\r\n  const { \r\n    settings, \r\n    darkMode, \r\n    windowMode,\r\n    handleSaveSettings, \r\n    handleDarkModeChange, \r\n    handleWindowModeChange \r\n  } = useSettings(electronAPI);\r\n  \r\n  // 설정 로드 함수 내에서 기본값 설정\r\n  const loadSettings = async () => {\r\n    try {\r\n      if (electronAPI) {\r\n        const settings = await electronAPI.loadSettings();\r\n        \r\n        // GPU 가속 관련 속성이 없는 경우 기본값 설정\r\n        const completeSettings: SettingsState = {\r\n          ...settings,\r\n          // 필수 속성이지만 값이 undefined인 경우를 방지하기 위한 기본값 설정\r\n          useHardwareAcceleration: settings.useHardwareAcceleration ?? false,\r\n          processingMode: settings.processingMode ?? 'auto',\r\n          maxMemoryThreshold: settings.maxMemoryThreshold ?? 100\r\n        };\r\n        \r\n        // setSettings 대신 handleSaveSettings 사용\r\n        handleSaveSettings(completeSettings);\r\n        // setDarkMode 대신 handleDarkModeChange 사용\r\n        handleDarkModeChange(settings.darkMode);\r\n      }\r\n    } catch (error) {\r\n      console.error('설정 로드 중 오류:', error);\r\n    }\r\n  };\r\n\r\n  // 탭 관리\r\n  const { \r\n    activeTab, \r\n    debugMode, \r\n    handleTabChange, \r\n    toggleDebugMode \r\n  } = useTabNavigation({ \r\n    initialTab: 'monitor',\r\n    electronAPI: api \r\n  });\r\n  \r\n  // 자동 숨김 헤더 관리\r\n  const { isHeaderVisible } = useAutoHideHeader({\r\n    windowMode, \r\n    electronAPI\r\n  });\r\n  \r\n  // 타이핑 통계 관리 - 'typingLogs'로 이름 변경하여 중복 방지\r\n  const { \r\n    logs: typingLogs, // 이름 변경\r\n    isLoading, \r\n    isTracking,\r\n    displayStats,\r\n    handleStartTracking,\r\n    handleStopTracking,\r\n    handleSaveStats,\r\n    currentStatsRef,\r\n    fetchLogs\r\n  } = useTypingStats(electronAPI);\r\n  \r\n  // 현재 표시할 로그 관리\r\n  const [currentLogs, setCurrentLogs] = useState<LogEntry[]>([]);\r\n  \r\n  // 메모리 관리 훅 사용 개선\r\n  const memoryManager = useMemoryManagement({\r\n    debugMode,\r\n    activeTab,\r\n    memoryThreshold: 100, // 100MB 기준\r\n    checkInterval: 30000, // 30초마다 체크\r\n    onClearLogs: () => {\r\n      // 현재 활성 탭이 로그를 사용하지 않는 경우에만 해제\r\n      if (activeTab !== 'history' && activeTab !== 'stats' && activeTab !== 'chart') {\r\n        setCurrentLogs([]);\r\n        \r\n        // 대용량 데이터 참조 해제를 통한 추가 최적화\r\n        if (window.__memoryOptimizer?.optimizeImageResources) {\r\n          window.__memoryOptimizer.optimizeImageResources().catch(err => {\r\n            console.error('이미지 리소스 최적화 중 오류:', err);\r\n          });\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  // 컴포넌트 첫 로드 시 메모리 최적화 실행\r\n  useEffect(() => {\r\n    // 초기 메모리 최적화\r\n    if (window.__memoryOptimizer?.optimizeMemory) {\r\n      window.__memoryOptimizer.optimizeMemory(false);\r\n    }\r\n    \r\n    // 주기적으로 이미지 리소스 최적화 (페이지가 오래 열려있을 때)\r\n    const imageOptimizationInterval = setInterval(() => {\r\n      if (window.__memoryOptimizer?.optimizeImageResources) {\r\n        window.__memoryOptimizer.optimizeImageResources().catch(err => {\r\n          console.error('이미지 리소스 최적화 주기 작업 중 오류:', err);\r\n        });\r\n      }\r\n    }, 300000); // 5분마다\r\n    \r\n    // 인터벌 등록 및 언마운트 시 정리\r\n    memoryManager.addInterval(imageOptimizationInterval);\r\n    \r\n    return () => {\r\n      memoryManager.clearIntervals();\r\n    };\r\n  }, [memoryManager]);\r\n\r\n  // 로그 데이터 업데이트 - 타이핑 로그가 변경될 때마다 실행\r\n  React.useEffect(() => {\r\n    if (typingLogs && typingLogs.length > 0) {\r\n      setCurrentLogs(typingLogs);\r\n    }\r\n  }, [typingLogs]);\r\n\r\n  const [isRestarting, setIsRestarting] = useState(false);\r\n\r\n  // 재시작 로딩 리스너 추가\r\n  useEffect(() => {\r\n    // 전자캅에 접근할 수 있는지 확인\r\n    if (!electronAPI) return;\r\n    \r\n    const unsubscribe = electronAPI.onShowRestartLoading?.((data: RestartLoadingData) => {\r\n      setIsRestarting(true);\r\n      \r\n      // 타임아웃이 있으면 자동으로 숨김\r\n      if (data.timeout) {\r\n        setTimeout(() => {\r\n          setIsRestarting(false);\r\n        }, data.timeout);\r\n      }\r\n    }) || (() => {});\r\n    \r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [electronAPI]);\r\n\r\n  // 컴포넌트 렌더링 로직\r\n  const renderContent = useCallback(() => {\r\n    switch (activeTab) {\r\n      case 'monitor':\r\n        return (\r\n          <TypingMonitor\r\n            stats={displayStats}\r\n            isTracking={isTracking}\r\n            onStartTracking={handleStartTracking}\r\n            onStopTracking={handleStopTracking}\r\n            onSaveStats={handleSaveStats}\r\n          />\r\n        );\r\n      case 'stats':\r\n        return (\r\n          <React.Suspense fallback={<div>Loading chart...</div>}>\r\n            <TypingChart \r\n              logs={typingLogs}\r\n            />\r\n          </React.Suspense>\r\n        );\r\n      case 'settings':\r\n        return (\r\n          <div className=\"settings-tab-wrapper\" style={{\r\n            maxWidth: '800px',\r\n            margin: '0 auto',\r\n            width: '100%'\r\n          }}>\r\n            <Settings\r\n              onSave={handleSaveSettings}\r\n              initialSettings={settings}\r\n              darkMode={darkMode}\r\n              onDarkModeChange={handleDarkModeChange}\r\n              onWindowModeChange={handleWindowModeChange}\r\n            />\r\n          </div>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  }, [\r\n    activeTab, \r\n    displayStats, \r\n    isTracking, \r\n    handleStartTracking, \r\n    handleStopTracking, \r\n    handleSaveStats,\r\n    typingLogs,\r\n    settings, \r\n    darkMode, \r\n    handleDarkModeChange, \r\n    handleWindowModeChange,\r\n    handleSaveSettings\r\n  ]);\r\n\r\n  return (\r\n    <MainLayout \r\n      darkMode={darkMode}\r\n      windowMode={windowMode} \r\n      electronAPI={electronAPI}\r\n      isHeaderVisible={isHeaderVisible}\r\n    >\r\n      {/* 재시작 로딩 오버레이 */}\r\n      <RestartLoading \r\n        isVisible={isRestarting}\r\n        message=\"앱을 재시작하는 중입니다\"\r\n      />\r\n      \r\n      {/* 나머지 내용 */}\r\n      <TabNavigation\r\n        activeTab={activeTab}\r\n        onTabChange={handleTabChange}\r\n        onDebugToggle={toggleDebugMode}\r\n        debugMode={debugMode}\r\n      />\r\n      \r\n      {/* 메모이제이션된 컴포넌트 사용 */}\r\n      {renderContent()}\r\n      \r\n      {/* 디버그 패널 */}\r\n      <DebugPanel\r\n        isVisible={debugMode}\r\n        stats={currentStatsRef.current}\r\n        logsCount={currentLogs.length}\r\n        isTracking={isTracking}\r\n        windowMode={windowMode}\r\n      />\r\n    </MainLayout>\r\n  );\r\n});\r\n\r\nexport default HomeContent;\r\n","'use client';\n\nimport React from 'react';\nimport { ThemeProvider } from './components/ThemeProvider';\nimport { ToastProvider } from './components/ToastContext';\nimport { HomeContent } from './components/HomeContent';\n\n// 메인 페이지 컴포넌트 - 대폭 간소화됨\nexport default function Home() {\n  return (\n    <ThemeProvider>\n      <ToastProvider>\n        <React.Suspense fallback={<div>Loading...</div>}>\n          <HomeContent />\n        </React.Suspense>\n      </ToastProvider>\n    </ThemeProvider>\n  );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"monitorContainer\":\"TypingMonitor_monitorContainer__ER1LM\",\"controlPanel\":\"TypingMonitor_controlPanel__mnPAg\",\"startButton\":\"TypingMonitor_startButton__6Kfxe\",\"stopButton\":\"TypingMonitor_stopButton__KAJ8v\",\"saveButton\":\"TypingMonitor_saveButton__WglP8\",\"statsPanel\":\"TypingMonitor_statsPanel__hOEWj\",\"statItem\":\"TypingMonitor_statItem__uJud3\",\"statLabel\":\"TypingMonitor_statLabel___96yv\",\"statValue\":\"TypingMonitor_statValue__Gutae\",\"saveSection\":\"TypingMonitor_saveSection__KoLn9\",\"descriptionInput\":\"TypingMonitor_descriptionInput__B_Lx7\",\"helpSection\":\"TypingMonitor_helpSection__JbpyP\",\"statusIndicator\":\"TypingMonitor_statusIndicator__kULxH\",\"indicator\":\"TypingMonitor_indicator__z3RHP\",\"active\":\"TypingMonitor_active__hioKY\",\"pulse\":\"TypingMonitor_pulse__PJDcF\",\"googleDocsLink\":\"TypingMonitor_googleDocsLink__sa_xR\",\"websiteTabs\":\"TypingMonitor_websiteTabs__RgoMF\",\"websiteTabHeader\":\"TypingMonitor_websiteTabHeader__V_y3l\",\"websiteTabButton\":\"TypingMonitor_websiteTabButton__rXPP4\",\"activeWebsiteTab\":\"TypingMonitor_activeWebsiteTab__niDOn\",\"websiteTabContent\":\"TypingMonitor_websiteTabContent__RBMcj\",\"websiteLinks\":\"TypingMonitor_websiteLinks__3vAID\",\"websiteLink\":\"TypingMonitor_websiteLink__lqd9U\",\"actionFeedback\":\"TypingMonitor_actionFeedback__VPiGl\",\"fadeIn\":\"TypingMonitor_fadeIn__BRcC2\",\"browserStatus\":\"TypingMonitor_browserStatus__b4rGV\",\"browserInfo\":\"TypingMonitor_browserInfo__w3N_l\",\"browserRow\":\"TypingMonitor_browserRow__27uT0\",\"browserValue\":\"TypingMonitor_browserValue__cu5JE\",\"detectedBadge\":\"TypingMonitor_detectedBadge__iDUgv\",\"notDetectedBadge\":\"TypingMonitor_notDetectedBadge__EtIo1\",\"browserList\":\"TypingMonitor_browserList__JrDTA\",\"browserColumn\":\"TypingMonitor_browserColumn__EOGEk\",\"trackingButton\":\"TypingMonitor_trackingButton__szR9V\",\"trackingActive\":\"TypingMonitor_trackingActive__eHDsS\",\"monitorHeader\":\"TypingMonitor_monitorHeader__yUhAy\",\"container\":\"TypingMonitor_container__TzhrN\",\"contentWrapper\":\"TypingMonitor_contentWrapper__PPmCK\",\"leftPanel\":\"TypingMonitor_leftPanel__FJhBH\",\"rightPanel\":\"TypingMonitor_rightPanel__DQxqP\",\"statsTabs\":\"TypingMonitor_statsTabs__BFC0M\",\"statsTabButton\":\"TypingMonitor_statsTabButton__PM_Rt\",\"activeStatsTab\":\"TypingMonitor_activeStatsTab__rEAV4\",\"statsTabContent\":\"TypingMonitor_statsTabContent__RAlml\",\"statsGroup\":\"TypingMonitor_statsGroup__eqddv\",\"statCard\":\"TypingMonitor_statCard__qVky4\"};","import { useEffect, useState } from 'react';\r\nimport styles from './Toast.module.css';\r\n\r\ninterface ToastProps {\r\n  message: string;\r\n  type: 'success' | 'error' | 'info' | 'warning'; // warning 타입 추가\r\n  duration?: number;\r\n  onClose?: () => void;\r\n}\r\n\r\nexport function Toast({ message, type, duration = 3000, onClose }: ToastProps) {\r\n  const [visible, setVisible] = useState(true);\r\n  \r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setVisible(false);\r\n      if (onClose) onClose();\r\n    }, duration);\r\n    \r\n    return () => clearTimeout(timer);\r\n  }, [duration, onClose]);\r\n  \r\n  return visible ? (\r\n    <div className={`${styles.toast} ${styles[type]}`}>\r\n      <span className={styles.message}>{message}</span>\r\n    </div>\r\n  ) : null;\r\n}","import React, { createContext, useContext, useState } from 'react';\r\nimport { Toast } from './Toast';\r\n\r\ntype ToastType = 'success' | 'error' | 'info' | 'warning'; // warning 타입 추가\r\n\r\ninterface ToastContextType {\r\n  showToast: (message: string, type: ToastType) => void;\r\n}\r\n\r\nconst ToastContext = createContext<ToastContextType | undefined>(undefined);\r\n\r\nexport function ToastProvider({ children }: { children: React.ReactNode }) {\r\n  const [toast, setToast] = useState<{ message: string; type: ToastType } | null>(null);\r\n  \r\n  const showToast = (message: string, type: ToastType) => {\r\n    setToast({ message, type });\r\n    \r\n    // 3초 후 자동으로 토스트 제거\r\n    setTimeout(() => {\r\n      setToast(null);\r\n    }, 3000);\r\n  };\r\n  \r\n  return (\r\n    <ToastContext.Provider value={{ showToast }}>\r\n      {children}\r\n      {toast && (\r\n        <Toast\r\n          message={toast.message}\r\n          type={toast.type}\r\n          onClose={() => setToast(null)}\r\n        />\r\n      )}\r\n    </ToastContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useToast = () => {\r\n  const context = useContext(ToastContext);\r\n  if (context === undefined) {\r\n    // 오류 대신 더미 함수 반환하여 앱이 중단되지 않도록 함\r\n    return {\r\n      showToast: (message: string, type: ToastType) => {\r\n        console.warn('ToastProvider가 설정되지 않았습니다:', message);\r\n      }\r\n    };\r\n  }\r\n  return context;\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appHeader\":\"AppHeader_appHeader__GHmNp\",\"leftSection\":\"AppHeader_leftSection__bx_bz\",\"rightSection\":\"AppHeader_rightSection__2Sou5\",\"iconOnly\":\"AppHeader_iconOnly__AbZ3Q\",\"darkMode\":\"AppHeader_darkMode__vqPCA\",\"visible\":\"AppHeader_visible__uRggq\",\"hidden\":\"AppHeader_hidden__yln_L\",\"autoHide\":\"AppHeader_autoHide__qqjph\",\"headerDetectionArea\":\"AppHeader_headerDetectionArea__vaapr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chartContainer\":\"TypingChart_chartContainer__Xxoiu\",\"charts\":\"TypingChart_charts__fz60g\",\"chartItem\":\"TypingChart_chartItem__CNTM_\",\"chartWrapper\":\"TypingChart_chartWrapper__1KDYX\",\"noData\":\"TypingChart_noData__zjjvx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsContainer\":\"Settings_settingsContainer__0SxHP\",\"darkMode\":\"Settings_darkMode__a5VLX\",\"settingSection\":\"Settings_settingSection__XwrF7\",\"categoryToggles\":\"Settings_categoryToggles__HQHhT\",\"toggleItem\":\"Settings_toggleItem___q_0D\",\"toggleLabel\":\"Settings_toggleLabel__8fIJv\",\"radioGroup\":\"Settings_radioGroup__QGEGo\",\"radioLabel\":\"Settings_radioLabel__Iog9l\",\"radioText\":\"Settings_radioText__hi7nW\",\"selectLabel\":\"Settings_selectLabel__p8LXx\",\"selectControl\":\"Settings_selectControl__Wv09K\",\"numberInput\":\"Settings_numberInput__hKIK9\",\"buttonRow\":\"Settings_buttonRow__7DE_2\",\"saveButton\":\"Settings_saveButton__hOtLB\",\"disabledNote\":\"Settings_disabledNote__pj8Vq\",\"settingDescription\":\"Settings_settingDescription__uTSPW\",\"settingSectionTitle\":\"Settings_settingSectionTitle__7AAKi\",\"highlightedSetting\":\"Settings_highlightedSetting__nv197\",\"restartNotice\":\"Settings_restartNotice__7IuFo\",\"restartButton\":\"Settings_restartButton__W35gK\",\"monitoringAutoStart\":\"Settings_monitoringAutoStart__QvixM\",\"buttonGroup\":\"Settings_buttonGroup__INZRh\",\"debugButton\":\"Settings_debugButton__fDkOc\",\"debugInfo\":\"Settings_debugInfo__oW81q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"ConfirmDialog_overlay__XcVfx\",\"dialog\":\"ConfirmDialog_dialog__CZkp6\",\"fadeIn\":\"ConfirmDialog_fadeIn____2_q\",\"header\":\"ConfirmDialog_header__TwDKK\",\"info\":\"ConfirmDialog_info__c4R3u\",\"warning\":\"ConfirmDialog_warning__CAxfo\",\"error\":\"ConfirmDialog_error__1lLKt\",\"success\":\"ConfirmDialog_success__4OJVN\",\"closeButton\":\"ConfirmDialog_closeButton__xqxS2\",\"content\":\"ConfirmDialog_content__DjEqW\",\"message\":\"ConfirmDialog_message__e3Avu\",\"actions\":\"ConfirmDialog_actions___hCeq\",\"button\":\"ConfirmDialog_button__4hdj9\",\"cancelButton\":\"ConfirmDialog_cancelButton__jtlqe\",\"confirmButton\":\"ConfirmDialog_confirmButton__qHQyl\",\"warningButton\":\"ConfirmDialog_warningButton__NGvq4\",\"errorButton\":\"ConfirmDialog_errorButton__vhkIj\",\"successButton\":\"ConfirmDialog_successButton__ZgRV9\",\"darkMode\":\"ConfirmDialog_darkMode__GApyi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"RestartLoading_overlay__xTGoM\",\"loadingContainer\":\"RestartLoading_loadingContainer__fs5qH\",\"spinner\":\"RestartLoading_spinner__pt5Mz\",\"spin\":\"RestartLoading_spin__IcW5Z\",\"title\":\"RestartLoading_title__0PqQH\",\"progressContainer\":\"RestartLoading_progressContainer__fWgDe\",\"progressBar\":\"RestartLoading_progressBar__MFOGS\",\"note\":\"RestartLoading_note__iqeE6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toast\":\"Toast_toast__n4V9V\",\"fadeIn\":\"Toast_fadeIn__8co0A\",\"fadeOut\":\"Toast_fadeOut__PBTbC\",\"success\":\"Toast_success__n3sBF\",\"error\":\"Toast_error__vTefu\",\"info\":\"Toast_info__iczaj\",\"warning\":\"Toast_warning__u1w7_\",\"message\":\"Toast_message__Ivwz3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContainer\":\"page_appContainer__p4TtA\",\"mainContent\":\"page_mainContent__51TpB\",\"appTabs\":\"page_appTabs__dehwV\",\"tabButton\":\"page_tabButton__stR9X\",\"activeTab\":\"page_activeTab__kgdSK\",\"typingContainer\":\"page_typingContainer__Ltx96\",\"statsContainer\":\"page_statsContainer__15RXV\",\"historyContainer\":\"page_historyContainer__PhcIa\",\"monitorContainer\":\"page_monitorContainer__nzoP_\",\"debugButton\":\"page_debugButton__OpmNi\",\"debugActive\":\"page_debugActive__1OXf0\",\"debugPanel\":\"page_debugPanel__3hMsI\",\"debugPanelBottom\":\"page_debugPanelBottom__KC93m\",\"debugInfo\":\"page_debugInfo__i9tMu\",\"zenMode\":\"page_zenMode__IMTVJ\",\"headerDetectionArea\":\"page_headerDetectionArea__Mg4up\"};","import(/* webpackMode: \"eager\" */ \"C:\\\\Users\\\\user\\\\Desktop\\\\typing-stats-app\\\\src\\\\app\\\\page.tsx\");\n"],"names":["ThemeContext","createContext","theme","toggleTheme","setDarkMode","useTheme","useContext","ThemeProvider","children","setTheme","useState","enabled","document","documentElement","classList","add","remove","savedSettings","localStorage","getItem","settings","JSON","parse","darkMode","setItem","stringify","e","console","error","window","electronAPI","useEffect","prefersDarkMode","matchMedia","matches","Provider","value","newTheme","formatTime","seconds","minutes","Math","floor","remainingSeconds","hours","remainingMinutes","getAverageSpeed","keyCount","time","round","TypingMonitor","React","browserCheckResultRef","stats","isTracking","onStartTracking","onStopTracking","onSaveStats","description","setDescription","lastAction","setLastAction","activeWebsiteTab","setActiveWebsiteTab","activeStatsTab","setActiveStatsTab","checkBrowserInfo","useCallback","getCurrentBrowserInfo","current","info","interval","setInterval","clearInterval","handleDescriptionChange","target","handleSave","setTimeout","handleToggleTracking","handleWebsiteTabChange","tab","handleStatsTabChange","websiteTabContent","useMemo","div","className","styles","a","href","rel","statsTabContent","toLocaleString","typingTime","pages","toFixed","totalWords","totalChars","totalCharsNoSpace","accuracy","h2","button","onClick","span","strong","h3","browserName","name","isGoogleDocs","title","windowTitle","substring","length","p","textarea","onChange","placeholder","rows","disabled","trim","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","filterLogsForChart","sevenDaysAgo","Date","setDate","getDate","logs","filter","log","timestamp","slice","TypingChart","isDarkMode","setIsDarkMode","chartRefs","useRef","isMountedRef","checkDarkMode","isDark","contains","body","handleDarkModeChange","event","detail","addEventListener","observer","MutationObserver","observe","attributes","attributeFilter","disconnect","removeEventListener","forEach","chart","destroy","gc","filteredLogs","Array","isArray","warn","getChartOptions","responsive","maintainAspectRatio","animation","duration","elements","point","radius","hoverRadius","line","tension","devicePixelRatio","plugins","legend","position","labels","color","font","size","display","text","weight","tooltip","backgroundColor","titleColor","bodyColor","borderColor","borderWidth","callbacks","label","context","raw","scales","x","ticks","maxTicksLimit","grid","y","tickLength","chartData","keyCountData","timeData","speedData","wordData","charData","dataMap","Map","i","date","toLocaleDateString","has","set","totalKeyCount","totalTime","data","get","key_count","typing_time","contentLength","content","ceil","sortedDates","from","keys","sort","b","getTime","map","parts","split","d","createChartData","bgColor","datasets","pointBackgroundColor","fill","speedChartData","shouldRenderCharts","setShouldRenderCharts","timer","clearTimeout","setChartRef","instance","push","Line","options","redraw","ref","Bar","TabNavigation","memo","activeTab","onTabChange","onDebugToggle","debugMode","style","pointerEvents","WindowControls","api","handleMinimize","windowControl","aria-label","MinimizeIcon","handleMaximize","MaximizeIcon","handleClose","CloseIcon","AppHeader","isVisible","onVisibilityChange","autoHide","visibility","setVisibility","lastMouseY","headerRef","timeoutRef","mouseInsideHeader","handleMouseMove","currentY","clientY","handleHeaderMouseEnter","handleHeaderMouseLeave","headerElement","handleClick","aria-hidden","Image","src","alt","width","height","onError","AppFooter","year","getFullYear","footer","MainLayout","windowMode","isHeaderVisible","headerDetectionRef","zIndex","main","DebugPanel","logsCount","ConfirmDialog","message","isOpen","onConfirm","onCancel","confirmText","cancelText","type","handleKeyDown","key","autoFocus","SaveConfirmDialog","settingsType","Settings","onSave","initialSettings","onDarkModeChange","onWindowModeChange","setSettings","enabledCategories","docs","office","coding","sns","autoStartMonitoring","minimizeToTray","showTrayNotifications","reduceMemoryInBackground","enableMiniView","useHardwareAcceleration","processingMode","maxMemoryThreshold","resumeAfterIdle","needsRestart","setNeedsRestart","showSaveConfirm","setShowSaveConfirm","showToast","useToast","apiDebugInfo","setApiDebugInfo","showDebugInfo","setShowDebugInfo","handleCategoryToggle","prev","category","handleWindowModeChange","mode","handleSettingChange","handleRestartClick","apiInfo","Object","join","restartApp","showRestartPrompt","electron","String","input","checked","handleAutoStartToggle","handleDarkModeToggle","newDarkMode","handleMinimizeToTrayToggle","handleShowTrayNotificationsToggle","small","handleReduceMemoryToggle","handleMiniViewToggle","handleHardwareAccelerationToggle","newValue","toggleDebugInfo","h4","pre","select","option","parseInt","min","max","handleSaveSettings","confirmSaveSettings","confirm","cancelSaveSettings","RestartLoading","onClose","dots","setDots","progress","setProgress","dotsInterval","progressInterval","createDummyElectronAPI","onTypingStatsUpdate","onStatsSaved","startTracking","stopTracking","saveStats","Promise","resolve","getDebugInfo","currentStats","startTime","lastActiveTime","currentWindow","currentBrowser","platform","electronVersion","nodeVersion","saveSettings","success","loadSettings","setWindowMode","getWindowMode","checkAutoStart","onAutoTrackingStarted","onSwitchTab","onOpenSaveStatsDialog","requestStatsUpdate","onMiniViewStatsUpdate","toggleMiniView","updateTraySettings","quitApp","toggleWindow","onBackgroundModeChange","onTrayCommand","closeWindow","getDarkMode","applyDarkModeToAllElements","querySelectorAll","el","defaultSettings","HomeContent","useElectronApi","setElectronAPI","dummyApi","useSettings","saveSettingsToLocalStorage","settingsToSave","loadSettingsFromLocalStorage","parsedSettings","completeSettings","newSettings","savePromise","result","timeoutPromise","_","reject","race","darkModeEvent","CustomEvent","dispatchEvent","handleBeforeUnload","handleTabChange","toggleDebugMode","useTabNavigation","initialTab","setActiveTab","setDebugMode","unsubscribeSwitchTab","unsubscribeOpenSaveDialog","useAutoHideHeader","setIsHeaderVisible","autoHideTimeoutRef","isAutoHideMode","passive","capture","setHeaderVisibility","typingLogs","isLoading","displayStats","handleStartTracking","handleStopTracking","handleSaveStats","currentStatsRef","fetchLogs","useTypingStats","setLogs","setIsLoading","setIsTracking","eventsCleanupRef","intervalsRef","setDisplayStats","updateInterval","limit","MAX_LOGS_TO_LOAD","fetch","endpoint","response","ok","status","statusText","contentType","headers","includes","json","optimizedLogs","id","created_at","window_title","browser_name","total_chars","total_words","saveToDatabase","record","method","recordData","toISOString","cleanupFunctions","unsubscribeStats","unsubscribeSaved","cleanup","currentLogs","setCurrentLogs","memoryManager","useMemoryManagement","checkInterval","memoryThreshold","onClearLogs","memoryWarningShownRef","lastCleanupTimeRef","checkMemoryUsage","performance","memory","memoryInfo","usedHeapSize","usedJSHeapSize","totalHeapSize","totalJSHeapSize","now","CLEANUP_COOLDOWN","__memoryOptimizer","optimizeMemory","memoryCheckInterval","handleVisibilityChange","visibilityState","cleanupMemory","addInterval","clearIntervals","optimizeImageResources","catch","err","imageOptimizationInterval","isRestarting","setIsRestarting","unsubscribe","onShowRestartLoading","timeout","renderContent","fallback","maxWidth","margin","Home","ToastProvider","Toast","visible","setVisible","ToastContext","undefined","toast","setToast"],"sourceRoot":"","ignoreList":[]}