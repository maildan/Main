{"version":3,"file":"static/chunks/app/restart/page-0126d36ae89bba96.js","mappings":"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","sources":["webpack://_N_E/./src/app/globals.css","webpack://_N_E/./src/app/components/RestartPrompt.module.css","webpack://_N_E/./src/app/components/RestartPrompt.tsx","webpack://_N_E/./src/app/restart/page.tsx","webpack://_N_E/?a118"],"sourcesContent":["// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"RestartPrompt_container__m3rBF\",\"darkMode\":\"RestartPrompt_darkMode__bWsCu\",\"header\":\"RestartPrompt_header__GirVy\",\"closeButton\":\"RestartPrompt_closeButton__PqyOE\",\"content\":\"RestartPrompt_content__xR56n\",\"icon\":\"RestartPrompt_icon__17AgW\",\"pulse\":\"RestartPrompt_pulse__5awfk\",\"loadingIcon\":\"RestartPrompt_loadingIcon__H5KLx\",\"spin\":\"RestartPrompt_spin__VOLEe\",\"message\":\"RestartPrompt_message__Npbo_\",\"buttons\":\"RestartPrompt_buttons__IcUwR\",\"button\":\"RestartPrompt_button__BNlds\",\"primary\":\"RestartPrompt_primary__5zNsy\",\"secondary\":\"RestartPrompt_secondary__EnfS8\"};","'use client';\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport styles from './RestartPrompt.module.css';\r\n\r\n/**\r\n * 앱 재시작 안내 컴포넌트\r\n * 기존 restart.html을 React 컴포넌트로 마이그레이션\r\n */\r\nexport default function RestartPrompt() {\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [isRestarting, setIsRestarting] = useState(false);\r\n  \r\n  // 다크 모드 설정 확인 및 적용\r\n  useEffect(() => {\r\n    async function applyTheme() {\r\n      try {\r\n        // OS 기본 테마 감지\r\n        const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n        \r\n        // 우선순위: 1. OS 기본값 사용 (선호됨)\r\n        // 2. 앱 설정 확인 (필요한 경우)\r\n        console.log('OS 기본 테마 사용:', prefersDarkMode ? 'dark' : 'light');\r\n        setIsDarkMode(prefersDarkMode);\r\n        \r\n        // 앱 설정 확인이 필요한 경우에만 사용\r\n        if (window.electronAPI?.getDarkMode) {\r\n          const appDarkMode = await window.electronAPI.getDarkMode();\r\n          if (appDarkMode !== prefersDarkMode) {\r\n            console.log('앱 설정 테마 사용:', appDarkMode ? 'dark' : 'light');\r\n            setIsDarkMode(appDarkMode);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('테마 적용 중 오류:', error);\r\n        // 오류 발생 시 OS 기본값 사용\r\n        setIsDarkMode(window.matchMedia('(prefers-color-scheme: dark)').matches);\r\n      }\r\n    }\r\n    \r\n    applyTheme();\r\n    \r\n    // 시스템 테마 변경 감지 및 자동 적용\r\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n    const handleThemeChange = (e: MediaQueryListEvent) => {\r\n      setIsDarkMode(e.matches);\r\n    };\r\n    \r\n    mediaQuery.addEventListener('change', handleThemeChange);\r\n    return () => mediaQuery.removeEventListener('change', handleThemeChange);\r\n  }, []);\r\n  \r\n  // 앱 재시작 함수\r\n  const restartApp = useCallback(() => {\r\n    console.log('재시작 시도');\r\n    setIsRestarting(true);\r\n    \r\n    setTimeout(() => {\r\n      try {\r\n        // API 호출 순서: 1. electronAPI, 2. restartAPI\r\n        if (window.electronAPI?.restartApp) {\r\n          console.log('electronAPI.restartApp 사용');\r\n          window.electronAPI.restartApp();\r\n          return;\r\n        }\r\n        \r\n        if (window.restartAPI?.restartApp) {\r\n          console.log('restartAPI.restartApp 사용');\r\n          window.restartAPI.restartApp();\r\n          return;\r\n        }\r\n        \r\n        console.error('재시작 API를 찾을 수 없습니다');\r\n      } catch (error) {\r\n        console.error('재시작 실행 중 오류:', error);\r\n        setIsRestarting(false); // 오류 발생 시 재시작 상태 복원\r\n      }\r\n    }, 500);\r\n  }, []);\r\n  \r\n  // 창 닫기 함수\r\n  const closeWindow = useCallback(() => {\r\n    console.log('창 닫기 시도');\r\n    try {\r\n      // API 호출 순서: 1. electronAPI, 2. restartAPI\r\n      if (window.electronAPI?.closeWindow) {\r\n        console.log('electronAPI.closeWindow 사용');\r\n        window.electronAPI.closeWindow();\r\n        return;\r\n      }\r\n      \r\n      if (window.restartAPI?.closeWindow) {\r\n        console.log('restartAPI.closeWindow 사용');\r\n        window.restartAPI.closeWindow();\r\n        return;\r\n      }\r\n      \r\n      console.error('창 닫기 API를 찾을 수 없습니다');\r\n    } catch (error) {\r\n      console.error('창 닫기 중 오류:', error);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`${styles.container} ${isDarkMode ? styles.darkMode : ''}`}>\r\n      <div className={styles.header}>\r\n        <h1>앱 재시작</h1>\r\n        <button \r\n          className={styles.closeButton} \r\n          onClick={closeWindow} \r\n          disabled={isRestarting}\r\n          aria-label=\"닫기\"\r\n          tabIndex={0}\r\n          onKeyDown={(e) => e.key === 'Enter' && closeWindow()}\r\n        >\r\n          ×\r\n        </button>\r\n      </div>\r\n      \r\n      <div className={styles.content}>\r\n        {isRestarting ? (\r\n          <>\r\n            <div className={styles.loadingIcon}>🔄</div>\r\n            <p className={styles.message}>\r\n              재시작 중입니다...<br />\r\n              잠시만 기다려주세요.\r\n            </p>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className={styles.icon}>🔄</div>\r\n            <p className={styles.message}>\r\n              GPU 가속 설정이 변경되었습니다.<br />\r\n              변경된 설정을 적용하려면 앱을 재시작해야 합니다.\r\n            </p>\r\n            <div className={styles.buttons}>\r\n              <button \r\n                className={`${styles.button} ${styles.primary}`}\r\n                onClick={restartApp}\r\n                disabled={isRestarting}\r\n                tabIndex={0}\r\n                onKeyDown={(e) => e.key === 'Enter' && restartApp()}\r\n                aria-label=\"지금 재시작\"\r\n              >\r\n                지금 재시작\r\n              </button>\r\n              <button \r\n                className={`${styles.button} ${styles.secondary}`}\r\n                onClick={closeWindow}\r\n                disabled={isRestarting}\r\n                tabIndex={0}\r\n                onKeyDown={(e) => e.key === 'Enter' && closeWindow()}\r\n                aria-label=\"나중에 하기\"\r\n              >\r\n                나중에 하기\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","'use client';\r\n\r\nimport { useEffect } from 'react';\r\nimport RestartPrompt from '../components/RestartPrompt';\r\nimport '../globals.css';\r\n\r\n/**\r\n * 재시작 안내 페이지\r\n */\r\nexport default function RestartPage() {\r\n  // 페이지 로드 시 API 사용 가능 여부 확인\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined') {\r\n      // API 사용 가능 여부 로깅\r\n      console.log('RestartPage: API 사용 가능 여부 확인');\r\n      console.log('window.restartAPI 존재:', !!window.restartAPI);\r\n      \r\n      if (window.restartAPI) {\r\n        // 사용 가능한 API 함수 로깅\r\n        console.log('사용 가능한 restartAPI 함수:', \r\n          Object.keys(window.restartAPI).map(key => `${key}`).join(', ')\r\n        );\r\n      }\r\n      \r\n      // 대체 API 확인\r\n      console.log('window.electronAPI 존재:', !!window.electronAPI);\r\n      if (window.electronAPI) {\r\n        console.log('window.electronAPI에 restartApp 존재:', \r\n          !!window.electronAPI.restartApp\r\n        );\r\n      }\r\n    }\r\n  }, []);\r\n  \r\n  return <RestartPrompt />;\r\n}\r\n","import(/* webpackMode: \"eager\" */ \"C:\\\\Users\\\\user\\\\Desktop\\\\loop_2\\\\src\\\\app\\\\restart\\\\page.tsx\");\n"],"names":["RestartPrompt","isDarkMode","setIsDarkMode","useState","isRestarting","setIsRestarting","useEffect","applyTheme","window","prefersDarkMode","matchMedia","matches","console","log","electronAPI","getDarkMode","appDarkMode","error","mediaQuery","handleThemeChange","e","addEventListener","removeEventListener","restartApp","useCallback","setTimeout","restartAPI","closeWindow","div","className","styles","h1","button","onClick","disabled","aria-label","tabIndex","onKeyDown","key","p","br","RestartPage","Object","keys","map","join"],"sourceRoot":"","ignoreList":[]}