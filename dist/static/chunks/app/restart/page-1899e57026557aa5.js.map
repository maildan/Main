{"version":3,"file":"static/chunks/app/restart/page-1899e57026557aa5.js","mappings":"yFCAA,sCAAqF,WCCrF,WAAkB,4mBCQH,SAASA,IACtB,GAAM,CAACC,EAAYC,EAAc,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GACvC,CAACC,EAAcC,EAAgB,CAAGF,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GAGjDG,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,MACR,eAAeC,EACb,GAAI,KAEEC,EAQAA,EARJ,UAAIA,EAAAA,OAAOC,UAAAA,EAAPD,KAAAA,EAAAA,EAAmBE,GAAnBF,QAA8B,CAAE,CAClCG,QAAQC,GAAG,CAAC,6BACZ,IAAMC,EAAW,MAAML,OAAOC,UAAU,CAACC,WAAW,GACpDR,EAAcW,GACd,MACF,CAGA,UAAIL,EAAAA,OAAOM,WAAW,EAAlBN,KAAAA,EAAAA,EAAoBE,GAApBF,QAA+B,CAAE,CACnCG,QAAQC,GAAG,CAAC,8BACZ,IAAMC,EAAW,MAAML,OAAOM,WAAW,CAACJ,WAAW,GACrDR,EAAcW,GACd,MACF,CAEAF,QAAQI,IAAI,CAAC,+BACf,CAAE,MAAOC,EAAO,CACdL,QAAQK,KAAK,CAAC,cAAeA,EAC/B,CACF,GAGF,EAAG,EAAE,EAGL,IAAMC,EAAaC,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,KAC7BP,QAAQC,GAAG,CAAC,UACZP,GAAgB,GAEhBc,WAAW,KACT,GAAI,KAEEX,EAOAA,EAPJ,UAAIA,EAAAA,OAAOC,UAAAA,EAAPD,KAAAA,EAAAA,EAAmBS,GAAnBT,OAA6B,CAAE,CACjCG,QAAQC,GAAG,CAAC,4BACZJ,OAAOC,UAAU,CAACQ,UAAU,GAC5B,MACF,CAGA,UAAIT,EAAAA,OAAOM,WAAW,EAAlBN,KAAAA,EAAAA,EAAoBS,GAApBT,OAA8B,CAAE,CAClCG,QAAQC,GAAG,CAAC,6BACZJ,OAAOM,WAAW,CAACG,UAAU,GAC7B,MACF,CAEAN,QAAQK,KAAK,CAAC,qBAChB,CAAE,MAAOA,EAAO,CACdL,QAAQK,KAAK,CAAC,eAAgBA,EAChC,CACF,EAAG,IACL,EAAG,EAAE,EAGCI,EAAcF,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,KAC9BP,QAAQC,GAAG,CAAC,WACZ,GAAI,KAEEJ,EAOAA,EAPJ,UAAIA,EAAAA,OAAOC,UAAAA,EAAPD,KAAAA,EAAAA,EAAmBY,GAAnBZ,QAA8B,CAAE,CAClCG,QAAQC,GAAG,CAAC,6BACZJ,OAAOC,UAAU,CAACW,WAAW,GAC7B,MACF,CAGA,UAAIZ,EAAAA,OAAOM,WAAAA,EAAPN,KAAAA,EAAAA,EAAoBY,GAApBZ,QAA+B,CAAE,CACnCG,QAAQC,GAAG,CAAC,8BACZJ,OAAOM,WAAW,CAACM,WAAW,GAC9B,MACF,CAEAT,QAAQK,KAAK,CAAC,sBAChB,CAAE,MAAOA,EAAO,CACdL,QAAQK,KAAK,CAAC,aAAcA,EAC9B,CACF,EAAG,EAAE,EAGL,MACE,WAACK,MAAAA,CAAIC,UAAW,GAAuBrB,MAAAA,CAApBsB,IAAAA,SAAgB,CAAC,KAAqC,OAAlCtB,EAAasB,IAAAA,QAAe,CAAG,cACpE,WAACF,MAAAA,CAAIC,UAAWC,IAAAA,MAAa,WAC3B,UAACC,KAAAA,UAAG,UACJ,UAACC,SAAAA,CAAOH,UAAWC,IAAAA,WAAkB,CAAEG,QAASN,EAAaO,SAAUvB,WAAc,YAGvF,UAACiB,MAAAA,CAAIC,UAAWC,IAAAA,OAAc,UAC3BnB,EACC,iCACE,UAACiB,MAAAA,CAAIC,UAAWC,IAAAA,WAAkB,UAAE,iBACpC,WAACK,IAAAA,CAAEN,UAAWC,IAAAA,OAAc,WAAE,cACjB,UAACM,KAAAA,CAAAA,GAAK,oBAKrB,iCACE,UAACR,MAAAA,CAAIC,UAAWC,IAAAA,IAAW,UAAE,iBAC7B,WAACK,IAAAA,CAAEN,UAAWC,IAAAA,OAAc,WAAE,sBACT,UAACM,KAAAA,CAAAA,GAAK,iCAG3B,WAACR,MAAAA,CAAIC,UAAWC,IAAAA,OAAc,WAC5B,UAACE,SAAAA,CACCH,UAAW,GAAoBC,MAAAA,CAAjBA,IAAAA,MAAa,CAAC,KAAkB,OAAfA,IAAAA,OAAc,EAC7CG,QAAST,EACTU,SAAUvB,WACX,WAGD,UAACqB,SAAAA,CACCH,UAAW,GAAoBC,MAAAA,CAAjBA,IAAAA,MAAa,CAAC,KAAoB,OAAjBA,IAAAA,SAAgB,EAC/CG,QAASN,EACTO,SAAUvB,WACX,qBASf,CClIe,SAAS0B,IAyBtB,MAvBAxB,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KAGNK,QAAQC,GAAG,CAAC,gCACZD,QAAQC,GAAG,CAAC,wBAAyB,CAAC,CAACJ,OAAOC,UAAU,EAEpDD,OAAOC,UAAU,EAEnBE,QAAQC,GAAG,CAAC,wBACVmB,OAAOC,IAAI,CAACxB,OAAOC,UAAU,EAAEwB,GAAG,CAACC,GAAO,GAAO,OAAJA,IAAOC,IAAI,CAAC,OAK7DxB,QAAQC,GAAG,CAAC,yBAA0B,CAAC,CAACJ,OAAOM,WAAW,EACtDN,OAAOM,WAAW,EAAE,QACdF,GAAG,CAAC,qCACV,CAAC,CAACJ,OAAOM,WAAW,CAACG,UAAU,CAIvC,EAAG,EAAE,EAEE,UAACjB,EAAaA,CAAAA,EACvB,QADuBA","sources":["webpack://_N_E/./src/app/globals.css","webpack://_N_E/?9bb3","webpack://_N_E/./src/app/components/RestartPrompt.module.css","webpack://_N_E/./src/app/components/RestartPrompt.tsx","webpack://_N_E/./src/app/restart/page.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin","import(/* webpackMode: \"eager\" */ \"/Users/user/loop/loop_3/src/app/restart/page.tsx\");\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"RestartPrompt_container__m3rBF\",\"darkMode\":\"RestartPrompt_darkMode__bWsCu\",\"header\":\"RestartPrompt_header__GirVy\",\"closeButton\":\"RestartPrompt_closeButton__PqyOE\",\"content\":\"RestartPrompt_content__xR56n\",\"icon\":\"RestartPrompt_icon__17AgW\",\"loadingIcon\":\"RestartPrompt_loadingIcon__H5KLx\",\"spin\":\"RestartPrompt_spin__VOLEe\",\"message\":\"RestartPrompt_message__Npbo_\",\"buttons\":\"RestartPrompt_buttons__IcUwR\",\"button\":\"RestartPrompt_button__BNlds\",\"primary\":\"RestartPrompt_primary__5zNsy\",\"secondary\":\"RestartPrompt_secondary__EnfS8\"};","'use client';\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport styles from './RestartPrompt.module.css';\r\n\r\n/**\r\n * 앱 재시작 안내 컴포넌트\r\n * 기존 restart.html을 React 컴포넌트로 마이그레이션\r\n */\r\nexport default function RestartPrompt() {\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [isRestarting, setIsRestarting] = useState(false);\r\n  \r\n  // 다크 모드 설정 확인 및 적용\r\n  useEffect(() => {\r\n    async function applyTheme() {\r\n      try {\r\n        // 1. restartAPI 시도\r\n        if (window.restartAPI?.getDarkMode) {\r\n          console.log('restartAPI.getDarkMode 사용');\r\n          const darkMode = await window.restartAPI.getDarkMode();\r\n          setIsDarkMode(darkMode);\r\n          return;\r\n        }\r\n        \r\n        // 2. electronAPI 시도 (ElectronAPI 타입에 getDarkMode가 추가됨)\r\n        if (window.electronAPI?.getDarkMode) {\r\n          console.log('electronAPI.getDarkMode 사용');\r\n          const darkMode = await window.electronAPI.getDarkMode();\r\n          setIsDarkMode(darkMode);\r\n          return;\r\n        }\r\n        \r\n        console.warn('다크 모드 정보를 가져올 수 없습니다. 기본값 사용');\r\n      } catch (error) {\r\n        console.error('테마 적용 중 오류:', error);\r\n      }\r\n    }\r\n    \r\n    applyTheme();\r\n  }, []);\r\n  \r\n  // 앱 재시작 함수\r\n  const restartApp = useCallback(() => {\r\n    console.log('재시작 시도');\r\n    setIsRestarting(true);\r\n    \r\n    setTimeout(() => {\r\n      try {\r\n        // 1. restartAPI 시도\r\n        if (window.restartAPI?.restartApp) {\r\n          console.log('restartAPI.restartApp 사용');\r\n          window.restartAPI.restartApp();\r\n          return;\r\n        }\r\n        \r\n        // 2. electronAPI 시도 (ElectronAPI 타입에 restartApp이 추가됨)\r\n        if (window.electronAPI?.restartApp) {\r\n          console.log('electronAPI.restartApp 사용');\r\n          window.electronAPI.restartApp();\r\n          return;\r\n        }\r\n        \r\n        console.error('재시작 API를 찾을 수 없습니다');\r\n      } catch (error) {\r\n        console.error('재시작 실행 중 오류:', error);\r\n      }\r\n    }, 500);\r\n  }, []);\r\n  \r\n  // 창 닫기 함수\r\n  const closeWindow = useCallback(() => {\r\n    console.log('창 닫기 시도');\r\n    try {\r\n      // 1. restartAPI 시도\r\n      if (window.restartAPI?.closeWindow) {\r\n        console.log('restartAPI.closeWindow 사용');\r\n        window.restartAPI.closeWindow();\r\n        return;\r\n      }\r\n      \r\n      // 2. electronAPI 시도 (ElectronAPI 타입에 closeWindow가 추가됨)\r\n      if (window.electronAPI?.closeWindow) {\r\n        console.log('electronAPI.closeWindow 사용');\r\n        window.electronAPI.closeWindow();\r\n        return;\r\n      }\r\n      \r\n      console.error('창 닫기 API를 찾을 수 없습니다');\r\n    } catch (error) {\r\n      console.error('창 닫기 중 오류:', error);\r\n    }\r\n  }, []);\r\n\r\n  // UI 부분은 변경 없음\r\n  return (\r\n    <div className={`${styles.container} ${isDarkMode ? styles.darkMode : ''}`}>\r\n      <div className={styles.header}>\r\n        <h1>앱 재시작</h1>\r\n        <button className={styles.closeButton} onClick={closeWindow} disabled={isRestarting}>×</button>\r\n      </div>\r\n      \r\n      <div className={styles.content}>\r\n        {isRestarting ? (\r\n          <>\r\n            <div className={styles.loadingIcon}>🔄</div>\r\n            <p className={styles.message}>\r\n              재시작 중입니다...<br />\r\n              잠시만 기다려주세요.\r\n            </p>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className={styles.icon}>🔄</div>\r\n            <p className={styles.message}>\r\n              GPU 가속 설정이 변경되었습니다.<br />\r\n              변경된 설정을 적용하려면 앱을 재시작해야 합니다.\r\n            </p>\r\n            <div className={styles.buttons}>\r\n              <button \r\n                className={`${styles.button} ${styles.primary}`}\r\n                onClick={restartApp}\r\n                disabled={isRestarting}\r\n              >\r\n                지금 재시작\r\n              </button>\r\n              <button \r\n                className={`${styles.button} ${styles.secondary}`}\r\n                onClick={closeWindow}\r\n                disabled={isRestarting}\r\n              >\r\n                나중에 하기\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","'use client';\r\n\r\nimport { useEffect } from 'react';\r\nimport RestartPrompt from '../components/RestartPrompt';\r\nimport '../globals.css';\r\n\r\n/**\r\n * 재시작 안내 페이지\r\n */\r\nexport default function RestartPage() {\r\n  // 페이지 로드 시 API 사용 가능 여부 확인\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined') {\r\n      // API 사용 가능 여부 로깅\r\n      console.log('RestartPage: API 사용 가능 여부 확인');\r\n      console.log('window.restartAPI 존재:', !!window.restartAPI);\r\n      \r\n      if (window.restartAPI) {\r\n        // 사용 가능한 API 함수 로깅\r\n        console.log('사용 가능한 restartAPI 함수:', \r\n          Object.keys(window.restartAPI).map(key => `${key}`).join(', ')\r\n        );\r\n      }\r\n      \r\n      // 대체 API 확인\r\n      console.log('window.electronAPI 존재:', !!window.electronAPI);\r\n      if (window.electronAPI) {\r\n        console.log('window.electronAPI에 restartApp 존재:', \r\n          !!window.electronAPI.restartApp\r\n        );\r\n      }\r\n    }\r\n  }, []);\r\n  \r\n  return <RestartPrompt />;\r\n}\r\n"],"names":["RestartPrompt","isDarkMode","setIsDarkMode","useState","isRestarting","setIsRestarting","useEffect","applyTheme","window","restartAPI","getDarkMode","console","log","darkMode","electronAPI","warn","error","restartApp","useCallback","setTimeout","closeWindow","div","className","styles","h1","button","onClick","disabled","p","br","RestartPage","Object","keys","map","key","join"],"sourceRoot":"","ignoreList":[]}