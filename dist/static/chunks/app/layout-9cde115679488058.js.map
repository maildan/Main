{"version":3,"file":"static/chunks/app/layout-9cde115679488058.js","mappings":"4EAAA,sCAA8H,CAE9H,0CAA4F,wFEE7E,SAASA,EAAa,CAA2C,KAA3C,UAAEC,CAAQ,CAAiC,CAA3C,EAC7B,CAACC,EAASC,EAAW,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GACjC,CAACC,EAAYC,EAAc,CAAGF,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,SAE7CG,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KAERJ,GAAW,GAGX,GAAI,CACF,IAAMK,EAAcC,OAAOC,UAAU,CAAC,gCACtCJ,EAAcE,EAAYG,OAAO,EAGjC,IAAMC,EAAmB,IACvBN,EAAcO,EAAEF,OAAO,CACzB,EACAH,EAAYM,gBAAgB,CAAC,SAAUF,GAGvC,GAAI,CACF,IAAMG,EAAWC,aAAaC,OAAO,CAAC,gBACtC,GAAIF,EAAU,CACZ,IAAMG,EAASC,KAAKC,KAAK,CAACL,QACFM,IAApBH,EAAOI,KAAwB,GAAhB,EACjBhB,EAAcY,EAAOI,QAAQ,CAEjC,CACF,CAAE,MAAOC,EAAK,CACZC,QAAQC,IAAI,CAAC,YAAaF,EAC5B,CAEA,MAAO,KACLf,EAAYkB,mBAAmB,CAAC,SAAUd,EAC5C,CACF,CAAE,MAAOe,EAAO,CACdH,QAAQG,KAAK,CAAC,qBAAsBA,EACtC,CACF,EAAG,EAAE,EAGAzB,IAKDG,EACFuB,GANY,MAMHC,CADK,cACU,CAACC,SAAS,CAACC,GAAG,CAAC,aAEvCH,SAASC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,cAPnC,+BAAG/B,GAWd","sources":["webpack://_N_E/?cef9","webpack://_N_E/./src/app/globals.css","webpack://_N_E/./src/app/ClientLayout.tsx"],"sourcesContent":["import(/* webpackMode: \"eager\", webpackExports: [\"default\"] */ \"C:\\\\Users\\\\user\\\\Desktop\\\\loop_2\\\\src\\\\app\\\\ClientLayout.tsx\");\n;\nimport(/* webpackMode: \"eager\" */ \"C:\\\\Users\\\\user\\\\Desktop\\\\loop_2\\\\src\\\\app\\\\globals.css\");\n","// extracted by mini-css-extract-plugin","'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport default function ClientLayout({ children }: { children: React.ReactNode }) {\r\n  const [mounted, setMounted] = useState(false);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    // 컴포넌트가 마운트된 후에만 실행 (하이드레이션 불일치 방지)\r\n    setMounted(true);\r\n    \r\n    // 다크 모드 감지\r\n    try {\r\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');\r\n      setIsDarkMode(prefersDark.matches);\r\n      \r\n      // 다크 모드 변경 감지\r\n      const darkModeListener = (e: MediaQueryListEvent) => {\r\n        setIsDarkMode(e.matches);\r\n      };\r\n      prefersDark.addEventListener('change', darkModeListener);\r\n      \r\n      // 저장된 다크 모드 설정 불러오기\r\n      try {\r\n        const settings = localStorage.getItem('app-settings');\r\n        if (settings) {\r\n          const parsed = JSON.parse(settings);\r\n          if (parsed.darkMode !== undefined) {\r\n            setIsDarkMode(parsed.darkMode);\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.warn('설정 로드 실패:', err);\r\n      }\r\n      \r\n      return () => {\r\n        prefersDark.removeEventListener('change', darkModeListener);\r\n      };\r\n    } catch (error) {\r\n      console.error('클라이언트 레이아웃 초기화 오류:', error);\r\n    }\r\n  }, []);\r\n  \r\n  // 하이드레이션 불일치를 방지하기 위해 마운트 전에는 단순 렌더링\r\n  if (!mounted) {\r\n    return <>{children}</>;\r\n  }\r\n  \r\n  // 마운트 후 다크 모드 클래스 설정\r\n  if (isDarkMode) {\r\n    document.documentElement.classList.add('dark-mode');\r\n  } else {\r\n    document.documentElement.classList.remove('dark-mode');\r\n  }\r\n  \r\n  return <>{children}</>;\r\n}"],"names":["ClientLayout","children","mounted","setMounted","useState","isDarkMode","setIsDarkMode","useEffect","prefersDark","window","matchMedia","matches","darkModeListener","e","addEventListener","settings","localStorage","getItem","parsed","JSON","parse","undefined","darkMode","err","console","warn","removeEventListener","error","document","documentElement","classList","add","remove"],"sourceRoot":"","ignoreList":[]}