{"version":3,"file":"static/chunks/app/pages/analysis/page-ed7b939af91eab78.js","mappings":"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","sources":["webpack://_N_E/./src/app/pages/analysis/page.module.css","webpack://_N_E/?d28e","webpack://_N_E/./src/app/utils/memory-management.ts","webpack://_N_E/./src/app/utils/memory/optimizer.ts","webpack://_N_E/./src/app/utils/performance-metrics.ts","webpack://_N_E/./src/app/utils/memory/logger.ts","webpack://_N_E/./src/app/utils/log-utils.ts","webpack://_N_E/./src/app/utils/log-learning.ts","webpack://_N_E/./src/app/utils/format-utils.ts","webpack://_N_E/./src/app/components/LogAnalysisPanel.tsx","webpack://_N_E/./src/app/pages/analysis/page.tsx","webpack://_N_E/./src/app/components/LogAnalysisPanel.module.css"],"sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"page_container__Oa_Yd\",\"header\":\"page_header__oX1IH\",\"main\":\"page_main__HYnnv\",\"helpSection\":\"page_helpSection__urTHs\",\"helpContent\":\"page_helpContent__XR3c6\",\"actions\":\"page_actions__aQlQc\",\"secondaryButton\":\"page_secondaryButton__QCv7s\",\"root\":\"page_root__QiYEX\"};","import(/* webpackMode: \"eager\" */ \"C:\\\\Users\\\\user\\\\Desktop\\\\loop\\\\src\\\\app\\\\pages\\\\analysis\\\\page.tsx\");\n","/**\r\n * 메모리 관리 유틸리티\r\n * \r\n * 애플리케이션 메모리 관리 기능들을 통합하여 제공합니다.\r\n */\r\n\r\nimport { MemoryInfo, GCResult, OptimizationResult, OptimizationLevel } from '@/types';\r\nimport { requestNativeMemoryInfo, requestNativeGarbageCollection, requestNativeMemoryOptimization } from './native-memory-bridge';\r\n\r\n/**\r\n * 메모리 정보 가져오기\r\n */\r\nexport async function getMemoryInfo(): Promise<MemoryInfo | null> {\r\n  try {\r\n    return await requestNativeMemoryInfo();\r\n  } catch (error) {\r\n    console.error('메모리 정보 가져오기 오류:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * 가비지 컬렉션 수행\r\n * @param _emergency 긴급 모드 여부\r\n */\r\nexport async function performGarbageCollection(_emergency: boolean = false): Promise<GCResult | null> {\r\n  try {\r\n    return await requestNativeGarbageCollection();\r\n  } catch (error) {\r\n    console.error('가비지 컬렉션 오류:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// 안쓰이는 변수 _formatBytes로 이름 변경\r\nconst _formatBytes = (bytes: number): string => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n\r\n// 캐시 정리 함수 - 임시 구현 (미사용 변수에 _ 접두사 추가)\r\nfunction _cleanAllCaches(): void {\r\n  // 캐시 정리 로직 구현\r\n  console.log('모든 캐시 정리');\r\n}\r\n\r\n// 가비지 콜렉션 유도 함수 (미사용 변수에 _ 접두사 추가)\r\nfunction _suggestGarbageCollection(): void {\r\n  if (typeof window !== 'undefined' && (window as any).gc) {\r\n    (window as any).gc();\r\n  }\r\n  console.log('가비지 콜렉션 제안');\r\n}\r\n\r\n/**\r\n * 메모리 최적화 수행\r\n * @param level 최적화 레벨\r\n * @param emergency 긴급 모드 여부\r\n */\r\nexport async function optimizeMemory(\r\n  level: OptimizationLevel = OptimizationLevel.MEDIUM,\r\n  emergency: boolean = false\r\n): Promise<OptimizationResult | null> {\r\n  try {\r\n    // 현재 메모리 상태 기록\r\n    const memoryBefore = await requestNativeMemoryInfo();\r\n    console.log('최적화 전 메모리 상태:', memoryBefore);\r\n\r\n    console.log(`메모리 최적화 시작 (레벨: ${level}, 긴급: ${emergency})`);\r\n\r\n    // 네이티브 모듈 호출 - 숫자로 변환하여 전달\r\n    const result = await requestNativeMemoryOptimization(Number(level), emergency);\r\n\r\n    if (result) {\r\n      // 속성 이름 호환성 처리 - 일관된 속성 사용\r\n      const freedMB = result.freedMB || result.freed_mb || 0;\r\n\r\n      // 모든 필수 속성 지정 (타입 충돌 해결)\r\n      return {\r\n        success: result.success,\r\n        optimizationLevel: level,\r\n        timestamp: result.timestamp,\r\n        freedMemory: result.freedMemory || result.freed_memory || 0,\r\n        freedMB: freedMB,\r\n        optimization_level: level,\r\n        freed_memory: result.freedMemory || result.freed_memory || 0,\r\n        freed_mb: freedMB,\r\n        duration: result.duration\r\n      };\r\n    }\r\n\r\n    return null;\r\n  } catch (error) {\r\n    console.error('메모리 최적화 오류:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * 최적화 기록\r\n * @param level 최적화 레벨\r\n * @param success 성공 여부\r\n * @param implementation 구현 ('native' 또는 'js')\r\n * @param freedMemory 해제된 메모리 (MB)\r\n */\r\nfunction _recordOptimization(\r\n  level: OptimizationLevel,\r\n  success: boolean,\r\n  implementation: string,\r\n  freedMemory: number\r\n): void {\r\n  try {\r\n    // 최적화 기록 로직\r\n    if (typeof localStorage !== 'undefined') {\r\n      const record = {\r\n        timestamp: Date.now(),\r\n        level,\r\n        success,\r\n        implementation,\r\n        freedMemory,\r\n      };\r\n\r\n      const existingRecordsJson = localStorage.getItem('memoryOptimizationRecords');\r\n      const records = existingRecordsJson\r\n        ? JSON.parse(existingRecordsJson)\r\n        : [];\r\n\r\n      // 최대 20개까지만 저장\r\n      records.push(record);\r\n      if (records.length > 20) {\r\n        records.shift();\r\n      }\r\n\r\n      // 저장\r\n      localStorage.setItem('memoryOptimizationRecords', JSON.stringify(records));\r\n    }\r\n  } catch (e) {\r\n    // 저장 오류 무시\r\n    console.warn('최적화 기록 저장 오류:', e);\r\n  }\r\n}\r\n\r\n/**\r\n * 메모리 사용량 문자열 포맷\r\n * @param info 메모리 정보\r\n */\r\nexport function formatMemoryInfo(info: MemoryInfo): Record<string, string> {\r\n  if (!info) return {};\r\n\r\n  const heapUsedMB = info.heapUsed !== undefined\r\n    ? Math.round(info.heapUsed / (1024 * 1024) * 10) / 10\r\n    : info.heapUsedMB || 0;\r\n\r\n  const heapTotalMB = info.heapTotal !== undefined\r\n    ? Math.round(info.heapTotal / (1024 * 1024) * 10) / 10\r\n    : 0;\r\n\r\n  const percent = info.percentUsed !== undefined\r\n    ? info.percentUsed\r\n    : (info.heapTotal && info.heapUsed) ? (info.heapUsed / info.heapTotal) * 100 : 0;\r\n\r\n  return {\r\n    heapUsed: `${heapUsedMB} MB`,\r\n    heapTotal: `${heapTotalMB} MB`,\r\n    percentUsed: `${Math.round(percent * 10) / 10}%`,\r\n    timestamp: new Date(info.timestamp || Date.now()).toLocaleString()\r\n  };\r\n}\r\n\r\n/**\r\n * 메모리 상태 평가\r\n * @param info 메모리 정보\r\n */\r\nexport function evaluateMemoryStatus(info: MemoryInfo): {\r\n  status: string;\r\n  message: string;\r\n  percentUsed: number;\r\n  needsOptimization: boolean;\r\n} {\r\n  if (!info) {\r\n    return {\r\n      status: 'unknown',\r\n      message: '메모리 정보를 가져올 수 없음',\r\n      percentUsed: 0,\r\n      needsOptimization: false\r\n    };\r\n  }\r\n\r\n  const percent = info.percentUsed !== undefined\r\n    ? info.percentUsed\r\n    : (info.heapTotal && info.heapUsed) ? (info.heapUsed / info.heapTotal) * 100 : 0;\r\n\r\n  if (percent > 90) {\r\n    return {\r\n      status: 'critical',\r\n      message: '메모리 사용량이 매우 높음 (최적화 필요)',\r\n      percentUsed: percent,\r\n      needsOptimization: true\r\n    };\r\n  } else if (percent > 75) {\r\n    return {\r\n      status: 'warning',\r\n      message: '메모리 사용량이 높음',\r\n      percentUsed: percent,\r\n      needsOptimization: true\r\n    };\r\n  } else if (percent > 60) {\r\n    return {\r\n      status: 'normal',\r\n      message: '메모리 사용량이 정상',\r\n      percentUsed: percent,\r\n      needsOptimization: false\r\n    };\r\n  } else {\r\n    return {\r\n      status: 'good',\r\n      message: '메모리 사용량이 낮음',\r\n      percentUsed: percent,\r\n      needsOptimization: false\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 빈 메모리 정보 객체 생성\r\n */\r\nexport function createEmptyMemoryInfo(): MemoryInfo {\r\n  return {\r\n    // camelCase 속성들\r\n    heapUsed: 0,\r\n    heapTotal: 0,\r\n    rss: 0,\r\n    heapUsedMB: 0,\r\n    rssMB: 0,\r\n    percentUsed: 0,\r\n    timestamp: Date.now(),\r\n\r\n    // snake_case 속성들 (Rust 호환)\r\n    heap_used: 0,\r\n    heap_total: 0,\r\n    heap_used_mb: 0,\r\n    rss_mb: 0,\r\n    percent_used: 0,\r\n    heap_limit: 0\r\n  };\r\n}\r\n\r\n/**\r\n * 네이티브 메모리 정보를 표준 형식으로 변환\r\n * @param nativeInfo 네이티브 메모리 정보\r\n */\r\nexport function convertNativeMemoryInfo(nativeInfo: Record<string, unknown>): MemoryInfo {\r\n  // 기본값 생성 (타입 오류 방지)\r\n  const result: MemoryInfo = {\r\n    timestamp: Date.now(),\r\n    heap_used: 0,\r\n    heap_total: 0,\r\n    heap_limit: 0,\r\n    rss: 0,\r\n    heap_used_mb: 0,\r\n    rss_mb: 0,\r\n    percent_used: 0\r\n  };\r\n\r\n  // nativeInfo에서 있는 속성만 가져오기\r\n  if (nativeInfo) {\r\n    // 안전한 타입 캐스팅으로 속성 할당\r\n    if (typeof nativeInfo.heap_used === 'number') result.heap_used = nativeInfo.heap_used;\r\n    if (typeof nativeInfo.heapUsed === 'number') result.heapUsed = nativeInfo.heapUsed;\r\n\r\n    if (typeof nativeInfo.heap_total === 'number') result.heap_total = nativeInfo.heap_total;\r\n    if (typeof nativeInfo.heapTotal === 'number') result.heapTotal = nativeInfo.heapTotal;\r\n\r\n    if (typeof nativeInfo.rss === 'number') result.rss = nativeInfo.rss;\r\n\r\n    if (typeof nativeInfo.heap_used_mb === 'number') result.heap_used_mb = nativeInfo.heap_used_mb;\r\n    if (typeof nativeInfo.heapUsedMB === 'number') result.heapUsedMB = nativeInfo.heapUsedMB;\r\n\r\n    if (typeof nativeInfo.rss_mb === 'number') result.rss_mb = nativeInfo.rss_mb;\r\n    if (typeof nativeInfo.rssMB === 'number') result.rssMB = nativeInfo.rssMB;\r\n\r\n    if (typeof nativeInfo.percent_used === 'number') result.percent_used = nativeInfo.percent_used;\r\n    if (typeof nativeInfo.percentUsed === 'number') result.percentUsed = nativeInfo.percentUsed;\r\n\r\n    if (typeof nativeInfo.heap_limit === 'number') result.heap_limit = nativeInfo.heap_limit;\r\n    if (typeof nativeInfo.heapLimit === 'number') result.heapLimit = nativeInfo.heapLimit;\r\n\r\n    if (typeof nativeInfo.timestamp === 'number') result.timestamp = nativeInfo.timestamp;\r\n  }\r\n\r\n  return result;\r\n}\r\n","/**\r\n * 메모리 최적화 코어 유틸리티\r\n * \r\n * 이 모듈은 네이티브 모듈 기반 최적화 함수를 제공합니다.\r\n * 모든 최적화 작업은 Rust로 구현된 네이티브 모듈을 통해 수행됩니다.\r\n */\r\n\r\nimport { requestNativeMemoryOptimization } from '../native-memory-bridge';\r\nimport { suggestGarbageCollection, requestGC } from './gc-utils';\r\nimport { OptimizationLevel as AppOptimizationLevel } from '@/types';\r\nimport { OptimizationLevel as NativeOptimizationLevel } from '@/types/native-module';\r\nimport { toNativeOptimizationLevel } from '../enum-converters';\r\n\r\n/**\r\n * 메모리 최적화 수행 함수 (내부 구현)\r\n * 네이티브 모듈을 통해 메모리 최적화를 수행합니다.\r\n * \r\n * @param {boolean} aggressive 적극적 최적화 여부\r\n * @returns {Promise<boolean>} 성공 여부\r\n */\r\nexport async function internalOptimizeMemory(aggressive: boolean = false): Promise<boolean> {\r\n  try {\r\n    // 적절한 최적화 레벨 선택\r\n    const appLevel = aggressive ? AppOptimizationLevel.HIGH : AppOptimizationLevel.MEDIUM;\r\n    // 명시적 변환 함수 사용\r\n    const nativeLevel = toNativeOptimizationLevel(appLevel);\r\n    \r\n    // 네이티브 모듈 최적화 호출\r\n    const result = await requestNativeMemoryOptimization(nativeLevel, aggressive);\r\n    \r\n    if (!result) {\r\n      console.warn('네이티브 메모리 최적화 실패');\r\n      return false;\r\n    }\r\n    \r\n    // 브라우저에 GC 힌트 제공\r\n    suggestGarbageCollection();\r\n    \r\n    // Electron 메인 프로세스에 메모리 최적화 요청 (지원되는 경우)\r\n    if (window.electronAPI && window.electronAPI.optimizeMemory) {\r\n      window.electronAPI.optimizeMemory(aggressive);\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('메모리 최적화 중 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * 메모리 최적화 수행 함수 (공개 API)\r\n * \r\n * @param {boolean} deepCleanup 심층 정리 여부\r\n * @returns {Promise<boolean>} 성공 여부\r\n */\r\nexport async function optimizeMemory(deepCleanup = false): Promise<boolean> {\r\n  try {\r\n    // 적극적인 플래그 설정\r\n    const aggressive = deepCleanup;\r\n    \r\n    // 내부 최적화 함수 호출\r\n    const result = await internalOptimizeMemory(aggressive);\r\n    \r\n    // GC 요청\r\n    await requestGC(deepCleanup);\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('메모리 최적화 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n","/**\r\n * 성능 측정 유틸리티\r\n * \r\n * 이 모듈은 네이티브 모듈과 JavaScript 구현 간의 성능을 비교하기 위한\r\n * 도구를 제공합니다. 측정 결과는 로그와 대시보드에 표시될 수 있습니다.\r\n */\r\n\r\nimport { OptimizationLevel } from '@/types';\r\nimport { toNativeOptimizationLevel } from './enum-converters';\r\nimport { requestNativeMemoryOptimization } from './native-memory-bridge';\r\nimport { internalOptimizeMemory } from './memory/optimizer';\r\nimport { getMemoryInfo } from './memory/memory-info';\r\nimport { getNativeModuleStatus } from './nativeModuleClient';\r\n\r\n// OptimizationLevel 상수 값 정의 (AppOptimizationLevel 타입을 값으로 대체)\r\nconst OPTIMIZATION_LEVEL = {\r\n  NORMAL: 0,\r\n  LOW: 1,\r\n  MEDIUM: 2,\r\n  HIGH: 3,\r\n  EXTREME: 4\r\n} as const;\r\n\r\n// 성능 측정 결과 인터페이스\r\nexport interface PerformanceResult {\r\n  operationName: string;\r\n  nativeImplementation: {\r\n    executionTime: number;\r\n    success: boolean;\r\n    error?: string;\r\n  };\r\n  jsImplementation: {\r\n    executionTime: number;\r\n    success: boolean;\r\n    error?: string;\r\n  };\r\n  speedupFactor: number;\r\n  timestamp: number;\r\n  memoryBefore: any;\r\n  memoryAfter: any;\r\n  memoryDifference: number;\r\n}\r\n\r\n// 성능 측정 이력\r\nconst performanceHistory: PerformanceResult[] = [];\r\n\r\n/**\r\n * 메모리 최적화 성능 비교 실행\r\n * @param level 최적화 레벨\r\n * @param emergency 긴급 모드 여부\r\n * @returns Promise<PerformanceResult> 성능 측정 결과\r\n */\r\nexport async function benchmarkMemoryOptimization(\r\n  level: number = OPTIMIZATION_LEVEL.MEDIUM,\r\n  emergency: boolean = false\r\n): Promise<PerformanceResult> {\r\n  // 초기 메모리 상태 기록\r\n  const memoryBefore = await getMemoryInfo() || { heapUsedMB: 0 };\r\n  \r\n  // 네이티브 구현 테스트\r\n  let nativeResult = {\r\n    executionTime: 0,\r\n    success: false,\r\n    error: undefined as string | undefined\r\n  };\r\n  \r\n  // 네이티브 모듈 사용 가능 여부 확인\r\n  const { available } = await getNativeModuleStatus();\r\n  \r\n  if (available) {\r\n    try {\r\n      const nativeStartTime = performance.now();\r\n      const nativeLevel = toNativeOptimizationLevel(level as unknown as OptimizationLevel);\r\n      await requestNativeMemoryOptimization(nativeLevel, emergency);\r\n      const nativeEndTime = performance.now();\r\n      \r\n      nativeResult = {\r\n        executionTime: nativeEndTime - nativeStartTime,\r\n        success: true,\r\n        error: undefined\r\n      };\r\n    } catch (error) {\r\n      nativeResult.error = error instanceof Error ? error.message : '알 수 없는 오류';\r\n    }\r\n  } else {\r\n    nativeResult.error = '네이티브 모듈을 사용할 수 없음';\r\n  }\r\n  \r\n  // 자바스크립트 구현 테스트\r\n  let jsResult = {\r\n    executionTime: 0,\r\n    success: false,\r\n    error: undefined as string | undefined\r\n  };\r\n  \r\n  try {\r\n    const jsStartTime = performance.now();\r\n    await internalOptimizeMemory(emergency);\r\n    const jsEndTime = performance.now();\r\n    \r\n    jsResult = {\r\n      executionTime: jsEndTime - jsStartTime,\r\n      success: true,\r\n      error: undefined\r\n    };\r\n  } catch (error) {\r\n    jsResult.error = error instanceof Error ? error.message : '알 수 없는 오류';\r\n  }\r\n  \r\n  // 최종 메모리 상태 기록\r\n  const memoryAfter = await getMemoryInfo() || { heapUsedMB: 0 };\r\n  const _freedMB = (memoryBefore.heapUsedMB ?? 0) - (memoryAfter.heapUsedMB ?? 0); // 사용하지 않는 변수 앞에 _ 추가\r\n  \r\n  // 성능 비교 결과 계산\r\n  const speedupFactor = jsResult.success && nativeResult.success && nativeResult.executionTime > 0\r\n    ? jsResult.executionTime / nativeResult.executionTime\r\n    : 0;\r\n  \r\n  // 메모리 차이 계산 (MB 단위)\r\n  const memoryDifference = (memoryBefore?.heapUsedMB ?? 0) - (memoryAfter?.heapUsedMB ?? 0);\r\n  \r\n  // 결과 객체 생성\r\n  const result: PerformanceResult = {\r\n    operationName: `Memory Optimization (Level ${level}, Emergency: ${emergency})`,\r\n    nativeImplementation: nativeResult,\r\n    jsImplementation: jsResult,\r\n    speedupFactor,\r\n    timestamp: Date.now(),\r\n    memoryBefore,\r\n    memoryAfter,\r\n    memoryDifference\r\n  };\r\n  \r\n  // 이력에 추가\r\n  performanceHistory.push(result);\r\n  if (performanceHistory.length > 50) {\r\n    performanceHistory.shift(); // 최대 50개 항목 유지\r\n  }\r\n  \r\n  // 결과 로깅\r\n  logPerformanceResult(result);\r\n  \r\n  return result;\r\n}\r\n\r\n/**\r\n * 성능 측정 결과 로깅\r\n * @param result 성능 측정 결과\r\n */\r\nfunction logPerformanceResult(result: PerformanceResult): void {\r\n  console.group('🔍 성능 비교 결과');\r\n  console.log(`작업: ${result.operationName}`);\r\n  console.log(`시간: ${new Date(result.timestamp).toLocaleTimeString()}`);\r\n  \r\n  console.group('⚙️ 네이티브 구현');\r\n  console.log(`실행 시간: ${result.nativeImplementation.executionTime.toFixed(2)}ms`);\r\n  console.log(`성공 여부: ${result.nativeImplementation.success ? '✅' : '❌'}`);\r\n  if (result.nativeImplementation.error) {\r\n    console.error(`오류: ${result.nativeImplementation.error}`);\r\n  }\r\n  console.groupEnd();\r\n  \r\n  console.group('🔧 JavaScript 구현');\r\n  console.log(`실행 시간: ${result.jsImplementation.executionTime.toFixed(2)}ms`);\r\n  console.log(`성공 여부: ${result.jsImplementation.success ? '✅' : '❌'}`);\r\n  if (result.jsImplementation.error) {\r\n    console.error(`오류: ${result.jsImplementation.error}`);\r\n  }\r\n  console.groupEnd();\r\n  \r\n  if (result.speedupFactor > 0) {\r\n    console.log(`⚡ 속도 향상: ${result.speedupFactor.toFixed(2)}x ${result.speedupFactor > 1 ? '(네이티브가 더 빠름)' : '(JS가 더 빠름)'}`);\r\n  }\r\n  \r\n  console.log(`💾 메모리 차이: ${result.memoryDifference.toFixed(2)}MB ${result.memoryDifference > 0 ? '감소' : '증가'}`);\r\n  console.groupEnd();\r\n}\r\n\r\n/**\r\n * 성능 측정 이력 가져오기\r\n * @returns 성능 측정 이력 배열\r\n */\r\nexport function getPerformanceHistory(): PerformanceResult[] {\r\n  return [...performanceHistory];\r\n}\r\n\r\n// optimizeMemory 함수 추가 (실제로는 requestNativeMemoryOptimization을 래핑)\r\nasync function optimizeMemory(level: number, emergency: boolean = false): Promise<void> {\r\n  await requestNativeMemoryOptimization(level as unknown as number, emergency);\r\n}\r\n\r\n/**\r\n * 메모리 최적화 작업에 대한 벤치마크 실행\r\n * 모든 최적화 레벨에 대해 성능 측정을 실행합니다.\r\n */\r\nexport async function runComprehensiveBenchmark(): Promise<PerformanceResult[]> {\r\n  const results: PerformanceResult[] = [];\r\n  \r\n  // 모든 최적화 레벨에 대해 테스트\r\n  const optimizationLevel = 2; // 중간 레벨 사용\r\n  for (let level = 0; level <= 4; level++) {\r\n    results.push(await benchmarkMemoryOptimization(level, false));\r\n    // 테스트 간 간격을 두어 이전 테스트의 영향 최소화\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  }\r\n  \r\n  // 긴급 모드 테스트\r\n  await optimizeMemory(optimizationLevel);\r\n  results.push(await benchmarkMemoryOptimization(OPTIMIZATION_LEVEL.EXTREME, true));\r\n  \r\n  // 종합 결과 로깅\r\n  console.group('📊 종합 벤치마크 결과');\r\n  console.log(`총 ${results.length}개 테스트 실행됨`);\r\n  \r\n  const avgSpeedup = results.reduce((sum, r) => sum + r.speedupFactor, 0) / results.length;\r\n  console.log(`평균 속도 향상: ${avgSpeedup.toFixed(2)}x`);\r\n  \r\n  console.log(`최고 속도 향상: ${Math.max(...results.map(r => r.speedupFactor)).toFixed(2)}x`);\r\n  console.log(`총 해제된 메모리: ${results.reduce((sum, r) => sum + r.memoryDifference, 0).toFixed(2)}MB`);\r\n  console.groupEnd();\r\n  \r\n  return results;\r\n}\r\n\r\n/**\r\n * 두 가지 최적화 레벨을 맵핑하는 유틸리티\r\n */\r\nexport function convertOptimizationLevel(level: number): number {\r\n  const _appOptimizationLevel = 2; // 사용하지 않는 변수 앞에 _ 추가\r\n  // someFunction 제거\r\n  return level;\r\n}\r\n","/**\r\n * 메모리 사용량 로깅 및 분석 유틸리티\r\n * \r\n * 장기적인 메모리 사용 패턴 분석과 최적화 전략 수립에 필요한\r\n * 데이터를 수집하고 저장합니다.\r\n */\r\n\r\nimport { getMemoryInfo } from '../memory-management';\r\nimport { getPerformanceHistory } from '../performance-metrics';\r\nimport { normalizeMemoryInfo } from './format-utils';\r\n// MemoryEventType을 src/types에서 가져오는 대신 enum-converters에서 가져옴\r\nimport { MemoryEventType } from '../enum-converters';\r\nimport { MemoryInfo } from '@/types';\r\n\r\n/**\r\n * 메모리 로거 모듈\r\n * \r\n * 메모리 사용량 및 관련 이벤트를 로깅하기 위한 유틸리티\r\n */\r\n\r\n// 로그 레벨 정의\r\nexport enum LogLevel {\r\n  DEBUG = 0,\r\n  INFO = 1,\r\n  WARN = 2,\r\n  ERROR = 3\r\n}\r\n\r\n// 로그 항목 인터페이스\r\nexport interface LogEntry {\r\n  timestamp: number;\r\n  level: LogLevel;\r\n  message: string;\r\n  data?: Record<string, unknown>;\r\n}\r\n\r\n// 로그 설정 인터페이스\r\nexport interface LoggerOptions {\r\n  minLevel?: LogLevel;\r\n  maxLogs?: number;\r\n  printToConsole?: boolean;\r\n  moduleName?: string;\r\n}\r\n\r\n// 기본 로거 옵션\r\nconst DEFAULT_OPTIONS: LoggerOptions = {\r\n  minLevel: LogLevel.INFO,\r\n  maxLogs: 100,\r\n  printToConsole: true,\r\n  moduleName: 'memory'\r\n};\r\n\r\n/**\r\n * 메모리 로거 클래스\r\n */\r\nexport class MemoryLogger {\r\n  private logs: LogEntry[] = [];\r\n  private options: LoggerOptions;\r\n\r\n  constructor(options: LoggerOptions = {}) {\r\n    this.options = { ...DEFAULT_OPTIONS, ...options };\r\n  }\r\n\r\n  /**\r\n   * 로그 기록\r\n   * @param level 로그 레벨\r\n   * @param message 메시지\r\n   * @param data 추가 데이터\r\n   */\r\n  private log(level: LogLevel, message: string, data?: Record<string, unknown>): void {\r\n    // 설정된 최소 레벨보다 낮은 로그는 무시\r\n    if (level < this.options.minLevel!) {\r\n      return;\r\n    }\r\n\r\n    // 로그 항목 생성\r\n    const entry: LogEntry = {\r\n      timestamp: Date.now(),\r\n      level,\r\n      message,\r\n      data\r\n    };\r\n\r\n    // 로그 배열에 추가\r\n    this.logs.push(entry);\r\n\r\n    // 로그 개수 제한\r\n    if (this.logs.length > this.options.maxLogs!) {\r\n      this.logs.shift();\r\n    }\r\n\r\n    // 콘솔 출력 (설정된 경우)\r\n    if (this.options.printToConsole) {\r\n      this.printToConsole(entry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 콘솔에 로그 출력\r\n   * @param entry 로그 항목\r\n   */\r\n  private printToConsole(entry: LogEntry): void {\r\n    const timestamp = new Date(entry.timestamp).toISOString();\r\n    const prefix = this.options.moduleName ? `[${this.options.moduleName}]` : '';\r\n\r\n    switch (entry.level) {\r\n      case LogLevel.DEBUG:\r\n        console.debug(`${timestamp} ${prefix} ${entry.message}`, entry.data);\r\n        break;\r\n      case LogLevel.INFO:\r\n        console.info(`${timestamp} ${prefix} ${entry.message}`, entry.data);\r\n        break;\r\n      case LogLevel.WARN:\r\n        console.warn(`${timestamp} ${prefix} ${entry.message}`, entry.data);\r\n        break;\r\n      case LogLevel.ERROR:\r\n        console.error(`${timestamp} ${prefix} ${entry.message}`, entry.data);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 디버그 로그 기록\r\n   * @param message 메시지\r\n   * @param data 추가 데이터\r\n   */\r\n  debug(message: string, data?: Record<string, unknown>): void {\r\n    this.log(LogLevel.DEBUG, message, data);\r\n  }\r\n\r\n  /**\r\n   * 정보 로그 기록\r\n   * @param message 메시지\r\n   * @param data 추가 데이터\r\n   */\r\n  info(message: string, data?: Record<string, unknown>): void {\r\n    this.log(LogLevel.INFO, message, data);\r\n  }\r\n\r\n  /**\r\n   * 경고 로그 기록\r\n   * @param message 메시지\r\n   * @param data 추가 데이터\r\n   */\r\n  warn(message: string, data?: Record<string, unknown>): void {\r\n    this.log(LogLevel.WARN, message, data);\r\n  }\r\n\r\n  /**\r\n   * 오류 로그 기록\r\n   * @param message 메시지\r\n   * @param data 추가 데이터\r\n   */\r\n  error(message: string, data?: Record<string, unknown>): void {\r\n    this.log(LogLevel.ERROR, message, data);\r\n  }\r\n\r\n  /**\r\n   * 모든 로그 가져오기\r\n   */\r\n  getLogs(): LogEntry[] {\r\n    return [...this.logs];\r\n  }\r\n\r\n  /**\r\n   * 특정 레벨 이상의 로그만 가져오기\r\n   * @param level 최소 로그 레벨\r\n   */\r\n  getLogsByLevel(level: LogLevel): LogEntry[] {\r\n    return this.logs.filter(entry => entry.level >= level);\r\n  }\r\n\r\n  /**\r\n   * 오류 로그만 가져오기\r\n   */\r\n  getErrorLogs(): LogEntry[] {\r\n    return this.logs.filter(entry => entry.level === LogLevel.ERROR);\r\n  }\r\n}\r\n\r\n// 기본 로거 인스턴스\r\nexport const memoryLogger = new MemoryLogger();\r\nexport const logger = memoryLogger; // 편의를 위한 별칭\r\n\r\n// 편의성을 위한 기본 함수 내보내기\r\nexport const debug = memoryLogger.debug.bind(memoryLogger);\r\nexport const info = memoryLogger.info.bind(memoryLogger);\r\nexport const warn = memoryLogger.warn.bind(memoryLogger);\r\nexport const error = memoryLogger.error.bind(memoryLogger);\r\n\r\n// 메모리 로그 엔트리 인터페이스\r\nexport interface MemoryLogEntry {\r\n  timestamp: number;\r\n  info: MemoryInfo;\r\n  eventType: MemoryEventType;\r\n  eventDescription?: string;\r\n  componentId?: string;\r\n  route?: string;\r\n}\r\n\r\n// 메모리 사용 통계 인터페이스\r\nexport interface MemoryUsageStats {\r\n  averageUsage: number;\r\n  peakUsage: number;\r\n  minUsage: number;\r\n  lastUsage: number;\r\n  usageOverTime: Array<{ timestamp: number; usageMB: number }>;\r\n  optimizationEvents: Array<{ timestamp: number; freedMemory: number }>;\r\n  gcEvents: Array<{ timestamp: number; freedMemory: number }>;\r\n  leakSuspects: Array<{ componentId: string; frequency: number }>;\r\n}\r\n\r\n// 누락된 변수와 상수 정의 추가\r\nconst memoryLogs: MemoryLogEntry[] = [];\r\nconst MAX_LOG_ENTRIES = 1000;\r\nconst MEMORY_LOG_DB = 'memory_log_db';\r\nconst INDEXEDDB_STORE = 'memory_logs';\r\n\r\n/**\r\n * 메모리 사용량 로깅\r\n * @param eventType 이벤트 타입\r\n * @param eventDescription 이벤트 설명 (선택)\r\n * @param componentId 컴포넌트 ID (선택)\r\n * @param route 현재 라우트 (선택)\r\n */\r\nexport async function logMemoryUsage(\r\n  eventType: MemoryEventType,\r\n  eventDescription?: string,\r\n  componentId?: string,\r\n  route?: string\r\n): Promise<MemoryLogEntry> {\r\n  // 현재 메모리 정보 가져오기\r\n  const rawMemoryInfo = await getMemoryInfo() || {\r\n    heap_used: 0,\r\n    heap_total: 0,\r\n    heap_used_mb: 0,\r\n    heapUsed: 0,\r\n    heapTotal: 0,\r\n    heapUsedMB: 0,\r\n    rss: 0,\r\n    rss_mb: 0,\r\n    rssMB: 0,\r\n    percent_used: 0,\r\n    percentUsed: 0,\r\n    timestamp: Date.now()\r\n  };\r\n\r\n  // 표준화된 MemoryInfo 인터페이스로 변환\r\n  const standardizedInfo = normalizeMemoryInfo(rawMemoryInfo as any);\r\n\r\n  // 현재 라우트 가져오기 (route 매개변수가 없는 경우)\r\n  if (!route && typeof window !== 'undefined') {\r\n    route = window.location.pathname;\r\n  }\r\n\r\n  // 로그 항목 생성\r\n  const logEntry: MemoryLogEntry = {\r\n    timestamp: Date.now(),\r\n    info: standardizedInfo,\r\n    eventType,\r\n    eventDescription,\r\n    componentId,\r\n    route\r\n  };\r\n\r\n  // 인메모리 로그에 추가\r\n  memoryLogs.push(logEntry);\r\n\r\n  // 최대 개수 제한\r\n  if (memoryLogs.length > MAX_LOG_ENTRIES) {\r\n    memoryLogs.shift();\r\n  }\r\n\r\n  // IndexedDB에 저장 (백그라운드로 실행)\r\n  saveLogToIndexedDB(logEntry).catch(err =>\r\n    console.error('메모리 로그 저장 중 오류:', err)\r\n  );\r\n\r\n  return logEntry;\r\n}\r\n\r\n/**\r\n * 주기적인 메모리 모니터링 시작\r\n * @param intervalMs 체크 간격 (밀리초)\r\n * @returns 모니터링 중지 함수\r\n */\r\nexport function startMemoryMonitoring(intervalMs: number = 60000): () => void {\r\n  const intervalId = setInterval(() => {\r\n    logMemoryUsage(MemoryEventType.PERIODIC_CHECK);\r\n  }, intervalMs);\r\n\r\n  return () => clearInterval(intervalId);\r\n}\r\n\r\n/**\r\n * IndexedDB에 로그 저장\r\n * @param logEntry 로그 항목\r\n */\r\nasync function saveLogToIndexedDB(logEntry: MemoryLogEntry): Promise<void> {\r\n  return new Promise((resolve, reject) => {\r\n    // IndexedDB가 사용 가능한지 확인\r\n    if (!window.indexedDB) {\r\n      reject(new Error('IndexedDB를 지원하지 않는 브라우저입니다'));\r\n      return;\r\n    }\r\n\r\n    // 데이터베이스 열기\r\n    const request = window.indexedDB.open(MEMORY_LOG_DB, 1);\r\n\r\n    // 데이터베이스 생성/업그레이드 이벤트\r\n    request.onupgradeneeded = (event) => {\r\n      const db = (event.target as IDBOpenDBRequest).result;\r\n\r\n      // 객체 저장소가 없으면 생성\r\n      if (!db.objectStoreNames.contains(INDEXEDDB_STORE)) {\r\n        db.createObjectStore(INDEXEDDB_STORE, { keyPath: 'timestamp' });\r\n      }\r\n    };\r\n\r\n    // 오류 처리\r\n    request.onerror = (event) => {\r\n      reject(new Error(`IndexedDB 오류: ${(event.target as IDBOpenDBRequest).error}`));\r\n    };\r\n\r\n    // 성공 처리\r\n    request.onsuccess = (event) => {\r\n      const db = (event.target as IDBOpenDBRequest).result;\r\n\r\n      try {\r\n        // 트랜잭션 시작\r\n        const transaction = db.transaction([INDEXEDDB_STORE], 'readwrite');\r\n        const store = transaction.objectStore(INDEXEDDB_STORE);\r\n\r\n        // 로그 항목 저장\r\n        const addRequest = store.add(logEntry);\r\n\r\n        addRequest.onsuccess = () => {\r\n          resolve();\r\n        };\r\n\r\n        addRequest.onerror = () => {\r\n          reject(new Error(`로그 항목 저장 실패: ${addRequest.error}`));\r\n        };\r\n\r\n        // 트랜잭션 완료 이벤트\r\n        transaction.oncomplete = () => {\r\n          db.close();\r\n        };\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * 저장된 메모리 로그 가져오기\r\n * @param limit 가져올 최대 항목 수\r\n * @param startTime 시작 시간 (밀리초)\r\n * @param endTime 종료 시간 (밀리초)\r\n * @param eventTypes 필터링할 이벤트 타입 배열\r\n * @returns 로그 항목 배열\r\n */\r\nexport async function getMemoryLogs(\r\n  limit: number = 100,\r\n  startTime?: number,\r\n  endTime?: number,\r\n  eventTypes?: MemoryEventType[]\r\n): Promise<MemoryLogEntry[]> {\r\n  // 시간 기준 필터링\r\n  const _now = Date.now(); // 사용하지 않는 변수에 _ 추가\r\n  const filteredByTime = memoryLogs.filter((log: MemoryLogEntry) => {\r\n    if (startTime && log.timestamp < startTime) return false;\r\n    if (endTime && log.timestamp > endTime) return false;\r\n    return true;\r\n  });\r\n\r\n  // 이벤트 타입 기준 필터링\r\n  const filtered = eventTypes\r\n    ? filteredByTime.filter((log: MemoryLogEntry) => eventTypes.includes(log.eventType as MemoryEventType))\r\n    : filteredByTime;\r\n\r\n  // 최신 순으로 정렬하고 제한된 개수 반환\r\n  return filtered\r\n    .sort((a: MemoryLogEntry, b: MemoryLogEntry) => b.timestamp - a.timestamp)\r\n    .slice(0, limit);\r\n}\r\n\r\n/**\r\n * 메모리 사용 통계 분석\r\n * @param startTime 시작 시간 (밀리초)\r\n * @param endTime 종료 시간 (밀리초)\r\n * @returns 메모리 사용 통계\r\n */\r\nexport async function analyzeMemoryUsage(\r\n  startTime: number = Date.now() - 24 * 60 * 60 * 1000, // 기본: 24시간\r\n  endTime: number = Date.now()\r\n): Promise<MemoryUsageStats> {\r\n  // 지정된 기간의 로그 가져오기\r\n  const logs = await getMemoryLogs(1000, startTime, endTime);\r\n\r\n  if (logs.length === 0) {\r\n    throw new Error('분석할 메모리 로그가 없습니다');\r\n  }\r\n\r\n  // 기본 통계 계산\r\n  const usages = logs.map(log => log.info.heap_used_mb || 0);\r\n  const avgUsage = usages.reduce((sum, usage) => sum + usage, 0) / usages.length;\r\n  const peakUsage = Math.max(...usages);\r\n  const minUsage = Math.min(...usages);\r\n  const lastUsage = usages[0]; // 최신 로그가 첫 번째\r\n\r\n  // 시간별 사용량\r\n  const usageOverTime = logs.map(log => ({\r\n    timestamp: log.timestamp,\r\n    usageMB: log.info.heap_used_mb || 0\r\n  })).sort((a, b) => a.timestamp - b.timestamp);\r\n\r\n  // 최적화 이벤트 추출\r\n  const optimizationEvents = logs\r\n    .filter(log => log.eventType === MemoryEventType.OPTIMIZATION)\r\n    .map(log => {\r\n      // 최적화 전후 메모리 차이 계산 (이전 로그와 비교)\r\n      const index = logs.indexOf(log);\r\n      const prevLog = logs[index + 1]; // 역순 정렬이므로 다음 인덱스가 이전 로그\r\n      const freedMemory = prevLog\r\n        ? (prevLog.info.heap_used_mb || 0) - (log.info.heap_used_mb || 0)\r\n        : 0;\r\n\r\n      return {\r\n        timestamp: log.timestamp,\r\n        freedMemory: Math.max(0, freedMemory) // 음수인 경우 0으로 처리\r\n      };\r\n    });\r\n\r\n  // GC 이벤트 추출\r\n  const gcEvents = logs\r\n    .filter(log => log.eventType === MemoryEventType.GARBAGE_COLLECTION)\r\n    .map(log => {\r\n      // GC 전후 메모리 차이 계산\r\n      const index = logs.indexOf(log);\r\n      const prevLog = logs[index + 1];\r\n      const freedMemory = prevLog\r\n        ? (prevLog.info.heap_used_mb || 0) - (log.info.heap_used_mb || 0)\r\n        : 0;\r\n\r\n      return {\r\n        timestamp: log.timestamp,\r\n        freedMemory: Math.max(0, freedMemory)\r\n      };\r\n    });\r\n\r\n  // 메모리 누수 의심 컴포넌트 분석\r\n  const componentMounts = logs.filter(log =>\r\n    log.eventType === MemoryEventType.COMPONENT_MOUNT && log.componentId\r\n  );\r\n\r\n  const componentCounts: Record<string, number> = {};\r\n  for (const log of componentMounts) {\r\n    const id = log.componentId!;\r\n    componentCounts[id] = (componentCounts[id] || 0) + 1;\r\n  }\r\n\r\n  // 누수 의심 컴포넌트 (상위 10개)\r\n  const leakSuspects = Object.entries(componentCounts)\r\n    .map(([componentId, frequency]) => ({ componentId, frequency }))\r\n    .sort((a, b) => b.frequency - a.frequency)\r\n    .slice(0, 10);\r\n\r\n  return {\r\n    averageUsage: avgUsage,\r\n    peakUsage,\r\n    minUsage,\r\n    lastUsage,\r\n    usageOverTime,\r\n    optimizationEvents,\r\n    gcEvents,\r\n    leakSuspects\r\n  };\r\n}\r\n\r\n/**\r\n * 메모리 로그 내보내기 (JSON)\r\n * @returns JSON 문자열\r\n */\r\nexport async function exportMemoryLogs(): Promise<string> {\r\n  const logs = await getMemoryLogs(MAX_LOG_ENTRIES);\r\n  const performanceData = getPerformanceHistory();\r\n\r\n  const exportData = {\r\n    logs,\r\n    performanceHistory: performanceData,\r\n    exportTimestamp: Date.now(),\r\n    appVersion: '1.0.0', // 앱 버전\r\n    systemInfo: {\r\n      userAgent: navigator.userAgent,\r\n      platform: navigator.platform,\r\n      language: navigator.language\r\n    }\r\n  };\r\n\r\n  return JSON.stringify(exportData, null, 2);\r\n}\r\n\r\n/**\r\n * 메모리 자동 로그 설정\r\n * 주요 이벤트에 대한 메모리 로깅을 자동화합니다.\r\n */\r\nexport function setupAutomaticMemoryLogging(): () => void {\r\n  const cleanupFunctions: Array<() => void> = [];\r\n\r\n  // 주기적 모니터링 시작\r\n  const stopMonitoring = startMemoryMonitoring(60000); // 1분마다\r\n  cleanupFunctions.push(stopMonitoring);\r\n\r\n  // 페이지 탐색 추적\r\n  if (typeof window !== 'undefined') {\r\n    // 페이지 로드 시\r\n    const handleLoad = () => {\r\n      logMemoryUsage(MemoryEventType.PAGE_NAVIGATION, 'Page loaded');\r\n    };\r\n    window.addEventListener('load', handleLoad);\r\n    cleanupFunctions.push(() => window.removeEventListener('load', handleLoad));\r\n\r\n    // 페이지 언로드 시\r\n    const handleBeforeUnload = () => {\r\n      logMemoryUsage(MemoryEventType.PAGE_NAVIGATION, 'Page unloaded');\r\n    };\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n    cleanupFunctions.push(() => window.removeEventListener('beforeunload', handleBeforeUnload));\r\n\r\n    // 가시성 변경 시\r\n    const handleVisibilityChange = () => {\r\n      logMemoryUsage(\r\n        MemoryEventType.PAGE_NAVIGATION,\r\n        `Visibility changed: ${document.visibilityState}`\r\n      );\r\n    };\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    cleanupFunctions.push(() => document.removeEventListener('visibilitychange', handleVisibilityChange));\r\n  }\r\n\r\n  // 모든 정리 함수를 호출하는 함수 반환\r\n  return () => {\r\n    cleanupFunctions.forEach(cleanup => cleanup());\r\n  };\r\n}\r\n","/**\r\n * 로그 저장 및 관리 유틸리티\r\n * \r\n * 애플리케이션 내의 대화 로그와 에러 로그를 저장하고 관리하는 기능 제공\r\n */\r\n\r\nimport { formatBytes, getCurrentTimestamp } from './common-utils';\r\nimport { logger } from './memory/logger';\r\n\r\n/**\r\n * 로그 타입 정의\r\n */\r\nexport enum LogType {\r\n  CONVERSATION = 'conversation', // 사용자와 AI 간 대화 로그\r\n  ERROR = 'error',               // 에러 로그\r\n  PERFORMANCE = 'performance',   // 성능 관련 로그\r\n  MEMORY = 'memory',             // 메모리 관련 로그\r\n  SYSTEM = 'system'              // 시스템 관련 로그\r\n}\r\n\r\n/**\r\n * 로그 데이터 인터페이스\r\n */\r\nexport interface LogEntry {\r\n  id?: string;           // 로그 고유 ID (저장 시 자동 생성)\r\n  type: LogType;         // 로그 타입\r\n  timestamp: number;     // 로그 생성 시간 (밀리초 타임스탬프)\r\n  content: string;       // 로그 내용\r\n  metadata?: any;        // 추가 메타데이터 (JSON 직렬화 가능한 객체)\r\n  tags?: string[];       // 로그 태그 (검색 및 필터링용)\r\n  sessionId?: string;    // 세션 ID\r\n\r\n  // 로깅 유틸리티용 추가 필드\r\n  level?: LogLevel;      // 로그 레벨\r\n  message?: string;      // 로그 메시지\r\n  data?: Record<string, unknown>; // 로그 데이터\r\n}\r\n\r\n/**\r\n * 로그 검색 옵션 인터페이스\r\n */\r\nexport interface LogSearchOptions {\r\n  type?: LogType | LogType[];    // 검색할 로그 타입\r\n  startTime?: number;            // 검색 시작 시간\r\n  endTime?: number;              // 검색 종료 시간\r\n  tags?: string[];               // 검색할 태그\r\n  query?: string;                // 검색 쿼리 (로그 내용에서 검색)\r\n  limit?: number;                // 검색 결과 제한\r\n  offset?: number;               // 검색 결과 오프셋\r\n  sessionId?: string;            // 세션 ID로 검색\r\n}\r\n\r\n/**\r\n * 안전하게 Record<string, unknown> 타입으로 변환하는 유틸리티 함수\r\n */\r\nfunction toSafeRecord(data: unknown): Record<string, unknown> | undefined {\r\n  if (data === undefined) return undefined;\r\n  if (data === null) return {};\r\n\r\n  if (typeof data === 'object') {\r\n    return data as Record<string, unknown>;\r\n  }\r\n\r\n  return { value: data };\r\n}\r\n\r\n/**\r\n * 로그를 저장합니다.\r\n * \r\n * @param logEntry - 저장할 로그 데이터\r\n * @returns 저장된 로그 엔트리 (ID 포함)\r\n */\r\nexport async function saveLog(logEntry: Omit<LogEntry, 'id'>): Promise<LogEntry> {\r\n  try {\r\n    // 로그 ID 생성 (타임스탬프 + 랜덤 문자열)\r\n    const id = `${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;\r\n\r\n    const log: LogEntry = {\r\n      ...logEntry,\r\n      id,\r\n      timestamp: logEntry.timestamp || getCurrentTimestamp()\r\n    };\r\n\r\n    // 로그 API 엔드포인트로 저장 요청\r\n    const response = await fetch('/api/logs/save', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(log),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`로그 저장 실패: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n\r\n    logger.debug(`로그 저장 완료 (ID: ${id}, 타입: ${logEntry.type})`);\r\n    return result.data;\r\n  } catch (error) {\r\n    logger.error('로그 저장 중 오류 발생:', toSafeRecord(error));\r\n\r\n    // API 호출 실패시 로컬 스토리지에 임시 저장\r\n    try {\r\n      const storageKey = `log_${Date.now()}`;\r\n      localStorage.setItem(storageKey, JSON.stringify(logEntry));\r\n    } catch (storageError) {\r\n      logger.error('로그의 로컬 스토리지 백업 저장 실패:', toSafeRecord(storageError));\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 로그를 검색합니다.\r\n * \r\n * @param options - 검색 옵션\r\n * @returns 검색된 로그 엔트리 배열\r\n */\r\nexport async function searchLogs(options: LogSearchOptions = {}): Promise<LogEntry[]> {\r\n  try {\r\n    const queryParams = new URLSearchParams();\r\n\r\n    // 검색 옵션을 쿼리 파라미터로 변환\r\n    if (options.type) {\r\n      if (Array.isArray(options.type)) {\r\n        options.type.forEach(t => queryParams.append('type', t));\r\n      } else {\r\n        queryParams.set('type', options.type);\r\n      }\r\n    }\r\n\r\n    if (options.startTime) queryParams.set('startTime', options.startTime.toString());\r\n    if (options.endTime) queryParams.set('endTime', options.endTime.toString());\r\n    if (options.query) queryParams.set('query', options.query);\r\n    if (options.limit) queryParams.set('limit', options.limit.toString());\r\n    if (options.offset) queryParams.set('offset', options.offset.toString());\r\n    if (options.sessionId) queryParams.set('sessionId', options.sessionId);\r\n\r\n    if (options.tags && options.tags.length > 0) {\r\n      options.tags.forEach(tag => queryParams.append('tag', tag));\r\n    }\r\n\r\n    // 로그 검색 API 호출\r\n    const response = await fetch(`/api/logs/search?${queryParams.toString()}`);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`로그 검색 실패: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n\r\n    logger.debug(`로그 검색 완료 (결과 수: ${result.data.length})`);\r\n    return result.data;\r\n  } catch (error) {\r\n    logger.error('로그 검색 중 오류 발생:', toSafeRecord(error));\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 대화 로그를 저장합니다.\r\n * \r\n * @param userMessage - 사용자 메시지\r\n * @param aiResponse - AI 응답\r\n * @param metadata - 추가 메타데이터\r\n * @returns 저장된 로그 엔트리\r\n */\r\nexport async function saveConversationLog(\r\n  userMessage: string,\r\n  aiResponse: string,\r\n  metadata: any = {}\r\n): Promise<LogEntry> {\r\n  const now = getCurrentTimestamp();\r\n  const sessionId = metadata.sessionId || localStorage.getItem('sessionId') || `session_${now}`;\r\n\r\n  // 세션 ID가 없으면 새로 생성하고 저장\r\n  if (!localStorage.getItem('sessionId')) {\r\n    localStorage.setItem('sessionId', sessionId);\r\n  }\r\n\r\n  const logEntry: Omit<LogEntry, 'id'> = {\r\n    type: LogType.CONVERSATION,\r\n    timestamp: now,\r\n    content: JSON.stringify({\r\n      userMessage,\r\n      aiResponse,\r\n      timestamp: now\r\n    }),\r\n    metadata: {\r\n      ...metadata,\r\n      messageSize: {\r\n        user: new Blob([userMessage]).size,\r\n        ai: new Blob([aiResponse]).size\r\n      },\r\n      messageSizeFormatted: {\r\n        user: formatBytes(new Blob([userMessage]).size),\r\n        ai: formatBytes(new Blob([aiResponse]).size)\r\n      }\r\n    },\r\n    tags: ['conversation', 'ai', ...(metadata.tags || [])],\r\n    sessionId\r\n  };\r\n\r\n  return saveLog(logEntry);\r\n}\r\n\r\n/**\r\n * 에러 로그를 저장합니다.\r\n * \r\n * @param error - 에러 객체 또는 에러 메시지\r\n * @param metadata - 추가 메타데이터\r\n * @returns 저장된 로그 엔트리\r\n */\r\nexport async function saveErrorLog(\r\n  error: Error | string,\r\n  metadata: any = {}\r\n): Promise<LogEntry> {\r\n  const errorMessage = error instanceof Error ? error.message : error;\r\n  const errorStack = error instanceof Error ? error.stack : undefined;\r\n\r\n  const logEntry: Omit<LogEntry, 'id'> = {\r\n    type: LogType.ERROR,\r\n    timestamp: getCurrentTimestamp(),\r\n    content: errorMessage,\r\n    metadata: {\r\n      ...metadata,\r\n      stack: errorStack,\r\n      browserInfo: typeof navigator !== 'undefined' ? {\r\n        userAgent: navigator.userAgent,\r\n        platform: navigator.platform,\r\n        language: navigator.language\r\n      } : undefined\r\n    },\r\n    tags: ['error', ...(metadata.tags || [])],\r\n    sessionId: metadata.sessionId || localStorage.getItem('sessionId')\r\n  };\r\n\r\n  return saveLog(logEntry);\r\n}\r\n\r\n/**\r\n * 메모리 로그를 저장합니다.\r\n * \r\n * @param memoryInfo - 메모리 정보\r\n * @returns 저장된 로그 엔트리\r\n */\r\nexport async function saveMemoryLog(memoryInfo: any): Promise<LogEntry> {\r\n  const logEntry: Omit<LogEntry, 'id'> = {\r\n    type: LogType.MEMORY,\r\n    timestamp: getCurrentTimestamp(),\r\n    content: JSON.stringify(memoryInfo),\r\n    metadata: {\r\n      heapUsed: memoryInfo.heapUsed,\r\n      heapTotal: memoryInfo.heapTotal,\r\n      percentUsed: memoryInfo.percentUsed\r\n    },\r\n    tags: ['memory', 'performance'],\r\n    sessionId: localStorage.getItem('sessionId') || undefined\r\n  };\r\n\r\n  return saveLog(logEntry);\r\n}\r\n\r\n/**\r\n * 성능 로그를 저장합니다.\r\n * \r\n * @param metric - 성능 메트릭 이름\r\n * @param value - 성능 값\r\n * @param unit - 값의 단위 (ms, MB 등)\r\n * @param metadata - 추가 메타데이터\r\n * @returns 저장된 로그 엔트리\r\n */\r\nexport async function savePerformanceLog(\r\n  metric: string,\r\n  value: number,\r\n  unit: string = 'ms',\r\n  metadata: any = {}\r\n): Promise<LogEntry> {\r\n  const logEntry: Omit<LogEntry, 'id'> = {\r\n    type: LogType.PERFORMANCE,\r\n    timestamp: getCurrentTimestamp(),\r\n    content: `${metric}: ${value}${unit}`,\r\n    metadata: {\r\n      ...metadata,\r\n      metric,\r\n      value,\r\n      unit\r\n    },\r\n    tags: ['performance', metric, ...(metadata.tags || [])],\r\n    sessionId: localStorage.getItem('sessionId') || undefined\r\n  };\r\n\r\n  return saveLog(logEntry);\r\n}\r\n\r\n/**\r\n * 시스템 로그를 저장합니다.\r\n * \r\n * @param message - 시스템 메시지\r\n * @param metadata - 추가 메타데이터\r\n * @returns 저장된 로그 엔트리\r\n */\r\nexport async function saveSystemLog(\r\n  message: string,\r\n  metadata: any = {}\r\n): Promise<LogEntry> {\r\n  const logEntry: Omit<LogEntry, 'id'> = {\r\n    type: LogType.SYSTEM,\r\n    timestamp: getCurrentTimestamp(),\r\n    content: message,\r\n    metadata: {\r\n      ...metadata,\r\n      systemInfo: typeof navigator !== 'undefined' ? {\r\n        userAgent: navigator.userAgent,\r\n        language: navigator.language,\r\n        platform: navigator.platform\r\n      } : undefined\r\n    },\r\n    tags: ['system', ...(metadata.tags || [])],\r\n    sessionId: metadata.sessionId || localStorage.getItem('sessionId') || undefined\r\n  };\r\n\r\n  return saveLog(logEntry);\r\n}\r\n\r\n/**\r\n * 로컬 저장소의 로그를 모두 서버로 동기화합니다.\r\n */\r\nexport async function syncLocalLogs(): Promise<void> {\r\n  try {\r\n    // 로컬 스토리지에서 로그로 시작하는 키 모두 가져오기\r\n    const logKeys = Object.keys(localStorage).filter(key => key.startsWith('log_'));\r\n\r\n    if (logKeys.length === 0) {\r\n      logger.debug('동기화할 로컬 로그가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    logger.info(`${logKeys.length}개의 로컬 로그 동기화 시작`);\r\n\r\n    // 각 로그 동기화\r\n    for (const key of logKeys) {\r\n      try {\r\n        const logJson = localStorage.getItem(key);\r\n        if (!logJson) continue;\r\n\r\n        const log = JSON.parse(logJson);\r\n        await saveLog(log);\r\n\r\n        // 성공적으로 동기화된 로그는 로컬 스토리지에서 제거\r\n        localStorage.removeItem(key);\r\n      } catch (error) {\r\n        logger.error(`로그 동기화 중 오류 (${key}):`, toSafeRecord(error));\r\n      }\r\n    }\r\n\r\n    logger.info('로컬 로그 동기화 완료');\r\n  } catch (error) {\r\n    logger.error('로그 동기화 중 오류 발생:', toSafeRecord(error));\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 로깅 유틸리티\r\n */\r\n\r\nexport enum LogLevel {\r\n  Debug = 'debug',\r\n  Info = 'info',\r\n  Warn = 'warn',\r\n  Error = 'error',\r\n  Critical = 'critical'\r\n}\r\n\r\nexport function isDebugMode(): boolean {\r\n  return process.env.NODE_ENV === 'development' ||\r\n    (typeof localStorage !== 'undefined' && localStorage.getItem('debug_mode') === 'true');\r\n}\r\n\r\nexport function addLogEntry(entry: Omit<LogEntry, 'id'>): void {\r\n  try {\r\n    if (typeof localStorage === 'undefined') return;\r\n\r\n    const logEntry = {\r\n      ...entry,\r\n      id: Date.now().toString() + Math.random().toString(36).substr(2, 5)\r\n    };\r\n\r\n    const logsJson = localStorage.getItem('application_logs');\r\n    const logs = logsJson ? JSON.parse(logsJson) : [];\r\n\r\n    logs.push(logEntry);\r\n\r\n    if (logs.length > 1000) {\r\n      logs.splice(0, logs.length - 1000);\r\n    }\r\n\r\n    localStorage.setItem('application_logs', JSON.stringify(logs));\r\n  } catch (error) {\r\n    console.error('로그 항목 저장 실패:', error);\r\n  }\r\n}\r\n\r\nexport function logDebug(message: string, data?: unknown): void {\r\n  if (!isDebugMode()) return;\r\n\r\n  const safeData = toSafeRecord(data);\r\n\r\n  console.debug(`[Debug] ${message}`, safeData);\r\n\r\n  addLogEntry({\r\n    type: LogType.SYSTEM,\r\n    level: LogLevel.Debug,\r\n    message,\r\n    data: safeData,\r\n    timestamp: Date.now(),\r\n    sessionId: getCurrentSessionId(),\r\n    content: message\r\n  });\r\n}\r\n\r\nexport function logInfo(message: string, data?: unknown): void {\r\n  const safeData = toSafeRecord(data);\r\n\r\n  console.info(`[Info] ${message}`, safeData);\r\n\r\n  addLogEntry({\r\n    type: LogType.SYSTEM,\r\n    level: LogLevel.Info,\r\n    message,\r\n    data: safeData,\r\n    timestamp: Date.now(),\r\n    sessionId: getCurrentSessionId(),\r\n    content: message\r\n  });\r\n}\r\n\r\nexport function logWarn(message: string, data?: unknown): void {\r\n  const safeData = toSafeRecord(data);\r\n\r\n  console.warn(`[Warning] ${message}`, safeData);\r\n\r\n  addLogEntry({\r\n    type: LogType.SYSTEM,\r\n    level: LogLevel.Warn,\r\n    message,\r\n    data: safeData,\r\n    timestamp: Date.now(),\r\n    sessionId: getCurrentSessionId(),\r\n    content: message\r\n  });\r\n}\r\n\r\nexport function logError(message: string, data?: unknown): void {\r\n  const safeData = toSafeRecord(data);\r\n\r\n  console.error(`[Error] ${message}`, safeData);\r\n\r\n  addLogEntry({\r\n    type: LogType.ERROR,\r\n    level: LogLevel.Error,\r\n    message,\r\n    data: safeData,\r\n    timestamp: Date.now(),\r\n    sessionId: getCurrentSessionId(),\r\n    content: message\r\n  });\r\n}\r\n\r\nexport function logCritical(message: string, data?: unknown): void {\r\n  const safeData = toSafeRecord(data);\r\n\r\n  console.error(`[CRITICAL] ${message}`, safeData);\r\n\r\n  addLogEntry({\r\n    type: LogType.ERROR,\r\n    level: LogLevel.Critical,\r\n    message,\r\n    data: safeData,\r\n    timestamp: Date.now(),\r\n    sessionId: getCurrentSessionId(),\r\n    content: message\r\n  });\r\n}\r\n\r\nfunction getCurrentSessionId(): string | undefined {\r\n  if (typeof localStorage === 'undefined') return undefined;\r\n\r\n  const sessionId = localStorage.getItem('session_id');\r\n  return sessionId || undefined;\r\n}\r\n\r\nexport function createLogEntry(level: LogLevel, message: string, data?: unknown): Omit<LogEntry, 'id'> {\r\n  const safeData = toSafeRecord(data);\r\n\r\n  return {\r\n    type: level === LogLevel.Error || level === LogLevel.Critical ? LogType.ERROR : LogType.SYSTEM,\r\n    level,\r\n    message,\r\n    data: safeData,\r\n    timestamp: Date.now(),\r\n    sessionId: getCurrentSessionId(),\r\n    content: message\r\n  };\r\n}\r\n","/**\r\n * 로그 학습 및 최적화 유틸리티\r\n * \r\n * 로그 데이터를 분석하여 학습하고 애플리케이션을 최적화하는 기능 제공\r\n */\r\n\r\nimport { LogType, searchLogs } from './log-utils';\r\nimport { logger } from './memory/logger';\r\n\r\n/**\r\n * 인터페이스 정의\r\n */\r\ninterface WordFrequency {\r\n  [key: string]: number;\r\n}\r\n\r\ninterface HourlyActivity {\r\n  [hour: number]: number;\r\n}\r\n\r\ninterface SessionConversations {\r\n  [sessionId: string]: number;\r\n}\r\n\r\ninterface ErrorGroups {\r\n  [errorType: string]: {\r\n    count: number;\r\n    examples: Array<{ message: string; timestamp: number }>;\r\n    sessionIds: Set<string>;\r\n  };\r\n}\r\n\r\n/**\r\n * 학습 모델 타입 정의\r\n */\r\nexport enum LearningModelType {\r\n  MEMORY_OPTIMIZATION = 'memory_optimization',\r\n  ERROR_PREDICTION = 'error_prediction',\r\n  PERFORMANCE_OPTIMIZATION = 'performance_optimization',\r\n  USER_BEHAVIOR = 'user_behavior'\r\n}\r\n\r\n/**\r\n * 학습 결과 인터페이스\r\n */\r\nexport interface LearningResult {\r\n  modelType: LearningModelType;\r\n  timestamp: number;\r\n  insights: any[];\r\n  recommendations: string[];\r\n  metrics: { [key: string]: number };\r\n}\r\n\r\n/**\r\n * 메모리 최적화 학습 옵션\r\n */\r\nexport interface MemoryOptimizationOptions {\r\n  timeRange?: {\r\n    startTime?: number;\r\n    endTime?: number;\r\n  };\r\n  minSampleSize?: number;\r\n  sessionLimit?: number;\r\n}\r\n\r\n/**\r\n * 로그 데이터로부터 메모리 사용 패턴을 학습합니다.\r\n * \r\n * @param options - 메모리 최적화 학습 옵션\r\n * @returns 학습 결과\r\n */\r\nexport async function learnMemoryUsagePatterns(\r\n  options: MemoryOptimizationOptions = {}\r\n): Promise<LearningResult> {\r\n  try {\r\n    logger.info('메모리 사용 패턴 학습 시작');\r\n    \r\n    // 기본값 설정\r\n    const minSampleSize = options.minSampleSize || 50;\r\n    const now = Date.now();\r\n    const startTime = options.timeRange?.startTime || now - 7 * 24 * 60 * 60 * 1000; // 기본 1주일\r\n    const endTime = options.timeRange?.endTime || now;\r\n    \r\n    // 메모리 관련 로그 검색\r\n    const memoryLogs = await searchLogs({\r\n      type: LogType.MEMORY,\r\n      startTime,\r\n      endTime,\r\n      limit: 1000 // 최대 1000개까지만 가져옴\r\n    });\r\n    \r\n    if (memoryLogs.length < minSampleSize) {\r\n      logger.warn(`충분한 메모리 로그 샘플이 없습니다. 필요: ${minSampleSize}, 현재: ${memoryLogs.length}`);\r\n    }\r\n    \r\n    // 메모리 사용량 분석\r\n    const memoryUsages = memoryLogs.map(log => {\r\n      const metadata = log.metadata || {};\r\n      return {\r\n        timestamp: log.timestamp,\r\n        heapUsed: metadata.heapUsed || 0,\r\n        heapTotal: metadata.heapTotal || 0,\r\n        percentUsed: metadata.percentUsed || 0\r\n      };\r\n    });\r\n    \r\n    // 시간대별 메모리 사용량 집계\r\n    const hourlyUsage: { [hour: number]: number[] } = {};\r\n    memoryUsages.forEach(usage => {\r\n      const date = new Date(usage.timestamp);\r\n      const hour = date.getHours();\r\n      \r\n      if (!hourlyUsage[hour]) hourlyUsage[hour] = [];\r\n      hourlyUsage[hour].push(usage.percentUsed);\r\n    });\r\n    \r\n    // 평균 시간대별 사용량 계산\r\n    const hourlyAverages = Object.entries(hourlyUsage).map(([hour, values]) => ({\r\n      hour: parseInt(hour),\r\n      avgUsage: values.reduce((sum, val) => sum + val, 0) / values.length,\r\n      count: values.length\r\n    }));\r\n    \r\n    // 최대 메모리 사용 시간대 식별\r\n    hourlyAverages.sort((a, b) => b.avgUsage - a.avgUsage);\r\n    const peakHours = hourlyAverages.slice(0, 3);\r\n    \r\n    // 메모리 누수 가능성이 있는 세션 식별\r\n    const sessionData: { [sessionId: string]: number[] } = {};\r\n    memoryLogs.forEach(log => {\r\n      if (!log.sessionId) return;\r\n      \r\n      const metadata = log.metadata || {};\r\n      if (!sessionData[log.sessionId]) sessionData[log.sessionId] = [];\r\n      sessionData[log.sessionId].push(metadata.percentUsed || 0);\r\n    });\r\n    \r\n    // 세션별로 메모리 증가 추세 분석\r\n    const sessionTrends = Object.entries(sessionData).map(([sessionId, usages]) => {\r\n      if (usages.length < 5) return null; // 너무 짧은 세션은 제외\r\n      \r\n      const firstHalf = usages.slice(0, Math.floor(usages.length / 2));\r\n      const secondHalf = usages.slice(Math.floor(usages.length / 2));\r\n      \r\n      const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length;\r\n      const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length;\r\n      \r\n      const increaseTrend = secondAvg - firstAvg;\r\n      \r\n      return {\r\n        sessionId,\r\n        samplesCount: usages.length,\r\n        increaseTrend,\r\n        percentIncrease: (increaseTrend / firstAvg) * 100\r\n      };\r\n    }).filter(Boolean);\r\n    \r\n    // 메모리 증가 추세가 높은 세션 정렬\r\n    sessionTrends.sort((a, b) => (b?.increaseTrend || 0) - (a?.increaseTrend || 0));\r\n    const problematicSessions = sessionTrends.filter(session => session && session.percentIncrease > 15);\r\n    \r\n    // 최적화 추천사항 생성\r\n    const recommendations = [];\r\n    \r\n    if (peakHours.length > 0) {\r\n      const formattedHours = peakHours.map(h => `${h.hour}시`).join(', ');\r\n      recommendations.push(`메모리 사용량이 높은 시간대(${formattedHours})에 자동 메모리 최적화를 예약하세요.`);\r\n    }\r\n    \r\n    if (problematicSessions.length > 0) {\r\n      recommendations.push(`메모리 누수 가능성이 있는 ${problematicSessions.length}개의 패턴이 발견되었습니다.`);\r\n      \r\n      if (problematicSessions.length > 2) {\r\n        recommendations.push('장기간 사용 시 주기적인 앱 재시작 일정을 설정하세요.');\r\n      }\r\n    }\r\n    \r\n    // 메모리 GC 최적 주기 추천\r\n    const gcSuggestion = calculateOptimalGCInterval(memoryUsages);\r\n    if (gcSuggestion) {\r\n      recommendations.push(`최적의 가비지 컬렉션 주기: ${gcSuggestion}ms`);\r\n    }\r\n    \r\n    // 학습 결과 반환\r\n    const result: LearningResult = {\r\n      modelType: LearningModelType.MEMORY_OPTIMIZATION,\r\n      timestamp: Date.now(),\r\n      insights: [\r\n        { type: 'peakHours', data: peakHours },\r\n        { type: 'problematicSessions', data: problematicSessions.slice(0, 5) },\r\n        { type: 'hourlyUsage', data: hourlyAverages },\r\n      ],\r\n      recommendations,\r\n      metrics: {\r\n        sampleSize: memoryLogs.length,\r\n        avgMemoryUsage: memoryUsages.reduce((sum, u) => sum + u.percentUsed, 0) / memoryUsages.length,\r\n        peakMemoryUsage: Math.max(...memoryUsages.map(u => u.percentUsed)),\r\n        problematicSessionsCount: problematicSessions.length\r\n      }\r\n    };\r\n    \r\n    logger.info('메모리 사용 패턴 학습 완료', { \r\n      sampleSize: memoryLogs.length, \r\n      recommendations: recommendations.length \r\n    });\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    logger.error('메모리 사용 패턴 학습 중 오류:', error as Record<string, unknown>);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 사용자 행동 패턴 학습 옵션\r\n */\r\nexport interface UserBehaviorOptions {\r\n  timeRange?: {\r\n    startTime?: number;\r\n    endTime?: number;\r\n  };\r\n  minSampleSize?: number;\r\n}\r\n\r\n/**\r\n * 로그 데이터로부터 사용자 행동 패턴을 학습합니다.\r\n * \r\n * @param options - 사용자 행동 학습 옵션\r\n * @returns 학습 결과\r\n */\r\nexport async function learnUserBehaviorPatterns(\r\n  options: UserBehaviorOptions = {}\r\n): Promise<LearningResult> {\r\n  try {\r\n    logger.info('사용자 행동 패턴 학습 시작');\r\n    \r\n    // 기본값 설정\r\n    const minSampleSize = options.minSampleSize || 20;\r\n    const now = Date.now();\r\n    const startTime = options.timeRange?.startTime || now - 30 * 24 * 60 * 60 * 1000; // 기본 30일\r\n    const endTime = options.timeRange?.endTime || now;\r\n    \r\n    // 대화 로그 검색\r\n    const conversationLogs = await searchLogs({\r\n      type: LogType.CONVERSATION,\r\n      startTime,\r\n      endTime,\r\n      limit: 1000 // 최대 1000개까지만 가져옴\r\n    });\r\n    \r\n    if (conversationLogs.length < minSampleSize) {\r\n      logger.warn(`충분한 대화 로그 샘플이 없습니다. 필요: ${minSampleSize}, 현재: ${conversationLogs.length}`);\r\n    }\r\n    \r\n    // 대화 데이터 추출\r\n    const conversations = conversationLogs.map(log => {\r\n      try {\r\n        return {\r\n          ...log,\r\n          parsedContent: JSON.parse(log.content)\r\n        };\r\n      } catch (_) {  // 사용하지 않는 변수는 _ 로만 표시\r\n        return {\r\n          ...log,\r\n          parsedContent: {\r\n            userMessage: '',\r\n            aiResponse: '',\r\n            timestamp: log.timestamp\r\n          }\r\n        };\r\n      }\r\n    });\r\n    \r\n    // 자주 사용되는 단어/구문 분석\r\n    const wordFrequency: WordFrequency = {};\r\n    conversations.forEach(conv => {\r\n      const userMessage = conv.parsedContent?.userMessage || '';\r\n      if (!userMessage) return;\r\n      \r\n      const words = userMessage\r\n        .toLowerCase()\r\n        .replace(/[^\\w\\s가-힣]/g, ' ')\r\n        .split(/\\s+/)\r\n        .filter((word: string) => word.length > 1);\r\n      \r\n      words.forEach((word: string) => {\r\n        wordFrequency[word] = (wordFrequency[word] || 0) + 1;\r\n      });\r\n    });\r\n    \r\n    // 시간대별 활동 패턴 분석\r\n    const hourlyActivity: HourlyActivity = {};\r\n    conversations.forEach(conv => {\r\n      const timestamp = conv.timestamp || conv.parsedContent?.timestamp;\r\n      if (!timestamp) return;\r\n      \r\n      const date = new Date(timestamp);\r\n      const hour = date.getHours();\r\n      \r\n      hourlyActivity[hour] = (hourlyActivity[hour] || 0) + 1;\r\n    });\r\n    \r\n    // 메시지 길이 분석\r\n    const messageLengths = conversations.map(conv => {\r\n      const userMessage = conv.parsedContent?.userMessage || '';\r\n      return userMessage.length;\r\n    });\r\n    \r\n    const avgMessageLength = messageLengths.length > 0 ? \r\n      messageLengths.reduce((sum, len) => sum + len, 0) / messageLengths.length : 0;\r\n    \r\n    // 세션별 대화 수 분석\r\n    const sessionConversations: SessionConversations = {};\r\n    conversations.forEach(conv => {\r\n      if (!conv.sessionId) return;\r\n      sessionConversations[conv.sessionId] = (sessionConversations[conv.sessionId] || 0) + 1;\r\n    });\r\n    \r\n    const sessionsArray = Object.entries(sessionConversations)\r\n      .map(([id, count]) => ({ id, count: count as number }));\r\n    \r\n    const avgConversationsPerSession = sessionsArray.length > 0 ?\r\n      sessionsArray.reduce((sum, session) => {\r\n        return sum + (session && session.count ? session.count : 0);\r\n      }, 0) / sessionsArray.length : 0;\r\n    \r\n    // 활동이 가장 많은 시간대 식별: null 체크 추가\r\n    const activeHours = Object.entries(hourlyActivity)\r\n      .sort((a, b) => {\r\n        if (a === null || b === null || a[1] === null || b[1] === null) return 0;\r\n        return (b[1] as number) - (a[1] as number);\r\n      })\r\n      .slice(0, 3)\r\n      .map(([hour, count]) => ({ \r\n        hour: parseInt(hour), \r\n        count: count as number \r\n      }));\r\n    \r\n    // 추천사항 생성\r\n    const recommendations = [];\r\n    \r\n    if (activeHours.length > 0) {\r\n      const formattedHours = activeHours.map(h => `${h.hour}시`).join(', ');\r\n      recommendations.push(`사용자는 ${formattedHours}에 가장 활발하게 활동합니다. 이 시간대에 성능을 최적화하세요.`);\r\n    }\r\n    \r\n    if (avgMessageLength > 100) {\r\n      recommendations.push(`사용자는 평균 ${Math.round(avgMessageLength)}자의 긴 메시지를 보냅니다. 대용량 텍스트 처리를 최적화하세요.`);\r\n    } else {\r\n      recommendations.push(`사용자는 평균 ${Math.round(avgMessageLength)}자의 짧은 메시지를 보냅니다. 빠른 응답에 집중하세요.`);\r\n    }\r\n    \r\n    if (avgConversationsPerSession > 10) {\r\n      recommendations.push(`사용자는 세션당 평균 ${Math.round(avgConversationsPerSession)}개의 대화를 나눕니다. 장기 세션 메모리 관리를 최적화하세요.`);\r\n    }\r\n    \r\n    if (Object.keys(wordFrequency).length > 0) {\r\n      const topWords = Object.entries(wordFrequency)\r\n        .sort((a, b) => b[1] - a[1])\r\n        .slice(0, 20)\r\n        .map(([word, count]) => ({ word, count }));\r\n      const topThreeWords = topWords.slice(0, 3).map(w => w.word).join(', ');\r\n      recommendations.push(`가장 자주 사용된 키워드는 \"${topThreeWords}\"입니다. 이와 관련된 응답을 최적화하세요.`);\r\n    }\r\n    \r\n    // 학습 결과 반환 코드에서 타입 단언 안전하게 처리\r\n    const result: LearningResult = {\r\n      modelType: LearningModelType.USER_BEHAVIOR,\r\n      timestamp: Date.now(),\r\n      insights: [\r\n        { type: 'topWords', data: Object.entries(wordFrequency)\r\n          .sort((a, b) => b[1] - a[1])\r\n          .slice(0, 20)\r\n          .map(([word, count]) => ({ word, count })) },\r\n        { type: 'activeHours', data: activeHours },\r\n        { type: 'messageLengths', data: { average: avgMessageLength, max: Math.max(...messageLengths) } },\r\n        { type: 'sessionsActivity', data: { \r\n          average: avgConversationsPerSession, \r\n          maxCount: Math.max(...Object.values(sessionConversations).map(v => v as number)) \r\n        } },\r\n      ],\r\n      recommendations: recommendations || [], // null 체크 추가\r\n      metrics: {\r\n        sampleSize: conversations.length,\r\n        uniqueWords: Object.keys(wordFrequency).length,\r\n        avgMessageLength,\r\n        avgConversationsPerSession\r\n      }\r\n    };\r\n    \r\n    // 타입 안전한 로깅\r\n    logger.info('사용자 행동 패턴 학습 완료', { \r\n      sampleSize: conversations.length, \r\n      recommendations: recommendations ? recommendations.length : 0 \r\n    } as Record<string, unknown>);  // 타입 단언 추가\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    logger.error('사용자 행동 패턴 학습 중 오류:', error as Record<string, unknown>);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 오류 예측 학습 옵션\r\n */\r\nexport interface ErrorPredictionOptions {\r\n  timeRange?: {\r\n    startTime?: number;\r\n    endTime?: number;\r\n  };\r\n  minSampleSize?: number;\r\n}\r\n\r\n/**\r\n * 로그 데이터로부터 오류 패턴을 학습하여 예측 모델을 생성합니다.\r\n * \r\n * @param options - 오류 예측 학습 옵션\r\n * @returns 학습 결과\r\n */\r\nexport async function learnErrorPatterns(\r\n  options: ErrorPredictionOptions = {}\r\n): Promise<LearningResult> {\r\n  try {\r\n    logger.info('오류 패턴 학습 시작');\r\n    \r\n    // 기본값 설정\r\n    const minSampleSize = options.minSampleSize || 10;\r\n    const now = Date.now();\r\n    const startTime = options.timeRange?.startTime || now - 30 * 24 * 60 * 60 * 1000; // 기본 30일\r\n    const endTime = options.timeRange?.endTime || now;\r\n    \r\n    // 오류 로그 검색\r\n    const errorLogs = await searchLogs({\r\n      type: LogType.ERROR,\r\n      startTime,\r\n      endTime,\r\n      limit: 1000\r\n    });\r\n    \r\n    if (errorLogs.length < minSampleSize) {\r\n      logger.warn(`충분한 오류 로그 샘플이 없습니다. 필요: ${minSampleSize}, 현재: ${errorLogs.length}`);\r\n    }\r\n    \r\n    // 오류 메시지 분류\r\n    const errorGroups: ErrorGroups = {};\r\n    errorLogs.forEach(log => {\r\n      // 오류 메시지에서 핵심 부분만 추출\r\n      const errorMessage = log.content || '';\r\n      const errorType = getErrorType(errorMessage);\r\n      \r\n      if (!errorGroups[errorType]) {\r\n        errorGroups[errorType] = {\r\n          count: 0,\r\n          examples: [],\r\n          sessionIds: new Set()\r\n        };\r\n      }\r\n      \r\n      errorGroups[errorType].count++;\r\n      \r\n      // 최대 5개까지만 예시 저장\r\n      if (errorGroups[errorType].examples.length < 5) {\r\n        errorGroups[errorType].examples.push({\r\n          message: errorMessage,\r\n          timestamp: log.timestamp\r\n        });\r\n      }\r\n      \r\n      // 세션 ID가 있는 경우 추가\r\n      if (log.sessionId) {\r\n        errorGroups[errorType].sessionIds.add(log.sessionId);\r\n      }\r\n    });\r\n    \r\n    // 가장 빈번한 오류 추출\r\n    const topErrors = Object.entries(errorGroups)\r\n      .map(([type, data]) => ({\r\n        type,\r\n        count: data.count,\r\n        examples: data.examples,\r\n        uniqueSessions: data.sessionIds.size\r\n      }))\r\n      .sort((a, b) => b.count - a.count);\r\n    \r\n    // 시간대별 오류 발생 패턴\r\n    const hourlyErrors: Record<number, number> = {};\r\n    errorLogs.forEach(log => {\r\n      const date = new Date(log.timestamp);\r\n      const hour = date.getHours();\r\n      \r\n      hourlyErrors[hour] = (hourlyErrors[hour] || 0) + 1;\r\n    });\r\n    \r\n    // 가장 오류가 많은 시간대\r\n    const errorPeakHours = Object.entries(hourlyErrors)\r\n      .sort((a, b) => b[1] - a[1])\r\n      .slice(0, 3)\r\n      .map(([hour, count]) => ({ hour: parseInt(hour), count }));\r\n    \r\n    // 추천사항 생성\r\n    const recommendations = [];\r\n    \r\n    if (topErrors.length > 0) {\r\n      const topError = topErrors[0];\r\n      recommendations.push(`가장 빈번한 오류 \"${topError.type}\"에 대한 예외 처리를 강화하세요. (${topError.count}회 발생)`);\r\n      \r\n      if (topError.uniqueSessions > 3) {\r\n        recommendations.push(`\"${topError.type}\" 오류가 ${topError.uniqueSessions}개의 다른 세션에서 발생했습니다. 시스템적 문제일 가능성이 있습니다.`);\r\n      }\r\n    }\r\n    \r\n    if (errorPeakHours.length > 0) {\r\n      const formattedHours = errorPeakHours.map(h => `${h.hour}시`).join(', ');\r\n      recommendations.push(`${formattedHours}에 오류 발생률이 높습니다. 이 시간대에 추가 모니터링을 설정하세요.`);\r\n    }\r\n    \r\n    if (errorLogs.length > 50) {\r\n      const errorRate = (errorLogs.length / ((endTime - startTime) / (24 * 60 * 60 * 1000))).toFixed(2);\r\n      recommendations.push(`일평균 ${errorRate}개의 오류가 발생합니다. 오류 처리 로직을 검토하세요.`);\r\n    }\r\n    \r\n    // 학습 결과 반환\r\n    const result: LearningResult = {\r\n      modelType: LearningModelType.ERROR_PREDICTION,\r\n      timestamp: Date.now(),\r\n      insights: [\r\n        { type: 'topErrors', data: topErrors.slice(0, 5) },\r\n        { type: 'errorPeakHours', data: errorPeakHours },\r\n        { type: 'errorDistribution', data: Object.fromEntries(topErrors.slice(0, 10).map(e => [e.type, e.count])) }\r\n      ],\r\n      recommendations,\r\n      metrics: {\r\n        sampleSize: errorLogs.length,\r\n        uniqueErrorTypes: Object.keys(errorGroups).length,\r\n        mostFrequentErrorCount: topErrors.length > 0 ? topErrors[0].count : 0,\r\n        errorVarietyIndex: Object.keys(errorGroups).length / errorLogs.length\r\n      }\r\n    };\r\n    \r\n    logger.info('오류 패턴 학습 완료', { \r\n      sampleSize: errorLogs.length, \r\n      errorTypes: Object.keys(errorGroups).length \r\n    });\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    logger.error('오류 패턴 학습 중 오류:', error as Record<string, unknown>);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 여러 학습 결과를 통합하여 종합적인 최적화 추천을 생성합니다.\r\n * \r\n * @param results - 학습 결과 배열\r\n * @returns 통합된 추천사항 배열\r\n */\r\nexport function combineRecommendations(results: LearningResult[]): string[] {\r\n  // 모든 추천사항 수집\r\n  const allRecommendations = results.flatMap(result => result.recommendations);\r\n  \r\n  // 중복 제거 (유사한 추천사항 병합)\r\n  const uniqueRecommendations = [];\r\n  const addedKeywords = new Set();\r\n  \r\n  for (const rec of allRecommendations) {\r\n    // 문장에서 핵심 키워드 추출 (간단한 구현)\r\n    const keywords = rec.toLowerCase().replace(/[^\\w\\s가-힣]/g, ' ').split(/\\s+/).filter(w => w.length > 4);\r\n    \r\n    // 이미 유사한 키워드가 있는지 확인\r\n    let isDuplicate = false;\r\n    for (const keyword of keywords) {\r\n      if (addedKeywords.has(keyword)) {\r\n        isDuplicate = true;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (!isDuplicate) {\r\n      uniqueRecommendations.push(rec);\r\n      keywords.forEach(keyword => addedKeywords.add(keyword));\r\n    }\r\n  }\r\n  \r\n  return uniqueRecommendations;\r\n}\r\n\r\n/**\r\n * 에러 메시지에서 에러 타입을 추출합니다.\r\n * \r\n * @param errorMessage - 에러 메시지\r\n * @returns 추출된 에러 타입\r\n */\r\nfunction getErrorType(errorMessage: string): string {\r\n  // 일반적인 JavaScript 오류 패턴 확인\r\n  if (errorMessage.includes('TypeError:')) return 'TypeError';\r\n  if (errorMessage.includes('ReferenceError:')) return 'ReferenceError';\r\n  if (errorMessage.includes('SyntaxError:')) return 'SyntaxError';\r\n  if (errorMessage.includes('RangeError:')) return 'RangeError';\r\n  if (errorMessage.includes('NetworkError:') || errorMessage.includes('네트워크')) return 'NetworkError';\r\n  if (errorMessage.includes('API 요청 실패') || errorMessage.includes('API request failed')) return 'APIError';\r\n  if (errorMessage.includes('Permission denied') || errorMessage.includes('권한')) return 'PermissionError';\r\n  if (errorMessage.includes('not found') || errorMessage.includes('찾을 수 없음')) return 'NotFoundError';\r\n  if (errorMessage.includes('메모리') || errorMessage.includes('memory')) return 'MemoryError';\r\n  \r\n  // 특정 키워드로 분류\r\n  if (errorMessage.includes('undefined') || errorMessage.includes('null')) return 'NullError';\r\n  if (errorMessage.includes('promise') || errorMessage.includes('async')) return 'AsyncError';\r\n  if (errorMessage.includes('초과') || errorMessage.includes('limit') || errorMessage.includes('threshold')) return 'LimitExceededError';\r\n  \r\n  // 기본값 반환\r\n  return 'UnknownError';\r\n}\r\n\r\n/**\r\n * 최적의 가비지 컬렉션 간격을 계산합니다.\r\n * \r\n * @param memoryUsages - 메모리 사용량 데이터\r\n * @returns 최적의 GC 간격(ms) 또는 null\r\n */\r\nfunction calculateOptimalGCInterval(memoryUsages: any[]): number | null {\r\n  if (memoryUsages.length < 10) return null;\r\n  \r\n  // 메모리 사용량 증가 패턴 분석\r\n  const _timestamps = memoryUsages.map(u => u.timestamp);  // 사용하지 않는 변수에 _ 접두사 추가\r\n  const _memoryValues = memoryUsages.map(u => u.percentUsed);  // 사용하지 않는 변수에 _ 접두사 추가\r\n  \r\n  // 정렬\r\n  const sortedData = memoryUsages\r\n    .map((u, _i) => ({ timestamp: u.timestamp, value: u.percentUsed }))\r\n    .sort((a, b) => a.timestamp - b.timestamp);\r\n  \r\n  // 증가율 계산\r\n  const increases = [];\r\n  for (let i = 1; i < sortedData.length; i++) {\r\n    const timeDiff = sortedData[i].timestamp - sortedData[i-1].timestamp;\r\n    const valueDiff = sortedData[i].value - sortedData[i-1].value;\r\n    \r\n    if (valueDiff > 0 && timeDiff > 0) {\r\n      increases.push({\r\n        rate: valueDiff / timeDiff * 1000, // ms당 증가율을 초당 증가율로 변환\r\n        timeDiff\r\n      });\r\n    }\r\n  }\r\n  \r\n  if (increases.length < 5) return null;\r\n  \r\n  // 중앙값 계산\r\n  increases.sort((a, b) => a.rate - b.rate);\r\n  const medianRate = increases[Math.floor(increases.length / 2)].rate;\r\n  \r\n  // 메모리 사용량이 5% 증가하는데 걸리는 평균 시간 (밀리초)\r\n  const timeToIncrease5Percent = 5 / medianRate * 1000;\r\n  \r\n  // 적절한 GC 간격 = 메모리가 5% 증가하는 시간의 80%\r\n  // 이 값은 경험적으로 결정된 것이며, 상황에 따라 조정 가능\r\n  const suggestedInterval = Math.round(timeToIncrease5Percent * 0.8);\r\n  \r\n  // 합리적인 범위 내에 있는지 검증 (최소 10초, 최대 5분)\r\n  const minInterval = 10 * 1000;\r\n  const maxInterval = 5 * 60 * 1000;\r\n  \r\n  if (suggestedInterval < minInterval) return minInterval;\r\n  if (suggestedInterval > maxInterval) return maxInterval;\r\n  \r\n  return suggestedInterval;\r\n}\r\n","/**\r\n * 포맷팅 유틸리티 함수\r\n */\r\n\r\n/**\r\n * 바이트 크기를 사람이 읽기 쉬운 형태로 변환\r\n */\r\nexport function formatBytes(bytes: number, decimals: number = 2): string {\r\n  if (bytes === 0) return '0 Bytes';\r\n\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  \r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(decimals)) + ' ' + sizes[i];\r\n}\r\n\r\n/**\r\n * 숫자를 천 단위 구분자가 있는 문자열로 변환\r\n */\r\nexport function formatNumber(num: number): string {\r\n  return num.toLocaleString();\r\n}\r\n\r\n/**\r\n * 시간(밀리초)을 읽기 쉬운 형태로 변환\r\n */\r\nexport function formatTime(milliseconds: number): string {\r\n  if (milliseconds < 1000) {\r\n    return `${milliseconds}ms`;\r\n  } else if (milliseconds < 60000) {\r\n    return `${(milliseconds / 1000).toFixed(1)}s`;\r\n  } else {\r\n    const minutes = Math.floor(milliseconds / 60000);\r\n    const seconds = ((milliseconds % 60000) / 1000).toFixed(0);\r\n    return `${minutes}m ${seconds}s`;\r\n  }\r\n}\r\n\r\n/**\r\n * WPM(분당 단어 수) 포맷팅\r\n */\r\nexport function formatWPM(wpm: number): string {\r\n  return `${Math.round(wpm)} WPM`;\r\n}\r\n","'use client';\r\n\r\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { LearningModelType, LearningResult } from '../utils/log-learning';\r\nimport { formatBytes, formatTime } from '../utils/format-utils';\r\nimport KeyboardIcon from '@mui/icons-material/Keyboard';\r\nimport styles from './LogAnalysisPanel.module.css';\r\n\r\n/**\r\n * 시간별 데이터를 위한 타입 정의\r\n */\r\ninterface HourData {\r\n  hour: number;\r\n  count: number;\r\n  percentage?: number;\r\n  // 필요한 다른 속성들 추가\r\n}\r\n\r\n/**\r\n * 세션 데이터를 위한 타입 정의\r\n */\r\ninterface SessionData {\r\n  id: string;\r\n  duration: number;\r\n  keyCount: number;\r\n  date: string;\r\n  // 필요한 다른 속성들 추가\r\n}\r\n\r\n/**\r\n * 단어 데이터를 위한 타입 정의\r\n */\r\ninterface WordData {\r\n  word: string;\r\n  count: number;\r\n  percentage?: number;\r\n  // 필요한 다른 속성들 추가\r\n}\r\n\r\ninterface LogAnalysisPanelProps {\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * 로그 분석 패널 컴포넌트\r\n * 로그 데이터를 학습하고 분석 결과를 표시합니다.\r\n */\r\nexport default function LogAnalysisPanel({ className = '' }: LogAnalysisPanelProps) {\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [results, setResults] = useState<LearningResult[]>([]);\r\n  const [selectedTab, setSelectedTab] = useState<LearningModelType>(LearningModelType.MEMORY_OPTIMIZATION);\r\n  const [lastAnalysisTime, setLastAnalysisTime] = useState<number | null>(null);\r\n  const [combinedRecommendations, setCombinedRecommendations] = useState<string[]>([]);\r\n\r\n  // 학습 상태\r\n  const [, setLearningStatus] = useState<{\r\n    isLearning: boolean;\r\n    lastLearningTime: number | null;\r\n    availableModels: LearningModelType[];\r\n  }>({\r\n    isLearning: false,\r\n    lastLearningTime: null,\r\n    availableModels: Object.values(LearningModelType)\r\n  });\r\n\r\n  const learningStatusRef = useRef(false);\r\n\r\n  /**\r\n   * 학습 상태 확인\r\n   */\r\n  const checkLearningStatus = useCallback(async () => {\r\n    try {\r\n      const response = await fetch('/api/logs/learn');\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API 요청 실패: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        setLearningStatus(data.status || {\r\n          isLearning: false,\r\n          lastLearningTime: null,\r\n          availableModels: Object.values(LearningModelType)\r\n        });\r\n      } else {\r\n        console.error('학습 상태 확인 오류:', data.error);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('학습 상태 확인 중 오류 발생:', error);\r\n    }\r\n  }, []);\r\n\r\n  // 컴포넌트 마운트 시 학습 상태 확인\r\n  useEffect(() => {\r\n    checkLearningStatus();\r\n  }, [checkLearningStatus]);\r\n\r\n  /**\r\n   * 학습 실행\r\n   */\r\n  const runLearning = useCallback(async (models: LearningModelType[] = []) => {\r\n    // 모델을 지정하지 않은 경우 기본값으로 모든 모델 사용\r\n    const modelsToLearn = models.length > 0\r\n      ? models\r\n      : Object.values(LearningModelType);\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('/api/logs/learn', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          modelTypes: modelsToLearn,\r\n          options: {\r\n            memory: {\r\n              timeRange: {\r\n                startTime: Date.now() - 7 * 24 * 60 * 60 * 1000, // 1주일\r\n                endTime: Date.now()\r\n              }\r\n            },\r\n            user: {\r\n              timeRange: {\r\n                startTime: Date.now() - 30 * 24 * 60 * 60 * 1000, // 1개월\r\n                endTime: Date.now()\r\n              }\r\n            },\r\n            error: {\r\n              timeRange: {\r\n                startTime: Date.now() - 30 * 24 * 60 * 60 * 1000, // 1개월\r\n                endTime: Date.now()\r\n              }\r\n            }\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API 요청 실패: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        setResults(data.results || []);\r\n        setCombinedRecommendations(data.combinedRecommendations || []);\r\n        setLastAnalysisTime(data.timestamp || Date.now());\r\n\r\n        // 학습 상태 업데이트\r\n        await checkLearningStatus();\r\n      } else {\r\n        setError(data.error || '알 수 없는 오류가 발생했습니다.');\r\n      }\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [checkLearningStatus]);\r\n\r\n  /**\r\n   * 특정 모델 유형에 대한 학습 결과 가져오기\r\n   */\r\n  const getResultForModel = (modelType: LearningModelType): LearningResult | undefined => {\r\n    return results.find(result => result.modelType === modelType);\r\n  };\r\n\r\n  /**\r\n   * 학습 결과에서 추천 사항 렌더링\r\n   */\r\n  const renderRecommendations = (recommendations: string[]) => {\r\n    return (\r\n      <ul className={styles.recommendationList}>\r\n        {recommendations.map((rec, index) => (\r\n          <li key={index} className={styles.recommendationItem}>{rec}</li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 통계 항목 렌더링\r\n   */\r\n  const renderMetricItem = (label: string, value: any) => {\r\n    let formattedValue = value;\r\n\r\n    // 숫자인 경우 소수점 처리\r\n    if (typeof value === 'number') {\r\n      // 메모리 관련 항목은 MB 또는 바이트로 표시\r\n      if (label.toLowerCase().includes('memory') ||\r\n        label.toLowerCase().includes('heap') ||\r\n        label.toLowerCase().includes('size')) {\r\n        formattedValue = formatBytes(value);\r\n      }\r\n      // 0과 1 사이의 값은 백분율로 표시\r\n      else if (value > 0 && value < 1) {\r\n        formattedValue = `${(value * 100).toFixed(2)}%`;\r\n      }\r\n      // 기타 숫자는 소수점 2자리까지 표시\r\n      else {\r\n        formattedValue = Number.isInteger(value) ? value : value.toFixed(2);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div key={label} className={styles.metricItem}>\r\n        <span className={styles.metricLabel}>{label}:</span>\r\n        <span className={styles.metricValue}>{formattedValue}</span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 메모리 최적화 결과 렌더링\r\n   */\r\n  const renderMemoryOptimizationResults = () => {\r\n    const result = getResultForModel(LearningModelType.MEMORY_OPTIMIZATION);\r\n\r\n    if (!result) {\r\n      return (\r\n        <div className={styles.noResults}>\r\n          <p>메모리 최적화 학습 결과가 없습니다.</p>\r\n          <button\r\n            onClick={() => runLearning([LearningModelType.MEMORY_OPTIMIZATION])}\r\n            disabled={isLoading}\r\n            className={styles.learningButton}\r\n          >\r\n            메모리 패턴 학습하기\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const { insights, recommendations, metrics } = result;\r\n\r\n    return (\r\n      <div className={styles.resultSection}>\r\n        <h3>메모리 사용량 분석 결과</h3>\r\n\r\n        {/* 인사이트 표시 */}\r\n        <div className={styles.insightsSection}>\r\n          <h4>주요 인사이트</h4>\r\n\r\n          {insights.map((insight, index) => {\r\n            if (insight.type === 'peakHours' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>메모리 사용량 피크 시간대</h5>\r\n                  <div className={styles.peakHoursChart}>\r\n                    {insight.data.map((hour: HourData, i: number) => (\r\n                      <div key={i} className={styles.hourBar}>\r\n                        <div \r\n                          className={styles.hourBarFill} \r\n                          style={{ height: `${hour.percentage || 0}%` }}\r\n                        />\r\n                        <span className={styles.hourLabel}>{hour.hour}</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            if (insight.type === 'problematicSessions' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>의심되는 메모리 누수 세션</h5>\r\n                  <ul className={styles.sessionsList}>\r\n                    {insight.data.map((session: SessionData, i: number) => (\r\n                      <div key={i} className={styles.sessionItem}>\r\n                        <div className={styles.sessionDetails}>\r\n                          <span className={styles.sessionDate}>{session.date}</span>\r\n                          <span className={styles.sessionDuration}>{formatTime(session.duration)}</span>\r\n                        </div>\r\n                        <div className={styles.sessionKeyCount}>\r\n                          <KeyboardIcon className={styles.keyIcon} />\r\n                          <span>{session.keyCount}</span>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            return null;\r\n          })}\r\n        </div>\r\n\r\n        {/* 메트릭 표시 */}\r\n        <div className={styles.metricsSection}>\r\n          <h4>메모리 사용 통계</h4>\r\n          <div className={styles.metricsGrid}>\r\n            {Object.entries(metrics).map(([key, value]) =>\r\n              renderMetricItem(\r\n                key\r\n                  .replace(/([A-Z])/g, ' $1')\r\n                  .replace(/^./, str => str.toUpperCase()),\r\n                value\r\n              )\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 추천 사항 표시 */}\r\n        <div className={styles.recommendationsSection}>\r\n          <h4>추천 사항</h4>\r\n          {renderRecommendations(recommendations)}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 사용자 행동 분석 결과 렌더링\r\n   */\r\n  const renderUserBehaviorResults = () => {\r\n    const result = getResultForModel(LearningModelType.USER_BEHAVIOR);\r\n\r\n    if (!result) {\r\n      return (\r\n        <div className={styles.noResults}>\r\n          <p>사용자 행동 분석 결과가 없습니다.</p>\r\n          <button\r\n            onClick={() => runLearning([LearningModelType.USER_BEHAVIOR])}\r\n            disabled={isLoading}\r\n            className={styles.learningButton}\r\n          >\r\n            사용자 패턴 학습하기\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const { insights, recommendations, metrics } = result;\r\n\r\n    return (\r\n      <div className={styles.resultSection}>\r\n        <h3>사용자 행동 분석 결과</h3>\r\n\r\n        {/* 인사이트 표시 */}\r\n        <div className={styles.insightsSection}>\r\n          <h4>주요 인사이트</h4>\r\n\r\n          {insights.map((insight, index) => {\r\n            if (insight.type === 'topWords' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>자주 사용하는 단어</h5>\r\n                  <div className={styles.wordCloud}>\r\n                    {insight.data.slice(0, 10).map((word: WordData, i: number) => (\r\n                      <div key={i} className={styles.wordItem}>\r\n                        <span className={styles.wordRank}>{i + 1}</span>\r\n                        <span className={styles.wordText}>{word.word}</span>\r\n                        <span className={styles.wordCount}>{word.count}</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            if (insight.type === 'activeHours' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>활발한 활동 시간대</h5>\r\n                  <div className={styles.activeHoursChart}>\r\n                    {insight.data.map((hour: HourData, i: number) => (\r\n                      <div key={i} className={styles.hourBar}>\r\n                        <div \r\n                          className={styles.hourBarFill} \r\n                          style={{ height: `${hour.percentage || 0}%` }}\r\n                        />\r\n                        <span className={styles.hourLabel}>{hour.hour}</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            return null;\r\n          })}\r\n        </div>\r\n\r\n        {/* 메트릭 표시 */}\r\n        <div className={styles.metricsSection}>\r\n          <h4>사용 통계</h4>\r\n          <div className={styles.metricsGrid}>\r\n            {Object.entries(metrics).map(([key, value]) =>\r\n              renderMetricItem(\r\n                key\r\n                  .replace(/([A-Z])/g, ' $1')\r\n                  .replace(/^./, str => str.toUpperCase()),\r\n                value\r\n              )\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 추천 사항 표시 */}\r\n        <div className={styles.recommendationsSection}>\r\n          <h4>추천 사항</h4>\r\n          {renderRecommendations(recommendations)}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 오류 분석 결과 렌더링\r\n   */\r\n  const renderErrorPredictionResults = () => {\r\n    const result = getResultForModel(LearningModelType.ERROR_PREDICTION);\r\n\r\n    if (!result) {\r\n      return (\r\n        <div className={styles.noResults}>\r\n          <p>오류 분석 결과가 없습니다.</p>\r\n          <button\r\n            onClick={() => runLearning([LearningModelType.ERROR_PREDICTION])}\r\n            disabled={isLoading}\r\n            className={styles.learningButton}\r\n          >\r\n            오류 패턴 학습하기\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const { insights, recommendations, metrics } = result;\r\n\r\n    return (\r\n      <div className={styles.resultSection}>\r\n        <h3>오류 패턴 분석 결과</h3>\r\n\r\n        {/* 인사이트 표시 */}\r\n        <div className={styles.insightsSection}>\r\n          <h4>주요 인사이트</h4>\r\n\r\n          {insights.map((insight, index) => {\r\n            if (insight.type === 'topErrors' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>가장 빈번한 오류 유형</h5>\r\n                  <ul className={styles.errorsList}>\r\n                    {insight.data.map((error: any, i: number) => (\r\n                      <li key={i} className={styles.errorItem}>\r\n                        <span className={styles.errorType}>{error.type}</span>\r\n                        <span className={styles.errorCount}>{error.count}회</span>\r\n                        <div className={styles.errorBar} style={{ width: `${Math.min(100, error.count * 5)}%` }} />\r\n\r\n                        {error.examples && error.examples.length > 0 && (\r\n                          <div className={styles.errorExample}>\r\n                            <span className={styles.errorExampleLabel}>예시:</span>\r\n                            <span className={styles.errorExampleContent}>\r\n                              {error.examples[0].message}\r\n                            </span>\r\n                          </div>\r\n                        )}\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            if (insight.type === 'errorPeakHours' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>오류 발생 빈도 높은 시간대</h5>\r\n                  <div className={styles.errorHoursChart}>\r\n                    {insight.data.map((hour: HourData, i: number) => (\r\n                      <div key={i} className={styles.errorHourBar}\r\n                        style={{\r\n                          height: `${Math.max(20, (hour.count / 5) * 100)}px`,\r\n                          backgroundColor: i === 0 ? '#e03131' : '#f08c00'\r\n                        }}\r\n                      >\r\n                        <span className={styles.errorHourLabel}>{hour.hour}시</span>\r\n                        <span className={styles.errorHourValue}>{hour.count}회</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            return null;\r\n          })}\r\n        </div>\r\n\r\n        {/* 메트릭 표시 */}\r\n        <div className={styles.metricsSection}>\r\n          <h4>오류 통계</h4>\r\n          <div className={styles.metricsGrid}>\r\n            {Object.entries(metrics).map(([key, value]) =>\r\n              renderMetricItem(\r\n                key\r\n                  .replace(/([A-Z])/g, ' $1')\r\n                  .replace(/^./, str => str.toUpperCase()),\r\n                value\r\n              )\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 추천 사항 표시 */}\r\n        <div className={styles.recommendationsSection}>\r\n          <h4>추천 사항</h4>\r\n          {renderRecommendations(recommendations)}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 종합 분석 결과 렌더링\r\n   */\r\n  const renderOverallInsights = () => {\r\n    if (combinedRecommendations.length === 0) {\r\n      return (\r\n        <div className={styles.noResults}>\r\n          <p>종합 분석 결과가 없습니다. 먼저 다양한 유형의 학습을 실행하세요.</p>\r\n          <button\r\n            onClick={() => runLearning()}\r\n            disabled={isLoading}\r\n            className={styles.learningButton}\r\n          >\r\n            전체 학습 실행하기\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className={styles.resultSection}>\r\n        <h3>종합 분석 결과</h3>\r\n\r\n        <div className={styles.overallSummary}>\r\n          <div className={styles.summaryStats}>\r\n            <div className={styles.summaryStat}>\r\n              <span className={styles.summaryStatLabel}>분석된 모델</span>\r\n              <span className={styles.summaryStatValue}>{results.length}</span>\r\n            </div>\r\n            <div className={styles.summaryStat}>\r\n              <span className={styles.summaryStatLabel}>총 추천사항</span>\r\n              <span className={styles.summaryStatValue}>{combinedRecommendations.length}</span>\r\n            </div>\r\n            <div className={styles.summaryStat}>\r\n              <span className={styles.summaryStatLabel}>마지막 분석</span>\r\n              <span className={styles.summaryStatValue}>\r\n                {lastAnalysisTime\r\n                  ? new Date(lastAnalysisTime).toLocaleString()\r\n                  : '없음'}\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={styles.recommendationsSection}>\r\n            <h4>통합 추천 사항</h4>\r\n            {renderRecommendations(combinedRecommendations)}\r\n          </div>\r\n\r\n          <div className={styles.actionButtons}>\r\n            <button\r\n              onClick={() => runLearning()}\r\n              disabled={isLoading}\r\n              className={styles.learningButton}\r\n            >\r\n              {isLoading ? '학습 중...' : '학습 다시 실행하기'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // 선택한 탭에 따라 결과 렌더링\r\n  const renderSelectedTabContent = () => {\r\n    switch (selectedTab) {\r\n      case LearningModelType.MEMORY_OPTIMIZATION:\r\n        return renderMemoryOptimizationResults();\r\n      case LearningModelType.USER_BEHAVIOR:\r\n        return renderUserBehaviorResults();\r\n      case LearningModelType.ERROR_PREDICTION:\r\n        return renderErrorPredictionResults();\r\n      case LearningModelType.PERFORMANCE_OPTIMIZATION:\r\n        return renderOverallInsights();\r\n      default:\r\n        return <div>유효하지 않은 탭입니다.</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`${styles.logAnalysisPanel} ${className}`}>\r\n      <div className={styles.header}>\r\n        <h2>로그 분석 대시보드</h2>\r\n        {lastAnalysisTime && (\r\n          <p className={styles.lastAnalysisTime}>\r\n            마지막 분석: {new Date(lastAnalysisTime).toLocaleString()}\r\n          </p>\r\n        )}\r\n      </div>\r\n\r\n      {/* 학습 컨트롤 버튼 */}\r\n      <div className={styles.controls}>\r\n        <button\r\n          onClick={() => runLearning()}\r\n          disabled={isLoading}\r\n          className={styles.mainButton}\r\n        >\r\n          {isLoading ? '학습 중...' : '모든 데이터 학습하기'}\r\n        </button>\r\n      </div>\r\n\r\n      {/* 에러 메시지 */}\r\n      {error && (\r\n        <div className={styles.errorMessage}>\r\n          <p>오류 발생: {error}</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* 학습 중 로딩 표시 */}\r\n      {isLoading && (\r\n        <div className={styles.loadingIndicator}>\r\n          <div className={styles.spinner}></div>\r\n          <p>로그 데이터 학습 중...</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* 탭 네비게이션 */}\r\n      <div className={styles.tabNavigation}>\r\n        <button\r\n          className={`${styles.tabButton} ${selectedTab === LearningModelType.MEMORY_OPTIMIZATION ? styles.activeTab : ''}`}\r\n          onClick={() => setSelectedTab(LearningModelType.MEMORY_OPTIMIZATION)}\r\n        >\r\n          메모리 최적화\r\n        </button>\r\n        <button\r\n          className={`${styles.tabButton} ${selectedTab === LearningModelType.USER_BEHAVIOR ? styles.activeTab : ''}`}\r\n          onClick={() => setSelectedTab(LearningModelType.USER_BEHAVIOR)}\r\n        >\r\n          사용자 행동\r\n        </button>\r\n        <button\r\n          className={`${styles.tabButton} ${selectedTab === LearningModelType.ERROR_PREDICTION ? styles.activeTab : ''}`}\r\n          onClick={() => setSelectedTab(LearningModelType.ERROR_PREDICTION)}\r\n        >\r\n          오류 예측\r\n        </button>\r\n        <button\r\n          className={`${styles.tabButton} ${selectedTab === LearningModelType.PERFORMANCE_OPTIMIZATION ? styles.activeTab : ''}`}\r\n          onClick={() => setSelectedTab(LearningModelType.PERFORMANCE_OPTIMIZATION)}\r\n        >\r\n          종합 분석\r\n        </button>\r\n      </div>\r\n\r\n      {/* 선택한 탭 내용 렌더링 */}\r\n      <div className={styles.tabContent}>\r\n        {renderSelectedTabContent()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","'use client';\r\n\r\nimport React from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport LogAnalysisPanel from '../../components/LogAnalysisPanel';\r\nimport styles from './page.module.css';\r\n\r\n/**\r\n * 로그 분석 페이지\r\n * 로그 데이터 학습 및 분석 결과를 보여줍니다.\r\n */\r\nexport default function LogAnalysisPage() {\r\n  const router = useRouter();\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <header className={styles.header}>\r\n        <h1>로그 분석 및 인사이트</h1>\r\n        <p>\r\n          로그 데이터를 기반으로 메모리 최적화, 사용자 행동 패턴, 오류 예측에 대한 인사이트를 확인하세요.\r\n        </p>\r\n      </header>\r\n\r\n      <main className={styles.main}>\r\n        <LogAnalysisPanel />\r\n\r\n        <section className={styles.helpSection}>\r\n          <h2>분석 도움말</h2>\r\n          <div className={styles.helpContent}>\r\n            <h3>학습 기능 안내</h3>\r\n            <p>\r\n              로그 학습은 애플리케이션의 저장된 로그 데이터를 분석하여 패턴을 발견하고 최적화 방안을 제시합니다.\r\n              각 모듈별로 다음과 같은 인사이트를 제공합니다:\r\n            </p>\r\n\r\n            <ul>\r\n              <li>\r\n                <strong>메모리 최적화</strong>: 메모리 사용 패턴을 분석하여 최적의 GC 간격, 메모리 누수 가능성이 있는 세션,\r\n                그리고 메모리 사용량이 많은 시간대를 식별합니다.\r\n              </li>\r\n              <li>\r\n                <strong>사용자 행동</strong>: 사용자의 입력 패턴, 자주 사용하는 단어, 활발한 활동 시간대 등을 분석하여\r\n                사용자 경험 최적화 방안을 제안합니다.\r\n              </li>\r\n              <li>\r\n                <strong>오류 예측</strong>: 발생한 오류의 유형과 패턴을 분석하여 자주 발생하는 오류에 대한 대응 전략을\r\n                제시합니다.\r\n              </li>\r\n              <li>\r\n                <strong>종합 분석</strong>: 모든 데이터를 종합하여 시스템 전반의 최적화 권장사항을 제공합니다.\r\n              </li>\r\n            </ul>\r\n\r\n            <h3>학습 시 참고사항</h3>\r\n            <p>\r\n              <strong>데이터 양</strong>: 보다 정확한 분석 결과를 위해 충분한 양의 로그 데이터가 필요합니다. 일반적으로 최소 몇 일 이상의\r\n              사용 데이터가 필요합니다.\r\n            </p>\r\n            <p>\r\n              <strong>학습 주기</strong>: 시스템 변화나 새로운 패턴을 반영하기 위해 정기적으로 학습을 실행하는 것이 좋습니다.\r\n            </p>\r\n            <p>\r\n              <strong>리소스 사용</strong>: 학습 과정은 서버 리소스를 일시적으로 많이 사용할 수 있으므로, 사용량이 적은 시간대에 실행하는 것을 권장합니다.\r\n            </p>\r\n          </div>\r\n\r\n          <div className={styles.actions}>\r\n            <button\r\n              onClick={() => router.push('/dashboard')}\r\n              className={styles.secondaryButton}\r\n            >\r\n              대시보드로 돌아가기\r\n            </button>\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logAnalysisPanel\":\"LogAnalysisPanel_logAnalysisPanel__oyS8m\",\"header\":\"LogAnalysisPanel_header__ntVim\",\"lastAnalysisTime\":\"LogAnalysisPanel_lastAnalysisTime__fsF3j\",\"controls\":\"LogAnalysisPanel_controls__uA_Zd\",\"mainButton\":\"LogAnalysisPanel_mainButton__p9rNy\",\"learningButton\":\"LogAnalysisPanel_learningButton__91G6_\",\"errorMessage\":\"LogAnalysisPanel_errorMessage__XQM51\",\"loadingIndicator\":\"LogAnalysisPanel_loadingIndicator___8OQc\",\"spinner\":\"LogAnalysisPanel_spinner__2cxhW\",\"spin\":\"LogAnalysisPanel_spin__HYfFK\",\"tabNavigation\":\"LogAnalysisPanel_tabNavigation__pveWH\",\"tabButton\":\"LogAnalysisPanel_tabButton__ZFnuT\",\"activeTab\":\"LogAnalysisPanel_activeTab__wJN0E\",\"resultSection\":\"LogAnalysisPanel_resultSection__Cy9Qz\",\"noResults\":\"LogAnalysisPanel_noResults__8IaJP\",\"insightsSection\":\"LogAnalysisPanel_insightsSection__RzhLb\",\"metricsSection\":\"LogAnalysisPanel_metricsSection__PDTFd\",\"recommendationsSection\":\"LogAnalysisPanel_recommendationsSection__W53ft\",\"insightItem\":\"LogAnalysisPanel_insightItem__z_dHX\",\"peakHoursChart\":\"LogAnalysisPanel_peakHoursChart__7yAvM\",\"activeHoursChart\":\"LogAnalysisPanel_activeHoursChart__6NKUe\",\"errorHoursChart\":\"LogAnalysisPanel_errorHoursChart__PXG0_\",\"peakHourBar\":\"LogAnalysisPanel_peakHourBar__Ao4lA\",\"activeHourBar\":\"LogAnalysisPanel_activeHourBar__Uwapg\",\"errorHourBar\":\"LogAnalysisPanel_errorHourBar__lml6X\",\"peakHourLabel\":\"LogAnalysisPanel_peakHourLabel__yXmte\",\"activeHourLabel\":\"LogAnalysisPanel_activeHourLabel__Vm7ZA\",\"errorHourLabel\":\"LogAnalysisPanel_errorHourLabel__YHKIA\",\"peakHourValue\":\"LogAnalysisPanel_peakHourValue__873hu\",\"activeHourValue\":\"LogAnalysisPanel_activeHourValue__K6F3f\",\"errorHourValue\":\"LogAnalysisPanel_errorHourValue__WfPSg\",\"metricsGrid\":\"LogAnalysisPanel_metricsGrid__ItMfT\",\"metricItem\":\"LogAnalysisPanel_metricItem__aFhJB\",\"metricLabel\":\"LogAnalysisPanel_metricLabel__7En0A\",\"metricValue\":\"LogAnalysisPanel_metricValue__hwk1l\",\"recommendationList\":\"LogAnalysisPanel_recommendationList__3i7br\",\"recommendationItem\":\"LogAnalysisPanel_recommendationItem__i_n1b\",\"wordCloud\":\"LogAnalysisPanel_wordCloud__dpTf_\",\"wordItem\":\"LogAnalysisPanel_wordItem__I7IQy\",\"errorsList\":\"LogAnalysisPanel_errorsList__z4AlY\",\"errorItem\":\"LogAnalysisPanel_errorItem__pXK0v\",\"errorType\":\"LogAnalysisPanel_errorType__X9Q21\",\"errorCount\":\"LogAnalysisPanel_errorCount__tJ7HM\",\"errorBar\":\"LogAnalysisPanel_errorBar__IQe6W\",\"errorExample\":\"LogAnalysisPanel_errorExample__e0ghi\",\"errorExampleLabel\":\"LogAnalysisPanel_errorExampleLabel__bH9TT\",\"errorExampleContent\":\"LogAnalysisPanel_errorExampleContent__90lxt\",\"sessionsList\":\"LogAnalysisPanel_sessionsList__49n41\",\"sessionIncrease\":\"LogAnalysisPanel_sessionIncrease__E4TUk\",\"overallSummary\":\"LogAnalysisPanel_overallSummary__IczVW\",\"summaryStats\":\"LogAnalysisPanel_summaryStats__dPN8j\",\"summaryStat\":\"LogAnalysisPanel_summaryStat__3W5FW\",\"summaryStatLabel\":\"LogAnalysisPanel_summaryStatLabel__6P0lq\",\"summaryStatValue\":\"LogAnalysisPanel_summaryStatValue__BG_t2\",\"actionButtons\":\"LogAnalysisPanel_actionButtons__YM7Ce\"};"],"names":["OPTIMIZATION_LEVEL","MEDIUM","DEFAULT_OPTIONS","minLevel","maxLogs","printToConsole","moduleName","MemoryLogger","level","message","data","options","entry","timestamp","Date","now","logs","push","length","shift","toISOString","prefix","console","debug","info","warn","error","log","getLogs","getLogsByLevel","filter","getErrorLogs","constructor","memoryLogger","bind","INDEXEDDB_STORE","saveLogToIndexedDB","logEntry","Promise","resolve","reject","window","indexedDB","request","open","MEMORY_LOG_DB","onupgradeneeded","db","target","result","objectStoreNames","contains","createObjectStore","keyPath","onerror","onsuccess","transaction","addRequest","store","objectStore","add","oncomplete","close","toSafeRecord","undefined","value","LearningModelType","LogAnalysisPanel","className","isLoading","setIsLoading","useState","setError","results","setResults","selectedTab","setSelectedTab","MEMORY_OPTIMIZATION","lastAnalysisTime","setLastAnalysisTime","combinedRecommendations","setCombinedRecommendations","setLearningStatus","isLearning","lastLearningTime","availableModels","Object","values","useRef","checkLearningStatus","useCallback","response","fetch","ok","status","statusText","json","success","useEffect","runLearning","models","modelsToLearn","method","headers","body","JSON","stringify","modelTypes","memory","timeRange","startTime","endTime","user","getResultForModel","modelType","find","renderRecommendations","ul","styles","recommendations","map","rec","index","li","renderMetricItem","label","formattedValue","toLowerCase","includes","formatBytes","bytes","decimals","i","Math","floor","k","parseFloat","pow","toFixed","sizes","Number","isInteger","div","span","renderMemoryOptimizationResults","p","button","onClick","disabled","insights","metrics","h3","h4","insight","type","h5","hour","style","height","percentage","session","date","milliseconds","formatTime","minutes","seconds","duration","KeyboardIcon","keyCount","entries","key","replace","str","toUpperCase","renderUserBehaviorResults","USER_BEHAVIOR","slice","word","count","renderErrorPredictionResults","ERROR_PREDICTION","width","min","examples","max","backgroundColor","renderOverallInsights","toLocaleString","h2","PERFORMANCE_OPTIMIZATION","renderSelectedTabContent","LogAnalysisPage","router","useRouter","header","h1","main","section","strong"],"sourceRoot":"","ignoreList":[]}