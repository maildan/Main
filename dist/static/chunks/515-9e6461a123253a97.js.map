{"version":3,"file":"static/chunks/515-9e6461a123253a97.js","mappings":"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","sources":["webpack://_N_E/./src/app/components/TypingAnalyzer.module.css","webpack://_N_E/./src/app/hooks/useNativeGpu.ts","webpack://_N_E/./src/app/components/TypingAnalyzer.tsx","webpack://_N_E/./src/app/hooks/useElectronApi.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TypingAnalyzer_container__EiTxp\",\"header\":\"TypingAnalyzer_header__hDX3y\",\"title\":\"TypingAnalyzer_title__b6HkC\",\"gpuToggle\":\"TypingAnalyzer_gpuToggle__05K5J\",\"loading\":\"TypingAnalyzer_loading__Q5qi0\",\"error\":\"TypingAnalyzer_error__LKAhd\",\"results\":\"TypingAnalyzer_results__r6qGE\",\"stat\":\"TypingAnalyzer_stat__beTdm\",\"label\":\"TypingAnalyzer_label__Xjl78\",\"value\":\"TypingAnalyzer_value__ZPUzc\",\"fatigue\":\"TypingAnalyzer_fatigue__z3q__\",\"fatigueMeter\":\"TypingAnalyzer_fatigueMeter__KSS5H\",\"fatigueIndicator\":\"TypingAnalyzer_fatigueIndicator__p0ieh\",\"recommendation\":\"TypingAnalyzer_recommendation__TFBU4\"};","import { useState, useEffect, useCallback } from 'react';\r\nimport { \r\n  getGpuInfo, \r\n  setGpuAcceleration,\r\n  performGpuComputation\r\n} from '../utils/nativeModuleClient';\r\nimport type { GpuInfo, GpuComputationResult } from '@/types/native-module';\r\n\r\n/**\r\n * 네이티브 GPU 가속 훅\r\n * 네이티브 모듈을 사용한 GPU 가속 기능을 제공합니다.\r\n */\r\nexport function useNativeGpu() {\r\n  const [gpuInfo, setGpuInfo] = useState<GpuInfo | null>(null);\r\n  const [available, setAvailable] = useState<boolean>(false);\r\n  const [enabled, setEnabled] = useState<boolean>(false);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [lastComputationResult, setLastComputationResult] = useState<GpuComputationResult | null>(null);\r\n\r\n  // GPU 정보 가져오기\r\n  const fetchGpuInfo = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await getGpuInfo();\r\n      \r\n      if (response.success) {\r\n        setGpuInfo(response.gpuInfo || null);\r\n        setAvailable(response.available);\r\n        setEnabled(response.gpuInfo?.acceleration_enabled || false);\r\n      } else {\r\n        setError('GPU 정보를 가져오는데 실패했습니다.');\r\n      }\r\n    } catch (err) {\r\n      console.error('GPU 정보 가져오기 오류:', err);\r\n      setError(err instanceof Error ? err.message : '알 수 없는 오류');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // GPU 가속 활성화/비활성화\r\n  const toggleGpuAcceleration = useCallback(async (enable: boolean) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await setGpuAcceleration(enable);\r\n      \r\n      if (response.success) {\r\n        setEnabled(response.enabled);\r\n        // GPU 정보 업데이트\r\n        await fetchGpuInfo();\r\n        return response.result;\r\n      } else {\r\n        setError(response.error || 'GPU 가속 설정 변경 실패');\r\n        return false;\r\n      }\r\n    } catch (err) {\r\n      console.error('GPU 가속 변경 오류:', err);\r\n      setError(err instanceof Error ? err.message : '알 수 없는 오류');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [fetchGpuInfo]);\r\n\r\n  // GPU 계산 수행\r\n  const computeWithGpu = useCallback(async <T = any>(data: any, computationType: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await performGpuComputation<T>(data, computationType);\r\n      \r\n      if (response.success && response.result) {\r\n        setLastComputationResult(response.result);\r\n        return response.result;\r\n      } else {\r\n        setError(response.error || 'GPU 계산 실패');\r\n        return null;\r\n      }\r\n    } catch (err) {\r\n      console.error('GPU 계산 오류:', err);\r\n      setError(err instanceof Error ? err.message : '알 수 없는 오류');\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // 초기 로드 시 GPU 정보 가져오기\r\n  useEffect(() => {\r\n    fetchGpuInfo();\r\n  }, [fetchGpuInfo]);\r\n\r\n  return {\r\n    gpuInfo,\r\n    available,\r\n    enabled,\r\n    loading,\r\n    error,\r\n    lastComputationResult,\r\n    fetchGpuInfo,\r\n    toggleGpuAcceleration,\r\n    computeWithGpu,\r\n  };\r\n}\r\n","'use client';\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { useNativeGpu } from '../hooks/useNativeGpu';\r\nimport { useElectronApi } from '../hooks/useElectronApi';\r\nimport styles from './TypingAnalyzer.module.css';\r\n\r\ninterface TypingData {\r\n  keyCount: number;\r\n  typingTime: number;  // 밀리초\r\n  accuracy?: number;\r\n}\r\n\r\ninterface TypingAnalysisResult {\r\n  wpm: number;\r\n  accuracy: number;\r\n  performance_index: number;\r\n  consistency_score: number;\r\n  fatigue_analysis: {\r\n    score: number;\r\n    time_factor: number;\r\n    intensity_factor: number;\r\n    recommendation: string;\r\n  };\r\n}\r\n\r\nexport function TypingAnalyzer({ stats, _isTracking }: { \r\n  stats?: TypingData; \r\n  _isTracking?: boolean \r\n}) {\r\n  const defaultStats = {\r\n    keyCount: 0,\r\n    typingTime: 0,\r\n    accuracy: 0\r\n  };\r\n\r\n  const safeStats = stats || defaultStats;\r\n  const { electronAPI: electronApi, isElectron } = useElectronApi();\r\n\r\n  const { available, enabled, loading, error, computeWithGpu, toggleGpuAcceleration } = useNativeGpu();\r\n  const [result, setResult] = useState<TypingAnalysisResult | null>(null);\r\n  const [useGpuAcceleration, setUseGpuAcceleration] = useState<boolean>(false);\r\n  const [electronStats, setElectronStats] = useState<TypingData | null>(null);\r\n\r\n  // Electron 환경에서 타이핑 통계 가져오기\r\n  useEffect(() => {\r\n    if (isElectron && electronApi) {\r\n      const getElectronStats = async () => {\r\n        try {\r\n          // Electron IPC를 통해 통계 가져오기\r\n          if (electronApi.getTypingStats) {\r\n            const currentStats = await electronApi.getTypingStats();\r\n            if (currentStats) {\r\n              setElectronStats({\r\n                keyCount: currentStats.keyCount || 0,\r\n                typingTime: currentStats.typingTime * 1000 || 0, // 초 -> 밀리초 변환\r\n                accuracy: currentStats.accuracy || 100\r\n              });\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Electron 통계 가져오기 실패:', error);\r\n        }\r\n      };\r\n\r\n      // 초기 로드 및 주기적 업데이트\r\n      getElectronStats();\r\n      const interval = setInterval(getElectronStats, 5000); // 5초마다 업데이트\r\n\r\n      // Electron IPC 이벤트 리스너 설정\r\n      let unsubscribe: (() => void) | undefined;\r\n      \r\n      if (electronApi.onTypingStatsUpdate) {\r\n        // 콜백 함수를 직접 전달하는 방식으로 수정\r\n        unsubscribe = electronApi.onTypingStatsUpdate((data: TypingData) => {\r\n          if (data) {\r\n            setElectronStats({\r\n              keyCount: data.keyCount || 0,\r\n              typingTime: data.typingTime * 1000 || 0, // 초 -> 밀리초 변환\r\n              accuracy: data.accuracy || 100\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      return () => {\r\n        clearInterval(interval);\r\n        if (unsubscribe) {\r\n          unsubscribe();\r\n        }\r\n      };\r\n    }\r\n  }, [isElectron, electronApi]);\r\n\r\n  // 설정에서 GPU 가속 여부 가져오기\r\n  useEffect(() => {\r\n    const loadGpuSetting = async () => {\r\n      try {\r\n        if (electronApi && electronApi.loadSettings) {\r\n          // Electron 환경에서 설정 로드\r\n          const settings = await electronApi.loadSettings();\r\n          if (settings) {\r\n            setUseGpuAcceleration(!!settings.useTypingAnalysisGpuAcceleration);\r\n          }\r\n        } else {\r\n          // 웹 환경에서 설정 로드\r\n          const response = await fetch('/api/settings/get');\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            if (data.success && data.settings) {\r\n              const useGpuAcceleration = data.settings.useTypingAnalysisGpuAcceleration;\r\n              setUseGpuAcceleration(!!useGpuAcceleration);\r\n            }\r\n          } else {\r\n            console.warn('GPU 가속 설정을 불러오는데 실패했습니다. 기본값으로 설정합니다.');\r\n          }\r\n        }\r\n        \r\n        // GPU 모듈 활성화 여부 확인\r\n        if (useGpuAcceleration && available && !enabled) {\r\n          await toggleGpuAcceleration(true);\r\n        }\r\n      } catch (error) {\r\n        console.error('GPU 설정을 불러오는 중 오류 발생:', error);\r\n      }\r\n    };\r\n    \r\n    loadGpuSetting();\r\n  }, [available, enabled, toggleGpuAcceleration, electronApi, useGpuAcceleration]);\r\n\r\n  // 타이핑 통계 분석 수행\r\n  const analyzeTyping = useCallback(async () => {\r\n    // 실제 사용할 통계 데이터 결정\r\n    const dataToAnalyze = isElectron && electronStats ? electronStats : safeStats;\r\n    \r\n    if (!dataToAnalyze.keyCount || !dataToAnalyze.typingTime) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (useGpuAcceleration && enabled) {\r\n        // GPU 가속 분석\r\n        const computeResult = await computeWithGpu<TypingAnalysisResult>(dataToAnalyze, 'typing');\r\n        \r\n        if (computeResult && computeResult.result_summary) {\r\n          setResult(computeResult.result_summary);\r\n        }\r\n      } else {\r\n        // 자바스크립트로 분석 (폴백)\r\n        const jsResult = analyzeTypingWithJS(dataToAnalyze);\r\n        setResult(jsResult);\r\n      }\r\n    } catch (err) {\r\n      console.error('타이핑 분석 오류:', err);\r\n      \r\n      // 오류 시 자바스크립트 폴백 사용\r\n      const jsResult = analyzeTypingWithJS(dataToAnalyze);\r\n      setResult(jsResult);\r\n    }\r\n  }, [safeStats, electronStats, isElectron, useGpuAcceleration, enabled, computeWithGpu]);\r\n\r\n  // 데이터 변경 시 재분석\r\n  useEffect(() => {\r\n    // 브라우저 환경\r\n    if (!isElectron && safeStats.keyCount > 0 && safeStats.typingTime > 0) {\r\n      analyzeTyping();\r\n    }\r\n    // Electron 환경\r\n    else if (isElectron && electronStats && electronStats.keyCount > 0 && electronStats.typingTime > 0) {\r\n      analyzeTyping();\r\n    }\r\n  }, [safeStats, electronStats, isElectron, analyzeTyping]);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.header}>\r\n        <h2 className={styles.title}>타이핑 분석</h2>\r\n      </div>\r\n\r\n      {loading && <div className={styles.loading}>분석 중...</div>}\r\n      \r\n      {error && <div className={styles.error}>{error}</div>}\r\n      \r\n      {result && !loading && (\r\n        <div className={styles.results}>\r\n          <div className={styles.stat}>\r\n            <span className={styles.label}>속도</span>\r\n            <span className={styles.value}>{Math.round(result.wpm)} WPM</span>\r\n          </div>\r\n          \r\n          <div className={styles.stat}>\r\n            <span className={styles.label}>정확도</span>\r\n            <span className={styles.value}>{result.accuracy.toFixed(1)}%</span>\r\n          </div>\r\n          \r\n          <div className={styles.stat}>\r\n            <span className={styles.label}>성능 지수</span>\r\n            <span className={styles.value}>{result.performance_index.toFixed(1)}</span>\r\n          </div>\r\n          \r\n          <div className={styles.stat}>\r\n            <span className={styles.label}>일관성</span>\r\n            <span className={styles.value}>{result.consistency_score.toFixed(1)}</span>\r\n          </div>\r\n          \r\n          <div className={styles.fatigue}>\r\n            <h3>피로도 분석</h3>\r\n            <div className={styles.fatigueMeter}>\r\n              <div \r\n                className={styles.fatigueIndicator} \r\n                style={{ width: `${result.fatigue_analysis.score}%` }}\r\n              />\r\n            </div>\r\n            <p className={styles.recommendation}>\r\n              {result.fatigue_analysis.recommendation}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {!result && !loading && (\r\n        <div className={styles.noData}>\r\n          <p>타이핑 데이터가 충분하지 않습니다.</p>\r\n          <p>키보드 입력이 감지되면 분석이 시작됩니다.</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// 자바스크립트로 타이핑 통계 분석 (폴백)\r\nfunction analyzeTypingWithJS(data: TypingData): TypingAnalysisResult {\r\n  const { keyCount, typingTime, accuracy = 100 } = data;\r\n  \r\n  // WPM 계산 (1단어 = 5타)\r\n  const minutes = typingTime / 60000;\r\n  const wpm = minutes > 0 ? (keyCount / 5) / minutes : 0;\r\n  \r\n  // 일관성 점수 (간단한 추정)\r\n  const consistency = 65 + (Math.min(keyCount, 500) / 20);\r\n  \r\n  // 피로도 계산\r\n  const fatigue = {\r\n    score: Math.min(100, (minutes * 10) + (wpm / 10)),\r\n    time_factor: minutes,\r\n    intensity_factor: wpm / 100,\r\n    recommendation: minutes > 30 \r\n      ? '휴식이 필요합니다' \r\n      : minutes > 15 \r\n        ? '짧은 휴식을 고려하세요' \r\n        : '좋은 상태입니다'\r\n  };\r\n  \r\n  return {\r\n    wpm,\r\n    accuracy,\r\n    performance_index: (wpm * accuracy / 100),\r\n    consistency_score: consistency,\r\n    fatigue_analysis: fatigue\r\n  };\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { ElectronAPI } from '../types/electron';\r\n\r\n// 더미 일렉트론 API 생성 함수\r\nconst createDummyElectronAPI = (): ElectronAPI => ({\r\n  windowControl: (action) => console.log(`개발용 windowControl 호출: ${action}`),\r\n  onTypingStatsUpdate: (_callback) => {\r\n    console.log('개발용 onTypingStatsUpdate 리스너 등록');\r\n    return () => console.log('개발용 onTypingStatsUpdate 리스너 제거');\r\n  },\r\n  onStatsSaved: (_callback) => {\r\n    console.log('개발용 onStatsSaved 리스너 등록');\r\n    return () => console.log('개발용 onStatsSaved 리스너 제거');\r\n  },\r\n  startTracking: () => console.log('개발용 startTracking 호출'),\r\n  stopTracking: () => console.log('개발용 stopTracking 호출'),\r\n  saveStats: (data?) => {\r\n    console.log('개발용 saveStats 호출:', data);\r\n    return Promise.resolve(true);\r\n  },\r\n  loadSettings: () => {\r\n    console.log('개발용 loadSettings 호출');\r\n    return { darkMode: false, windowMode: 'normal' };\r\n  },\r\n  saveSettings: (settings) => {\r\n    console.log('개발용 saveSettings 호출:', settings);\r\n    return true;\r\n  },\r\n  getCurrentBrowserInfo: () => Promise.resolve({ name: null, isGoogleDocs: false, title: null }),\r\n  getDebugInfo: () => Promise.resolve({\r\n    isTracking: false,\r\n    currentStats: {\r\n      keyCount: 0,\r\n      typingTime: 0,\r\n      startTime: null,\r\n      lastActiveTime: null,\r\n      currentWindow: null,\r\n      currentBrowser: null,\r\n      totalChars: 0,\r\n      totalWords: 0,\r\n      totalCharsNoSpace: 0,\r\n      pages: 0,\r\n      accuracy: 100\r\n    },\r\n    platform: 'web',\r\n    electronVersion: 'N/A',\r\n    nodeVersion: 'N/A'\r\n  }),\r\n  setDarkMode: () => Promise.resolve({ success: true }),\r\n  setWindowMode: () => Promise.resolve({ success: true }),\r\n  getWindowMode: () => Promise.resolve('windowed' as WindowModeType),\r\n  checkAutoStart: () => {},\r\n  onAutoTrackingStarted: () => () => {},\r\n  onSwitchTab: () => () => {},\r\n  onOpenSaveStatsDialog: () => () => {},\r\n  requestStatsUpdate: () => {},\r\n  onMiniViewStatsUpdate: () => () => {},\r\n  toggleMiniView: () => {},\r\n  updateTraySettings: () => Promise.resolve({ success: true }),\r\n  quitApp: () => console.log('개발용 quitApp 호출'),\r\n  toggleWindow: () => console.log('개발용 toggleWindow 호출'),\r\n  onBackgroundModeChange: () => () => {},\r\n  onTrayCommand: () => () => {},\r\n  restartApp: () => console.log('개발용 restartApp 호출'),\r\n  showRestartPrompt: () => console.log('개발용 showRestartPrompt 호출'),\r\n  closeWindow: () => console.log('개발용 closeWindow 호출'),\r\n  getDarkMode: () => Promise.resolve(false),\r\n  getTypingStats: () => Promise.resolve({\r\n    keyCount: 0,\r\n    typingTime: 0,\r\n    accuracy: 100\r\n  }),\r\n  getPlatform: () => Promise.resolve(\r\n    typeof navigator !== 'undefined' && navigator.platform \r\n      ? navigator.platform.indexOf('Win') > -1 \r\n        ? 'win32' \r\n        : navigator.platform.indexOf('Mac') > -1 \r\n          ? 'darwin' \r\n          : 'linux'\r\n      : 'unknown'\r\n  )\r\n});\r\n\r\n// useElectronApi 훅의 반환 타입 정의\r\ninterface ElectronApiHookResult {\r\n  electronAPI: ElectronAPI;\r\n  api: ElectronAPI;\r\n  isElectron: boolean;\r\n}\r\n\r\nexport function useElectronApi(): ElectronApiHookResult {\r\n  const [api, setApi] = useState<ElectronAPI>(createDummyElectronAPI());\r\n\r\n  useEffect(() => {\r\n    // 브라우저 환경 확인\r\n    if (typeof window !== 'undefined') {\r\n      // window 객체에 electronAPI가 있는지 확인\r\n      const electronAPI = (window as any).electronAPI as ElectronAPI | undefined;\r\n      \r\n      if (electronAPI) {\r\n        // Electron 환경에서 실행 중\r\n        setApi(electronAPI);\r\n      } else {\r\n        // 브라우저 환경에서 실행 중이므로 더미 API 생성\r\n        setApi(createDummyElectronAPI());\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return { \r\n    electronAPI: api,\r\n    api, // 호환성을 위해 alias로도 제공\r\n    isElectron: typeof (window as any).electronAPI !== 'undefined'\r\n  };\r\n}\r\n"],"names":["TypingAnalyzer","stats","_isTracking","safeStats","keyCount","defaultStats","typingTime","accuracy","electronAPI","electronApi","isElectron","useElectronApi","available","enabled","loading","error","computeWithGpu","toggleGpuAcceleration","useNativeGpu","gpuInfo","setGpuInfo","useState","setAvailable","setEnabled","setLoading","setError","lastComputationResult","setLastComputationResult","fetchGpuInfo","useCallback","response","getGpuInfo","success","acceleration_enabled","err","console","Error","message","enable","setGpuAcceleration","result","data","computationType","performGpuComputation","useEffect","setResult","useGpuAcceleration","setUseGpuAcceleration","electronStats","setElectronStats","unsubscribe","getElectronStats","getTypingStats","currentStats","interval","setInterval","onTypingStatsUpdate","clearInterval","loadGpuSetting","loadSettings","settings","useTypingAnalysisGpuAcceleration","fetch","ok","json","warn","analyzeTyping","dataToAnalyze","computeResult","result_summary","jsResult","analyzeTypingWithJS","div","className","styles","h2","span","Math","round","wpm","toFixed","performance_index","consistency_score","h3","style","width","fatigue_analysis","score","p","recommendation","minutes","consistency","min","time_factor","intensity_factor","createDummyElectronAPI","windowControl","log","action","onStatsSaved","startTracking","stopTracking","saveStats","Promise","resolve","darkMode","windowMode","saveSettings","getCurrentBrowserInfo","name","isGoogleDocs","title","getDebugInfo","isTracking","startTime","lastActiveTime","currentWindow","currentBrowser","totalChars","totalWords","totalCharsNoSpace","pages","platform","electronVersion","nodeVersion","setDarkMode","setWindowMode","getWindowMode","checkAutoStart","onAutoTrackingStarted","onSwitchTab","onOpenSaveStatsDialog","requestStatsUpdate","onMiniViewStatsUpdate","toggleMiniView","updateTraySettings","quitApp","toggleWindow","onBackgroundModeChange","onTrayCommand","restartApp","showRestartPrompt","closeWindow","getDarkMode","getPlatform","navigator","indexOf","api","setApi"],"sourceRoot":"","ignoreList":[]}