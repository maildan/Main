{"version":3,"file":"static/chunks/app/pages/analysis/page-596c221c48668c10.js","mappings":"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","sources":["webpack://_N_E/./src/app/pages/analysis/page.module.css","webpack://_N_E/./src/app/utils/memory-management.ts","webpack://_N_E/./src/app/utils/enum-converters.ts","webpack://_N_E/./src/app/utils/memory/optimizer.ts","webpack://_N_E/./src/app/utils/performance-metrics.ts","webpack://_N_E/./src/app/utils/memory/format-utils.ts","webpack://_N_E/./src/app/utils/memory/logger.ts","webpack://_N_E/./src/app/utils/log-utils.ts","webpack://_N_E/./src/app/utils/log-learning.ts","webpack://_N_E/./src/app/utils/format-utils.ts","webpack://_N_E/./src/app/components/LogAnalysisPanel.tsx","webpack://_N_E/./src/app/pages/analysis/page.tsx","webpack://_N_E/./src/app/components/LogAnalysisPanel.module.css","webpack://_N_E/?9a65"],"sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"page_container__Oa_Yd\",\"header\":\"page_header__oX1IH\",\"main\":\"page_main__HYnnv\",\"helpSection\":\"page_helpSection__urTHs\",\"helpContent\":\"page_helpContent__XR3c6\",\"actions\":\"page_actions__aQlQc\",\"secondaryButton\":\"page_secondaryButton__QCv7s\",\"root\":\"page_root__QiYEX\"};","/**\n * 메모리 관리 유틸리티\n *\n * 애플리케이션 메모리 관리 기능들을 통합하여 제공합니다.\n */\n\nimport { MemoryInfo, GCResult, OptimizationResult, OptimizationLevel } from '@/types';\nimport {\n  requestNativeMemoryInfo,\n  requestNativeGarbageCollection,\n  requestNativeMemoryOptimization,\n} from './native-memory-bridge';\n\n/**\n * 메모리 정보 가져오기\n */\nexport async function getMemoryInfo(): Promise<MemoryInfo | null> {\n  try {\n    return await requestNativeMemoryInfo();\n  } catch (error) {\n    console.error('메모리 정보 가져오기 오류:', error);\n    return null;\n  }\n}\n\n/**\n * 가비지 컬렉션 수행\n * @param _emergency 긴급 모드 여부\n */\nexport async function performGarbageCollection(\n  _emergency: boolean = false\n): Promise<GCResult | null> {\n  try {\n    return await requestNativeGarbageCollection();\n  } catch (error) {\n    console.error('가비지 컬렉션 오류:', error);\n    return null;\n  }\n}\n\n// 안쓰이는 변수 _formatBytes로 이름 변경\nconst _formatBytes = (bytes: number): string => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\n// 캐시 정리 함수 - 임시 구현\nfunction cleanAllCaches(): void {\n  // 캐시 정리 로직 구현\n  console.log('모든 캐시 정리');\n}\n\n// 가비지 콜렉션 유도 함수\nfunction suggestGarbageCollection(): void {\n  if (typeof window !== 'undefined' && (window as any).gc) {\n    (window as any).gc();\n  }\n  console.log('가비지 콜렉션 제안');\n}\n\n/**\n * 메모리 최적화 수행\n * @param level 최적화 레벨\n * @param emergency 긴급 모드 여부\n */\nexport async function optimizeMemory(\n  level: OptimizationLevel = OptimizationLevel.MEDIUM,\n  emergency: boolean = false\n): Promise<OptimizationResult | null> {\n  try {\n    // 현재 메모리 상태 기록\n    const memoryBefore = await requestNativeMemoryInfo();\n    console.log('최적화 전 메모리 상태:', memoryBefore);\n\n    console.log(`메모리 최적화 시작 (레벨: ${level}, 긴급: ${emergency})`);\n\n    // 네이티브 모듈 호출 - 숫자로 변환하여 전달\n    const result = await requestNativeMemoryOptimization(Number(level), emergency);\n\n    if (result) {\n      // 속성 이름 호환성 처리 - 일관된 속성 사용\n      const freedMB = result.freedMB || result.freed_mb || 0;\n\n      // 모든 필수 속성 지정 (타입 충돌 해결)\n      return {\n        success: result.success,\n        optimizationLevel: level,\n        timestamp: result.timestamp,\n        freedMemory: result.freedMemory || result.freed_memory || 0,\n        freedMB: freedMB,\n        optimization_level: level,\n        freed_memory: result.freedMemory || result.freed_memory || 0,\n        freed_mb: freedMB,\n        duration: result.duration,\n      };\n    }\n\n    return null;\n  } catch (error) {\n    console.error('메모리 최적화 오류:', error);\n    return null;\n  }\n}\n\n/**\n * 최적화 기록\n * @param level 최적화 레벨\n * @param success 성공 여부\n * @param implementation 구현 ('native' 또는 'js')\n * @param freedMemory 해제된 메모리 (MB)\n */\nfunction recordOptimization(\n  level: OptimizationLevel,\n  success: boolean,\n  implementation: string,\n  freedMemory: number\n): void {\n  try {\n    // 최적화 기록 로직\n    if (typeof localStorage !== 'undefined') {\n      const record = {\n        timestamp: Date.now(),\n        level,\n        success,\n        implementation,\n        freedMemory,\n      };\n\n      const existingRecordsJson = localStorage.getItem('memoryOptimizationRecords');\n      const records = existingRecordsJson ? JSON.parse(existingRecordsJson) : [];\n\n      // 최대 20개까지만 저장\n      records.push(record);\n      if (records.length > 20) {\n        records.shift();\n      }\n\n      // 저장\n      localStorage.setItem('memoryOptimizationRecords', JSON.stringify(records));\n    }\n  } catch (e) {\n    // 저장 오류 무시\n    console.warn('최적화 기록 저장 오류:', e);\n  }\n}\n\n/**\n * 메모리 사용량 문자열 포맷\n * @param info 메모리 정보\n */\nexport function formatMemoryInfo(info: MemoryInfo): Record<string, string> {\n  if (!info) return {};\n\n  const heapUsedMB =\n    info.heapUsed !== undefined\n      ? Math.round((info.heapUsed / (1024 * 1024)) * 10) / 10\n      : info.heapUsedMB || 0;\n\n  const heapTotalMB =\n    info.heapTotal !== undefined\n      ? Math.round((info.heapTotal / (1024 * 1024)) * 10) / 10\n      : 0;\n\n  const percent =\n    info.percentUsed !== undefined\n      ? info.percentUsed\n      : info.heapTotal && info.heapUsed\n        ? (info.heapUsed / info.heapTotal) * 100\n        : 0;\n\n  return {\n    heapUsed: `${heapUsedMB} MB`,\n    heapTotal: `${heapTotalMB} MB`,\n    percentUsed: `${Math.round(percent * 10) / 10}%`,\n    timestamp: new Date(info.timestamp || Date.now()).toLocaleString(),\n  };\n}\n\n/**\n * 메모리 상태 평가\n * @param info 메모리 정보\n */\nexport function evaluateMemoryStatus(info: MemoryInfo): {\n  status: string;\n  message: string;\n  percentUsed: number;\n  needsOptimization: boolean;\n} {\n  if (!info) {\n    return {\n      status: 'unknown',\n      message: '메모리 정보를 가져올 수 없음',\n      percentUsed: 0,\n      needsOptimization: false,\n    };\n  }\n\n  const percent =\n    info.percentUsed !== undefined\n      ? info.percentUsed\n      : info.heapTotal && info.heapUsed\n        ? (info.heapUsed / info.heapTotal) * 100\n        : 0;\n\n  if (percent > 90) {\n    return {\n      status: 'critical',\n      message: '메모리 사용량이 매우 높음 (최적화 필요)',\n      percentUsed: percent,\n      needsOptimization: true,\n    };\n  } else if (percent > 75) {\n    return {\n      status: 'warning',\n      message: '메모리 사용량이 높음',\n      percentUsed: percent,\n      needsOptimization: true,\n    };\n  } else if (percent > 60) {\n    return {\n      status: 'normal',\n      message: '메모리 사용량이 정상',\n      percentUsed: percent,\n      needsOptimization: false,\n    };\n  } else {\n    return {\n      status: 'good',\n      message: '메모리 사용량이 낮음',\n      percentUsed: percent,\n      needsOptimization: false,\n    };\n  }\n}\n\n/**\n * 빈 메모리 정보 객체 생성\n */\nexport function createEmptyMemoryInfo(): MemoryInfo {\n  return {\n    heapUsed: 0,\n    heapTotal: 0,\n    rss: 0,\n    heapUsedMB: 0,\n    rssMB: 0,\n    percentUsed: 0,\n    heapLimit: 0,\n    timestamp: Date.now(),\n  };\n}\n\n/**\n * 네이티브 메모리 정보를 앱 메모리 정보로 변환\n */\nexport function convertNativeMemoryInfo(nativeInfo: Record<string, unknown>): MemoryInfo {\n  if (!nativeInfo) {\n    return createEmptyMemoryInfo();\n  }\n  return {\n    timestamp: (nativeInfo.timestamp as number) || Date.now(),\n\n    // 숫자 타입으로 변환하여 지정\n    heapUsed: (nativeInfo.heap_used as number) || (nativeInfo.heapUsed as number) || 0,\n    heapTotal: (nativeInfo.heap_total as number) || (nativeInfo.heapTotal as number) || 0,\n    rss: (nativeInfo.rss as number) || 0,\n    heapUsedMB: (nativeInfo.heap_used_mb as number) || (nativeInfo.heapUsedMB as number) || 0,\n    rssMB: (nativeInfo.rss_mb as number) || (nativeInfo.rssMB as number) || 0,\n    percentUsed: (nativeInfo.percent_used as number) || (nativeInfo.percentUsed as number) || 0,\n    heapLimit: (nativeInfo.heap_limit as number) || (nativeInfo.heapLimit as number) || 0,\n    external: (nativeInfo.external as number) || 0,\n  };\n}\n","/**\n * 최적화 레벨 열거형 변환 유틸리티\n */\n\n// 필요한 열거형 타입들을 직접 정의\n// 최적화 레벨 열거형\nexport enum OptimizationLevel {\n  NONE = 0, // 최적화 없음\n  NORMAL = 0, // 일반 최적화\n  LOW = 1, // 낮은 수준의 최적화\n  MEDIUM = 2, // 중간 수준의 최적화\n  HIGH = 3, // 높은 수준의 최적화\n  AGGRESSIVE = 4, // 적극적인 최적화\n  CRITICAL = 4, // 중요 상황 최적화\n  EXTREME = 4, // 극단적인 최적화\n}\n\n// 네이티브 최적화 레벨 열거형\nexport enum NativeOptimizationLevel {\n  Normal = 0,\n  Low = 1,\n  Medium = 2,\n  High = 3,\n  Critical = 4,\n}\n\n// 메모리 이벤트 타입 열거형\nexport enum MemoryEventType {\n  PERIODIC_CHECK = 'periodic_check',\n  PAGE_NAVIGATION = 'page_navigation',\n  OPTIMIZATION = 'optimization',\n  COMPONENT_MOUNT = 'component_mount',\n  COMPONENT_UNMOUNT = 'component_unmount',\n  USER_ACTION = 'user_action',\n  GARBAGE_COLLECTION = 'garbage_collection',\n  RESOURCE_LOADING = 'resource_loading',\n  ERROR = 'error',\n  WARNING = 'warning',\n  CUSTOM = 'custom',\n}\n\n// 메모리 사용량 레벨 열거형\nexport enum MemoryUsageLevel {\n  LOW = 0,\n  MEDIUM = 1,\n  HIGH = 2,\n  CRITICAL = 3,\n}\n\n// GPU 작업 타입 열거형\nexport enum GpuTaskType {\n  MATRIX_MULTIPLICATION = 0,\n  TEXT_ANALYSIS = 1,\n  PATTERN_DETECTION = 2,\n  IMAGE_PROCESSING = 3,\n  DATA_AGGREGATION = 4,\n  TYPING_STATISTICS = 5,\n  CUSTOM = 6,\n}\n\n// 앱 레벨과 네이티브 레벨 간의 매핑 (중복 키 회피를 위해 함수로 대체)\nexport function getNativeOptimizationLevel(level: OptimizationLevel): NativeOptimizationLevel {\n  switch (level) {\n    case OptimizationLevel.NONE:\n    case OptimizationLevel.NORMAL:\n      return NativeOptimizationLevel.Normal;\n    case OptimizationLevel.LOW:\n      return NativeOptimizationLevel.Low;\n    case OptimizationLevel.MEDIUM:\n      return NativeOptimizationLevel.Medium;\n    case OptimizationLevel.HIGH:\n      return NativeOptimizationLevel.High;\n    case OptimizationLevel.AGGRESSIVE:\n    case OptimizationLevel.CRITICAL:\n    case OptimizationLevel.EXTREME:\n      return NativeOptimizationLevel.Critical;\n    default:\n      return NativeOptimizationLevel.Medium; // 기본값\n  }\n}\n\n// 네이티브 레벨에서 앱 레벨로의 매핑 (함수로 구현)\nexport function getAppOptimizationLevel(level: NativeOptimizationLevel): OptimizationLevel {\n  switch (level) {\n    case NativeOptimizationLevel.Normal:\n      return OptimizationLevel.NORMAL;\n    case NativeOptimizationLevel.Low:\n      return OptimizationLevel.LOW;\n    case NativeOptimizationLevel.Medium:\n      return OptimizationLevel.MEDIUM;\n    case NativeOptimizationLevel.High:\n      return OptimizationLevel.HIGH;\n    case NativeOptimizationLevel.Critical:\n      return OptimizationLevel.CRITICAL;\n    default:\n      return OptimizationLevel.MEDIUM; // 기본값\n  }\n}\n\n/**\n * 최적화 레벨 문자열을 열거형으로 변환\n * @param level 레벨 문자열 또는 숫자\n */\nexport function parseOptimizationLevel(level: string | number): OptimizationLevel {\n  if (typeof level === 'number') {\n    if (level >= 0 && level <= 4) {\n      return level as OptimizationLevel;\n    }\n    return OptimizationLevel.NORMAL;\n  }\n\n  switch (level.toLowerCase()) {\n    case 'normal':\n      return OptimizationLevel.NORMAL;\n    case 'low':\n      return OptimizationLevel.LOW;\n    case 'medium':\n      return OptimizationLevel.MEDIUM;\n    case 'high':\n      return OptimizationLevel.HIGH;\n    case 'critical':\n      return OptimizationLevel.CRITICAL;\n    default:\n      // 숫자 문자열인 경우 변환 시도\n      const num = parseInt(level, 10);\n      if (!isNaN(num) && num >= 0 && num <= 4) {\n        return num as OptimizationLevel;\n      }\n      return OptimizationLevel.NORMAL;\n  }\n}\n\n/**\n * 최적화 레벨을 사람이 읽기 쉬운 문자열로 변환\n * @param level 최적화 레벨\n */\nexport function formatOptimizationLevel(level: OptimizationLevel): string {\n  switch (level) {\n    case OptimizationLevel.NORMAL:\n      return '일반';\n    case OptimizationLevel.LOW:\n      return '낮음';\n    case OptimizationLevel.MEDIUM:\n      return '중간';\n    case OptimizationLevel.HIGH:\n      return '높음';\n    case OptimizationLevel.CRITICAL:\n      return '위험';\n    default:\n      return '알 수 없음';\n  }\n}\n\n/**\n * 메모리 이벤트 타입 포맷팅\n */\nexport function formatMemoryEventType(eventType: MemoryEventType): string {\n  switch (eventType) {\n    case MemoryEventType.PERIODIC_CHECK:\n      return '주기적 확인';\n    case MemoryEventType.PAGE_NAVIGATION:\n      return '페이지 탐색';\n    case MemoryEventType.OPTIMIZATION:\n      return '최적화';\n    case MemoryEventType.COMPONENT_MOUNT:\n      return '컴포넌트 마운트';\n    case MemoryEventType.COMPONENT_UNMOUNT:\n      return '컴포넌트 언마운트';\n    case MemoryEventType.USER_ACTION:\n      return '사용자 액션';\n    case MemoryEventType.GARBAGE_COLLECTION:\n      return '가비지 컬렉션';\n    case MemoryEventType.RESOURCE_LOADING:\n      return '리소스 로딩';\n    case MemoryEventType.ERROR:\n      return '오류';\n    case MemoryEventType.WARNING:\n      return '경고';\n    case MemoryEventType.CUSTOM:\n      return '사용자 정의';\n    default:\n      return '알 수 없음';\n  }\n}\n\n/**\n * GPU 작업 타입 정규화\n */\nexport function normalizeGpuTaskType(taskType: string | GpuTaskType): string {\n  if (typeof taskType === 'number') {\n    // 열거형에서 문자열로 변환\n    switch (taskType) {\n      case GpuTaskType.MATRIX_MULTIPLICATION:\n        return 'matrix';\n      case GpuTaskType.TEXT_ANALYSIS:\n        return 'text';\n      case GpuTaskType.PATTERN_DETECTION:\n        return 'pattern';\n      case GpuTaskType.IMAGE_PROCESSING:\n        return 'image';\n      case GpuTaskType.DATA_AGGREGATION:\n        return 'data';\n      case GpuTaskType.TYPING_STATISTICS:\n        return 'typing';\n      case GpuTaskType.CUSTOM:\n        return 'custom';\n      default:\n        return 'matrix'; // 기본값\n    }\n  }\n\n  // 이미 문자열인 경우 표준화\n  switch (taskType.toLowerCase()) {\n    case 'matrix':\n    case 'matrixmultiplication':\n    case 'matrix-multiplication':\n      return 'matrix';\n    case 'text':\n    case 'textanalysis':\n    case 'text-analysis':\n      return 'text';\n    case 'pattern':\n    case 'patterndetection':\n    case 'pattern-detection':\n      return 'pattern';\n    case 'image':\n    case 'imageprocessing':\n    case 'image-processing':\n      return 'image';\n    case 'data':\n    case 'dataaggregation':\n    case 'data-aggregation':\n      return 'data';\n    case 'typing':\n    case 'typingstatistics':\n    case 'typing-statistics':\n      return 'typing';\n    case 'custom':\n      return 'custom';\n    default:\n      return 'matrix'; // 기본값\n  }\n}\n\n/**\n * 메모리 사용량 레벨 가져오기\n */\nexport function getMemoryUsageLevel(percentUsed: number): MemoryUsageLevel {\n  if (percentUsed >= 90) {\n    return MemoryUsageLevel.CRITICAL;\n  } else if (percentUsed >= 70) {\n    return MemoryUsageLevel.HIGH;\n  } else if (percentUsed >= 50) {\n    return MemoryUsageLevel.MEDIUM;\n  } else {\n    return MemoryUsageLevel.LOW;\n  }\n}\n\n/**\n * 숫자를 적절한 최적화 레벨로 안전하게 변환\n */\nexport function safeOptimizationLevel(level: number): OptimizationLevel {\n  switch (level) {\n    case 0:\n      return OptimizationLevel.NORMAL;\n    case 1:\n      return OptimizationLevel.LOW;\n    case 2:\n      return OptimizationLevel.MEDIUM;\n    case 3:\n      return OptimizationLevel.HIGH;\n    case 4:\n      return OptimizationLevel.CRITICAL;\n    default:\n      console.warn(`유효하지 않은 최적화 레벨 (${level}), 기본값 사용`);\n      return OptimizationLevel.MEDIUM;\n  }\n}\n\n/**\n * 타입 변환 유틸리티 - 네이티브 메모리 정보를 앱 메모리 정보로 변환\n */\nexport function convertNativeMemoryInfo(nativeInfo: any): any {\n  if (!nativeInfo) return null;\n\n  return {\n    timestamp: nativeInfo.timestamp || Date.now(),\n    heap_used: nativeInfo.heap_used,\n    heapUsed: nativeInfo.heap_used,\n    heap_total: nativeInfo.heap_total,\n    heapTotal: nativeInfo.heap_total,\n    heap_used_mb: nativeInfo.heap_used_mb,\n    heapUsedMB: nativeInfo.heap_used_mb,\n    rss: nativeInfo.rss,\n    rss_mb: nativeInfo.rss_mb,\n    rssMB: nativeInfo.rss_mb,\n    percent_used: nativeInfo.percent_used,\n    percentUsed: nativeInfo.percent_used,\n    heap_limit: nativeInfo.heap_limit,\n    heapLimit: nativeInfo.heap_limit,\n  };\n}\n\n/**\n * 타입 변환 유틸리티 - 네이티브 GC 결과를 앱 GC 결과로 변환\n */\nexport function convertNativeGCResult(nativeResult: any): any {\n  if (!nativeResult) return null;\n\n  return {\n    success: nativeResult.success,\n    timestamp: nativeResult.timestamp || Date.now(),\n    freedMemory: nativeResult.freed_memory,\n    freed_memory: nativeResult.freed_memory,\n    freedMB: nativeResult.freed_mb,\n    freed_mb: nativeResult.freed_mb,\n    error: nativeResult.error,\n  };\n}\n\n/**\n * 최적화 레벨 변환 함수들\n */\nexport function getOptimizationLevelFromNumber(level: number): OptimizationLevel {\n  switch (level) {\n    case 0:\n      return OptimizationLevel.NONE;\n    case 1:\n      return OptimizationLevel.LOW;\n    case 2:\n      return OptimizationLevel.MEDIUM;\n    case 3:\n      return OptimizationLevel.HIGH;\n    case 4:\n      return OptimizationLevel.AGGRESSIVE;\n    default:\n      return OptimizationLevel.MEDIUM;\n  }\n}\n\nexport function getOptimizationLevelFromString(level: string): OptimizationLevel {\n  switch (level.toLowerCase()) {\n    case 'none':\n      return OptimizationLevel.NONE;\n    case 'low':\n      return OptimizationLevel.LOW;\n    case 'medium':\n      return OptimizationLevel.MEDIUM;\n    case 'high':\n      return OptimizationLevel.HIGH;\n    case 'aggressive':\n      return OptimizationLevel.AGGRESSIVE;\n    default:\n      return OptimizationLevel.MEDIUM;\n  }\n}\n\n// 인덱스 식이 'number' 형식이 아니므로 발생하는 오류 수정\nexport function getOptimizationLevelName(level: OptimizationLevel): string {\n  const names: Record<OptimizationLevel, string> = {\n    [OptimizationLevel.NONE]: '없음',\n    [OptimizationLevel.LOW]: '낮음',\n    [OptimizationLevel.MEDIUM]: '중간',\n    [OptimizationLevel.HIGH]: '높음',\n    [OptimizationLevel.AGGRESSIVE]: '적극적',\n  };\n\n  return names[level] || '중간';\n}\n\n/**\n * toNativeOptimizationLevel 함수의 별칭 - 이전 코드와의 호환성 유지를 위해 추가\n * @param level 최적화 레벨\n * @returns 네이티브 최적화 레벨\n */\nexport function toNativeOptimizationLevel(level: OptimizationLevel): NativeOptimizationLevel {\n  return getNativeOptimizationLevel(level);\n}\n","/**\n * 메모리 최적화 코어 유틸리티\n *\n * 이 모듈은 네이티브 모듈 기반 최적화 함수를 제공합니다.\n * 모든 최적화 작업은 Rust로 구현된 네이티브 모듈을 통해 수행됩니다.\n */\n\nimport { requestNativeMemoryOptimization } from '../native-memory-bridge';\nimport { suggestGarbageCollection, requestGC } from './gc-utils';\nimport { OptimizationLevel as AppOptimizationLevel } from '@/types';\nimport { OptimizationLevel as NativeOptimizationLevel } from '@/types/native-module';\nimport { getNativeOptimizationLevel } from '../enum-converters';\n\n/**\n * 메모리 최적화 수행 함수 (내부 구현)\n * 네이티브 모듈을 통해 메모리 최적화를 수행합니다.\n *\n * @param {boolean} aggressive 적극적 최적화 여부\n * @returns {Promise<boolean>} 성공 여부\n */\nexport async function internalOptimizeMemory(aggressive: boolean = false): Promise<boolean> {\n  try {\n    // 적절한 최적화 레벨 선택\n    const appLevel = aggressive ? AppOptimizationLevel.HIGH : AppOptimizationLevel.MEDIUM;\n    // 명시적 변환 함수 사용\n    const nativeLevel = getNativeOptimizationLevel(appLevel);\n\n    // 네이티브 모듈 최적화 호출\n    const result = await requestNativeMemoryOptimization(nativeLevel, aggressive);\n\n    if (!result) {\n      console.warn('네이티브 메모리 최적화 실패');\n      return false;\n    }\n\n    // 브라우저에 GC 힌트 제공\n    suggestGarbageCollection();\n\n    // Electron 메인 프로세스에 메모리 최적화 요청 (지원되는 경우)\n    if (window.electronAPI && window.electronAPI.optimizeMemory) {\n      window.electronAPI.optimizeMemory(aggressive);\n    }\n\n    return true;\n  } catch (error) {\n    console.error('메모리 최적화 중 오류:', error);\n    return false;\n  }\n}\n\n/**\n * 메모리 최적화 수행 함수 (공개 API)\n *\n * @param {boolean} deepCleanup 심층 정리 여부\n * @returns {Promise<boolean>} 성공 여부\n */\nexport async function optimizeMemory(deepCleanup = false): Promise<boolean> {\n  try {\n    // 적극적인 플래그 설정\n    const aggressive = deepCleanup;\n\n    // 내부 최적화 함수 호출\n    const result = await internalOptimizeMemory(aggressive);\n\n    // GC 요청\n    await requestGC(deepCleanup);\n\n    return result;\n  } catch (error) {\n    console.error('메모리 최적화 오류:', error);\n    return false;\n  }\n}\n","/**\n * 성능 측정 유틸리티\n *\n * 이 모듈은 네이티브 모듈과 JavaScript 구현 간의 성능을 비교하기 위한\n * 도구를 제공합니다. 측정 결과는 로그와 대시보드에 표시될 수 있습니다.\n */\n\nimport { OptimizationLevel } from '@/types';\nimport { getNativeOptimizationLevel } from './enum-converters';\nimport { requestNativeMemoryOptimization } from './native-memory-bridge';\nimport { internalOptimizeMemory } from './memory/optimizer';\nimport { getMemoryInfo } from './memory/memory-info';\nimport { getNativeModuleStatus } from './nativeModuleClient';\n\n// OptimizationLevel 상수 값 정의 (AppOptimizationLevel 타입을 값으로 대체)\nconst OPTIMIZATION_LEVEL = {\n  NORMAL: 0,\n  LOW: 1,\n  MEDIUM: 2,\n  HIGH: 3,\n  EXTREME: 4,\n} as const;\n\n// 성능 측정 결과 인터페이스\nexport interface PerformanceResult {\n  operationName: string;\n  nativeImplementation: {\n    executionTime: number;\n    success: boolean;\n    error?: string;\n  };\n  jsImplementation: {\n    executionTime: number;\n    success: boolean;\n    error?: string;\n  };\n  speedupFactor: number;\n  timestamp: number;\n  memoryBefore: any;\n  memoryAfter: any;\n  memoryDifference: number;\n}\n\n// 성능 측정 이력\nconst performanceHistory: PerformanceResult[] = [];\n\n/**\n * 메모리 최적화 성능 비교 실행\n * @param level 최적화 레벨\n * @param emergency 긴급 모드 여부\n * @returns Promise<PerformanceResult> 성능 측정 결과\n */\nexport async function benchmarkMemoryOptimization(\n  level: number = OPTIMIZATION_LEVEL.MEDIUM,\n  emergency: boolean = false\n): Promise<PerformanceResult> {\n  // 초기 메모리 상태 기록\n  const memoryBefore = (await getMemoryInfo()) || { heapUsedMB: 0 };\n\n  // 네이티브 구현 테스트\n  let nativeResult = {\n    executionTime: 0,\n    success: false,\n    error: undefined as string | undefined,\n  };\n\n  // 네이티브 모듈 사용 가능 여부 확인\n  const { available } = await getNativeModuleStatus();\n\n  if (available) {\n    try {\n      const nativeStartTime = performance.now();\n      const nativeLevel = getNativeOptimizationLevel(level as unknown as OptimizationLevel);\n      await requestNativeMemoryOptimization(nativeLevel, emergency);\n      const nativeEndTime = performance.now();\n\n      nativeResult = {\n        executionTime: nativeEndTime - nativeStartTime,\n        success: true,\n        error: undefined,\n      };\n    } catch (error) {\n      nativeResult.error = error instanceof Error ? error.message : '알 수 없는 오류';\n    }\n  } else {\n    nativeResult.error = '네이티브 모듈을 사용할 수 없음';\n  }\n\n  // 자바스크립트 구현 테스트\n  let jsResult = {\n    executionTime: 0,\n    success: false,\n    error: undefined as string | undefined,\n  };\n\n  try {\n    const jsStartTime = performance.now();\n    await internalOptimizeMemory(emergency);\n    const jsEndTime = performance.now();\n\n    jsResult = {\n      executionTime: jsEndTime - jsStartTime,\n      success: true,\n      error: undefined,\n    };\n  } catch (error) {\n    jsResult.error = error instanceof Error ? error.message : '알 수 없는 오류';\n  }\n\n  // 최종 메모리 상태 기록\n  const memoryAfter = (await getMemoryInfo()) || { heapUsedMB: 0 };\n  const _freedMB = (memoryBefore.heapUsedMB ?? 0) - (memoryAfter.heapUsedMB ?? 0); // 사용하지 않는 변수 앞에 _ 추가\n\n  // 성능 비교 결과 계산\n  const speedupFactor =\n    jsResult.success && nativeResult.success && nativeResult.executionTime > 0\n      ? jsResult.executionTime / nativeResult.executionTime\n      : 0;\n\n  // 메모리 차이 계산 (MB 단위)\n  const memoryDifference = (memoryBefore?.heapUsedMB ?? 0) - (memoryAfter?.heapUsedMB ?? 0);\n\n  // 결과 객체 생성\n  const result: PerformanceResult = {\n    operationName: `Memory Optimization (Level ${level}, Emergency: ${emergency})`,\n    nativeImplementation: nativeResult,\n    jsImplementation: jsResult,\n    speedupFactor,\n    timestamp: Date.now(),\n    memoryBefore,\n    memoryAfter,\n    memoryDifference,\n  };\n\n  // 이력에 추가\n  performanceHistory.push(result);\n  if (performanceHistory.length > 50) {\n    performanceHistory.shift(); // 최대 50개 항목 유지\n  }\n\n  // 결과 로깅\n  logPerformanceResult(result);\n\n  return result;\n}\n\n/**\n * 성능 측정 결과 로깅\n * @param result 성능 측정 결과\n */\nfunction logPerformanceResult(result: PerformanceResult): void {\n  console.group('🔍 성능 비교 결과');\n  console.log(`작업: ${result.operationName}`);\n  console.log(`시간: ${new Date(result.timestamp).toLocaleTimeString()}`);\n\n  console.group('⚙️ 네이티브 구현');\n  console.log(`실행 시간: ${result.nativeImplementation.executionTime.toFixed(2)}ms`);\n  console.log(`성공 여부: ${result.nativeImplementation.success ? '✅' : '❌'}`);\n  if (result.nativeImplementation.error) {\n    console.error(`오류: ${result.nativeImplementation.error}`);\n  }\n  console.groupEnd();\n\n  console.group('🔧 JavaScript 구현');\n  console.log(`실행 시간: ${result.jsImplementation.executionTime.toFixed(2)}ms`);\n  console.log(`성공 여부: ${result.jsImplementation.success ? '✅' : '❌'}`);\n  if (result.jsImplementation.error) {\n    console.error(`오류: ${result.jsImplementation.error}`);\n  }\n  console.groupEnd();\n\n  if (result.speedupFactor > 0) {\n    console.log(\n      `⚡ 속도 향상: ${result.speedupFactor.toFixed(2)}x ${result.speedupFactor > 1 ? '(네이티브가 더 빠름)' : '(JS가 더 빠름)'}`\n    );\n  }\n\n  console.log(\n    `💾 메모리 차이: ${result.memoryDifference.toFixed(2)}MB ${result.memoryDifference > 0 ? '감소' : '증가'}`\n  );\n  console.groupEnd();\n}\n\n/**\n * 성능 측정 이력 가져오기\n * @returns 성능 측정 이력 배열\n */\nexport function getPerformanceHistory(): PerformanceResult[] {\n  return [...performanceHistory];\n}\n\n// optimizeMemory 함수 추가 (실제로는 requestNativeMemoryOptimization을 래핑)\nasync function optimizeMemory(level: number, emergency: boolean = false): Promise<void> {\n  await requestNativeMemoryOptimization(level as unknown as number, emergency);\n}\n\n/**\n * 메모리 최적화 작업에 대한 벤치마크 실행\n * 모든 최적화 레벨에 대해 성능 측정을 실행합니다.\n */\nexport async function runComprehensiveBenchmark(): Promise<PerformanceResult[]> {\n  const results: PerformanceResult[] = [];\n\n  // 모든 최적화 레벨에 대해 테스트\n  const optimizationLevel = 2; // 중간 레벨 사용\n  for (let level = 0; level <= 4; level++) {\n    results.push(await benchmarkMemoryOptimization(level, false));\n    // 테스트 간 간격을 두어 이전 테스트의 영향 최소화\n    await new Promise(resolve => setTimeout(resolve, 1000));\n  }\n\n  // 긴급 모드 테스트\n  await optimizeMemory(optimizationLevel);\n  results.push(await benchmarkMemoryOptimization(OPTIMIZATION_LEVEL.EXTREME, true));\n\n  // 종합 결과 로깅\n  console.group('📊 종합 벤치마크 결과');\n  console.log(`총 ${results.length}개 테스트 실행됨`);\n\n  const avgSpeedup = results.reduce((sum, r) => sum + r.speedupFactor, 0) / results.length;\n  console.log(`평균 속도 향상: ${avgSpeedup.toFixed(2)}x`);\n\n  console.log(`최고 속도 향상: ${Math.max(...results.map(r => r.speedupFactor)).toFixed(2)}x`);\n  console.log(\n    `총 해제된 메모리: ${results.reduce((sum, r) => sum + r.memoryDifference, 0).toFixed(2)}MB`\n  );\n  console.groupEnd();\n\n  return results;\n}\n\n/**\n * 두 가지 최적화 레벨을 맵핑하는 유틸리티\n */\nexport function convertOptimizationLevel(level: number): number {\n  const _appOptimizationLevel = 2; // 사용하지 않는 변수 앞에 _ 추가\n  // someFunction 제거\n  return level;\n}\n","/**\r\n * 메모리 관련 포맷 유틸리티\r\n */\r\n\r\nimport { MemoryInfo } from '@/types';\r\n\r\n// 기본 메모리 정보 인터페이스 (파일에서만 사용)\r\ninterface OriginalMemoryInfo {\r\n  heapUsed: number;\r\n  heapTotal: number;\r\n  rss: number;\r\n  external?: number;\r\n}\r\n\r\n/**\r\n * 바이트 단위를 적절한 단위로 포맷팅\r\n * @param bytes 바이트 값\r\n * @param decimals 소수점 자릿수\r\n * @returns 포맷팅된 문자열\r\n */\r\nexport function formatBytes(bytes: number, decimals: number = 2): string {\r\n  if (bytes === 0) return '0 Bytes';\r\n\r\n  const k = 1024;\r\n  const dm = decimals < 0 ? 0 : decimals;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\r\n\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\r\n}\r\n\r\n/**\r\n * 메모리 사용량을 퍼센트로 포맷팅\r\n * @param percent 메모리 사용 백분율\r\n */\r\nexport function formatMemoryPercent(percent: number): string {\r\n  return `${Math.round(percent)}%`;\r\n}\r\n\r\n/**\r\n * 메모리 크기를 MB 단위로 포맷팅\r\n * @param bytes 바이트 수\r\n */\r\nexport function formatMegabytes(bytes: number): string {\r\n  const mb = bytes / (1024 * 1024);\r\n  return `${mb.toFixed(2)} MB`;\r\n}\r\n\r\n/**\r\n * 퍼센트 계산\r\n * @param value - 현재 값\r\n * @param total - 전체 값\r\n * @returns 백분율 값\r\n */\r\nexport function calculatePercentage(value: number, total: number): number {\r\n  if (total === 0) return 0;\r\n  return Math.round((value / total) * 100 * 10) / 10;\r\n}\r\n\r\n/**\r\n * 메모리 사용량 정보를 포맷팅합니다.\r\n * @param memoryInfo - 메모리 정보 객체\r\n * @returns 포맷팅된 메모리 정보 문자열\r\n */\r\nexport function formatMemoryInfo(memoryInfo: OriginalMemoryInfo): string {\r\n  if (!memoryInfo) return 'No memory information available';\r\n\r\n  const { heapUsed, heapTotal, rss } = memoryInfo;\r\n  const usedPercent = calculatePercentage(heapUsed, heapTotal);\r\n\r\n  return `Memory Usage: ${formatBytes(heapUsed)} / ${formatBytes(heapTotal)} (${usedPercent}%)\r\nRSS: ${formatBytes(rss)}`;\r\n}\r\n\r\n/**\r\n * 메모리 사용량을 MB 단위로 변환합니다.\r\n * @param bytes - 바이트 단위의 메모리 크기\r\n * @returns MB 단위의 메모리 크기\r\n */\r\nexport function bytesToMB(bytes: number): number {\r\n  return Math.round((bytes / 1024 / 1024) * 100) / 100;\r\n}\r\n\r\n/**\r\n * 메모리 정보 표준화 함수\r\n * 다양한 형태의 메모리 정보를 일관된 포맷으로 변환\r\n * \r\n * @param info 메모리 정보 객체\r\n * @returns 표준화된 메모리 정보\r\n */\r\nexport function normalizeMemoryInfo(info: Partial<MemoryInfo>): MemoryInfo {\r\n  return {\r\n    heapUsed: info.heapUsed || 0,\r\n    heapTotal: info.heapTotal || 0,\r\n    heapLimit: info.heapLimit || 0,\r\n    heapUsedMB: info.heapUsedMB || 0,\r\n    percentUsed: info.percentUsed || 0,\r\n    rss: info.rss || 0,\r\n    rssMB: info.rssMB || 0,\r\n    external: info.external || 0,\r\n    timestamp: info.timestamp || Date.now(),\r\n  };\r\n}\r\n\r\nexport default {\r\n  formatBytes\r\n};\r\n","/**\n * 메모리 사용량 로깅 및 분석 유틸리티\n *\n * 장기적인 메모리 사용 패턴 분석과 최적화 전략 수립에 필요한\n * 데이터를 수집하고 저장합니다.\n */\n\nimport { getMemoryInfo } from '../memory-management';\nimport { getPerformanceHistory } from '../performance-metrics';\nimport { normalizeMemoryInfo } from './format-utils';\n// MemoryEventType을 src/types에서 가져옵니다\nimport { MemoryEventType, MemoryInfo } from '@/types';\n\n/**\n * 메모리 로거 모듈\n *\n * 메모리 사용량 및 관련 이벤트를 로깅하기 위한 유틸리티\n */\n\n// 로그 레벨 정의\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n}\n\n// 로그 항목 인터페이스\nexport interface LogEntry {\n  timestamp: number;\n  level: LogLevel;\n  message: string;\n  data?: Record<string, unknown>;\n}\n\n// 로그 설정 인터페이스\nexport interface LoggerOptions {\n  minLevel?: LogLevel;\n  maxLogs?: number;\n  printToConsole?: boolean;\n  moduleName?: string;\n}\n\n// 기본 로거 옵션\nconst DEFAULT_OPTIONS: LoggerOptions = {\n  minLevel: LogLevel.INFO,\n  maxLogs: 100,\n  printToConsole: true,\n  moduleName: 'memory',\n};\n\n/**\n * 메모리 로거 클래스\n */\nexport class MemoryLogger {\n  private logs: LogEntry[] = [];\n  private options: LoggerOptions;\n\n  constructor(options: LoggerOptions = {}) {\n    this.options = { ...DEFAULT_OPTIONS, ...options };\n  }\n\n  /**\n   * 로그 기록\n   * @param level 로그 레벨\n   * @param message 메시지\n   * @param data 추가 데이터\n   */\n  private log(level: LogLevel, message: string, data?: Record<string, unknown>): void {\n    // 설정된 최소 레벨보다 낮은 로그는 무시\n    if (level < this.options.minLevel!) {\n      return;\n    }\n\n    // 로그 항목 생성\n    const entry: LogEntry = {\n      timestamp: Date.now(),\n      level,\n      message,\n      data,\n    };\n\n    // 로그 배열에 추가\n    this.logs.push(entry);\n\n    // 로그 개수 제한\n    if (this.logs.length > this.options.maxLogs!) {\n      this.logs.shift();\n    }\n\n    // 콘솔 출력 (설정된 경우)\n    if (this.options.printToConsole) {\n      this.printToConsole(entry);\n    }\n  }\n\n  /**\n   * 콘솔에 로그 출력\n   * @param entry 로그 항목\n   */\n  private printToConsole(entry: LogEntry): void {\n    const timestamp = new Date(entry.timestamp).toISOString();\n    const prefix = this.options.moduleName ? `[${this.options.moduleName}]` : '';\n\n    switch (entry.level) {\n      case LogLevel.DEBUG:\n        console.debug(`${timestamp} ${prefix} ${entry.message}`, entry.data);\n        break;\n      case LogLevel.INFO:\n        console.info(`${timestamp} ${prefix} ${entry.message}`, entry.data);\n        break;\n      case LogLevel.WARN:\n        console.warn(`${timestamp} ${prefix} ${entry.message}`, entry.data);\n        break;\n      case LogLevel.ERROR:\n        console.error(`${timestamp} ${prefix} ${entry.message}`, entry.data);\n        break;\n    }\n  }\n\n  /**\n   * 디버그 로그 기록\n   * @param message 메시지\n   * @param data 추가 데이터\n   */\n  debug(message: string, data?: Record<string, unknown>): void {\n    this.log(LogLevel.DEBUG, message, data);\n  }\n\n  /**\n   * 정보 로그 기록\n   * @param message 메시지\n   * @param data 추가 데이터\n   */\n  info(message: string, data?: Record<string, unknown>): void {\n    this.log(LogLevel.INFO, message, data);\n  }\n\n  /**\n   * 경고 로그 기록\n   * @param message 메시지\n   * @param data 추가 데이터\n   */\n  warn(message: string, data?: Record<string, unknown>): void {\n    this.log(LogLevel.WARN, message, data);\n  }\n\n  /**\n   * 오류 로그 기록\n   * @param message 메시지\n   * @param data 추가 데이터\n   */\n  error(message: string, data?: Record<string, unknown>): void {\n    this.log(LogLevel.ERROR, message, data);\n  }\n\n  /**\n   * 모든 로그 가져오기\n   */\n  getLogs(): LogEntry[] {\n    return [...this.logs];\n  }\n\n  /**\n   * 특정 레벨 이상의 로그만 가져오기\n   * @param level 최소 로그 레벨\n   */\n  getLogsByLevel(level: LogLevel): LogEntry[] {\n    return this.logs.filter(entry => entry.level >= level);\n  }\n\n  /**\n   * 오류 로그만 가져오기\n   */\n  getErrorLogs(): LogEntry[] {\n    return this.logs.filter(entry => entry.level === LogLevel.ERROR);\n  }\n}\n\n// 기본 로거 인스턴스\nexport const memoryLogger = new MemoryLogger();\nexport const logger = memoryLogger; // 편의를 위한 별칭\n\n// 편의성을 위한 기본 함수 내보내기\nexport const debug = memoryLogger.debug.bind(memoryLogger);\nexport const info = memoryLogger.info.bind(memoryLogger);\nexport const warn = memoryLogger.warn.bind(memoryLogger);\nexport const error = memoryLogger.error.bind(memoryLogger);\n\n// 메모리 로그 엔트리 인터페이스\nexport interface MemoryLogEntry {\n  timestamp: number;\n  info: MemoryInfo;\n  eventType: MemoryEventType;\n  eventDescription?: string;\n  componentId?: string;\n  route?: string;\n}\n\n// 메모리 사용 통계 인터페이스\nexport interface MemoryUsageStats {\n  averageUsage: number;\n  peakUsage: number;\n  minUsage: number;\n  lastUsage: number;\n  usageOverTime: Array<{ timestamp: number; usageMB: number }>;\n  optimizationEvents: Array<{ timestamp: number; freedMemory: number }>;\n  gcEvents: Array<{ timestamp: number; freedMemory: number }>;\n  leakSuspects: Array<{ componentId: string; frequency: number }>;\n}\n\n// 누락된 변수와 상수 정의 추가\nconst memoryLogs: MemoryLogEntry[] = [];\nconst MAX_LOG_ENTRIES = 1000;\nconst MEMORY_LOG_DB = 'memory_log_db';\nconst INDEXEDDB_STORE = 'memory_logs';\n\n/**\n * 메모리 사용량 로깅\n * @param eventType 이벤트 타입\n * @param eventDescription 이벤트 설명 (선택)\n * @param componentId 컴포넌트 ID (선택)\n * @param route 현재 라우트 (선택)\n */\nexport async function logMemoryUsage(\n  eventType: MemoryEventType,\n  eventDescription?: string,\n  componentId?: string,\n  route?: string\n): Promise<MemoryLogEntry> {\n  // 현재 메모리 정보 가져오기\n  const rawMemoryInfo = (await getMemoryInfo()) || {\n    heap_used: 0,\n    heap_total: 0,\n    heap_used_mb: 0,\n    heapUsed: 0,\n    heapTotal: 0,\n    heapUsedMB: 0,\n    rss: 0,\n    rss_mb: 0,\n    rssMB: 0,\n    percent_used: 0,\n    percentUsed: 0,\n    timestamp: Date.now(),\n  };\n\n  // 표준화된 MemoryInfo 인터페이스로 변환\n  const standardizedInfo = normalizeMemoryInfo(rawMemoryInfo as any);\n\n  // 현재 라우트 가져오기 (route 매개변수가 없는 경우)\n  if (!route && typeof window !== 'undefined') {\n    route = window.location.pathname;\n  }\n\n  // 로그 항목 생성\n  const logEntry: MemoryLogEntry = {\n    timestamp: Date.now(),\n    info: standardizedInfo,\n    eventType,\n    eventDescription,\n    componentId,\n    route,\n  };\n\n  // 인메모리 로그에 추가\n  memoryLogs.push(logEntry);\n\n  // 최대 개수 제한\n  if (memoryLogs.length > MAX_LOG_ENTRIES) {\n    memoryLogs.shift();\n  }\n\n  // IndexedDB에 저장 (백그라운드로 실행)\n  saveLogToIndexedDB(logEntry).catch(err => console.error('메모리 로그 저장 중 오류:', err));\n\n  return logEntry;\n}\n\n/**\n * 주기적인 메모리 모니터링 시작\n * @param intervalMs 체크 간격 (밀리초)\n * @returns 모니터링 중지 함수\n */\nexport function startMemoryMonitoring(intervalMs: number = 60000): () => void {\n  const intervalId = setInterval(() => {\n    logMemoryUsage(MemoryEventType.INFO);\n  }, intervalMs);\n\n  return () => clearInterval(intervalId);\n}\n\n/**\n * IndexedDB에 로그 저장\n * @param logEntry 로그 항목\n */\nasync function saveLogToIndexedDB(logEntry: MemoryLogEntry): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // IndexedDB가 사용 가능한지 확인\n    if (!window.indexedDB) {\n      reject(new Error('IndexedDB를 지원하지 않는 브라우저입니다'));\n      return;\n    }\n\n    // 데이터베이스 열기\n    const request = window.indexedDB.open(MEMORY_LOG_DB, 1);\n\n    // 데이터베이스 생성/업그레이드 이벤트\n    request.onupgradeneeded = event => {\n      const db = (event.target as IDBOpenDBRequest).result;\n\n      // 객체 저장소가 없으면 생성\n      if (!db.objectStoreNames.contains(INDEXEDDB_STORE)) {\n        db.createObjectStore(INDEXEDDB_STORE, { keyPath: 'timestamp' });\n      }\n    };\n\n    // 오류 처리\n    request.onerror = event => {\n      reject(new Error(`IndexedDB 오류: ${(event.target as IDBOpenDBRequest).error}`));\n    };\n\n    // 성공 처리\n    request.onsuccess = event => {\n      const db = (event.target as IDBOpenDBRequest).result;\n\n      try {\n        // 트랜잭션 시작\n        const transaction = db.transaction([INDEXEDDB_STORE], 'readwrite');\n        const store = transaction.objectStore(INDEXEDDB_STORE);\n\n        // 로그 항목 저장\n        const addRequest = store.add(logEntry);\n\n        addRequest.onsuccess = () => {\n          resolve();\n        };\n\n        addRequest.onerror = () => {\n          reject(new Error(`로그 항목 저장 실패: ${addRequest.error}`));\n        };\n\n        // 트랜잭션 완료 이벤트\n        transaction.oncomplete = () => {\n          db.close();\n        };\n      } catch (error) {\n        reject(error);\n      }\n    };\n  });\n}\n\n/**\n * 저장된 메모리 로그 가져오기\n * @param limit 가져올 최대 항목 수\n * @param startTime 시작 시간 (밀리초)\n * @param endTime 종료 시간 (밀리초)\n * @param eventTypes 필터링할 이벤트 타입 배열\n * @returns 로그 항목 배열\n */\nexport async function getMemoryLogs(\n  limit: number = 100,\n  startTime?: number,\n  endTime?: number,\n  eventTypes?: MemoryEventType[]\n): Promise<MemoryLogEntry[]> {\n  // 시간 기준 필터링\n  const filteredByTime = memoryLogs.filter((log: MemoryLogEntry) => {\n    if (startTime && log.timestamp < startTime) return false;\n    if (endTime && log.timestamp > endTime) return false;\n    return true;\n  });\n\n  // 이벤트 타입 기준 필터링\n  const filtered = eventTypes\n    ? filteredByTime.filter((log: MemoryLogEntry) =>\n        eventTypes.includes(log.eventType as MemoryEventType)\n      )\n    : filteredByTime;\n\n  // 최신 순으로 정렬하고 제한된 개수 반환\n  return filtered\n    .sort((a: MemoryLogEntry, b: MemoryLogEntry) => b.timestamp - a.timestamp)\n    .slice(0, limit);\n}\n\n/**\n * 메모리 사용 통계 분석\n * @param startTime 시작 시간 (밀리초)\n * @param endTime 종료 시간 (밀리초)\n * @returns 메모리 사용 통계\n */\nexport async function analyzeMemoryUsage(\n  startTime: number = Date.now() - 24 * 60 * 60 * 1000, // 기본: 24시간\n  endTime: number = Date.now()\n): Promise<MemoryUsageStats> {\n  // 지정된 기간의 로그 가져오기\n  const logs = await getMemoryLogs(1000, startTime, endTime);\n\n  if (logs.length === 0) {\n    throw new Error('분석할 메모리 로그가 없습니다');\n  }\n\n  // 기본 통계 계산\n  const usages = logs.map(log => log.info.heapUsedMB || 0);\n  const avgUsage = usages.reduce((sum, usage) => sum + usage, 0) / usages.length;\n  const peakUsage = Math.max(...usages);\n  const minUsage = Math.min(...usages);\n  const lastUsage = usages[0]; // 최신 로그가 첫 번째\n\n  // 시간별 사용량\n  const usageOverTime = logs\n    .map(log => ({\n      timestamp: log.timestamp,\n      usageMB: log.info.heapUsedMB || 0,\n    }))\n    .sort((a, b) => a.timestamp - b.timestamp);\n\n  // 최적화 이벤트 추출\n  const optimizationEvents = logs\n    .filter(log => log.eventType === MemoryEventType.OPTIMIZATION)\n    .map(log => {\n      // 최적화 전후 메모리 차이 계산 (이전 로그와 비교)\n      const index = logs.indexOf(log);\n      const prevLog = logs[index + 1]; // 역순 정렬이므로 다음 인덱스가 이전 로그\n      const freedMemory = prevLog\n        ? (prevLog.info.heapUsedMB || 0) - (log.info.heapUsedMB || 0)\n        : 0;\n\n      return {\n        timestamp: log.timestamp,\n        freedMemory: Math.max(0, freedMemory), // 음수인 경우 0으로 처리\n      };\n    });\n\n  // GC 이벤트 추출\n  const gcEvents = logs\n    .filter(log => log.eventType === MemoryEventType.GC)\n    .map(log => {\n      // GC 전후 메모리 차이 계산\n      const index = logs.indexOf(log);\n      const prevLog = logs[index + 1];\n      const freedMemory = prevLog\n        ? (prevLog.info.heapUsedMB || 0) - (log.info.heapUsedMB || 0)\n        : 0;\n\n      return {\n        timestamp: log.timestamp,\n        freedMemory: Math.max(0, freedMemory),\n      };\n    });\n\n  // 메모리 누수 의심 컴포넌트 분석\n  const componentMounts = logs.filter(\n    log => log.eventType === MemoryEventType.INFO && log.componentId\n  );\n\n  const componentCounts: Record<string, number> = {};\n  for (const log of componentMounts) {\n    const id = log.componentId!;\n    componentCounts[id] = (componentCounts[id] || 0) + 1;\n  }\n\n  // 누수 의심 컴포넌트 (상위 10개)\n  const leakSuspects = Object.entries(componentCounts)\n    .map(([componentId, frequency]) => ({ componentId, frequency }))\n    .sort((a, b) => b.frequency - a.frequency)\n    .slice(0, 10);\n\n  return {\n    averageUsage: avgUsage,\n    peakUsage,\n    minUsage,\n    lastUsage,\n    usageOverTime,\n    optimizationEvents,\n    gcEvents,\n    leakSuspects,\n  };\n}\n\n/**\n * 메모리 로그 내보내기 (JSON)\n * @returns JSON 문자열\n */\nexport async function exportMemoryLogs(): Promise<string> {\n  const logs = await getMemoryLogs(MAX_LOG_ENTRIES);\n  const performanceData = getPerformanceHistory();\n\n  const exportData = {\n    logs,\n    performanceHistory: performanceData,\n    exportTimestamp: Date.now(),\n    appVersion: '1.0.0', // 앱 버전\n    systemInfo: {\n      userAgent: navigator.userAgent,\n      platform: navigator.platform,\n      language: navigator.language,\n    },\n  };\n\n  return JSON.stringify(exportData, null, 2);\n}\n\n/**\n * 메모리 자동 로그 설정\n * 주요 이벤트에 대한 메모리 로깅을 자동화합니다.\n */\nexport function setupAutomaticMemoryLogging(): () => void {\n  const cleanupFunctions: Array<() => void> = [];\n\n  // 주기적 모니터링 시작\n  const stopMonitoring = startMemoryMonitoring(60000); // 1분마다\n  cleanupFunctions.push(stopMonitoring);\n\n  // 페이지 탐색 추적\n  if (typeof window !== 'undefined') {\n    // 페이지 로드 시\n    const handleLoad = () => {\n      logMemoryUsage(MemoryEventType.INFO, 'Page loaded');\n    };\n    window.addEventListener('load', handleLoad);\n    cleanupFunctions.push(() => window.removeEventListener('load', handleLoad));\n\n    // 페이지 언로드 시\n    const handleBeforeUnload = () => {\n      logMemoryUsage(MemoryEventType.INFO, 'Page unloaded');\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    cleanupFunctions.push(() => window.removeEventListener('beforeunload', handleBeforeUnload));\n\n    // 가시성 변경 시\n    const handleVisibilityChange = () => {\n      logMemoryUsage(MemoryEventType.INFO, `Visibility changed: ${document.visibilityState}`);\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    cleanupFunctions.push(() =>\n      document.removeEventListener('visibilitychange', handleVisibilityChange)\n    );\n  }\n\n  // 모든 정리 함수를 호출하는 함수 반환\n  return () => {\n    cleanupFunctions.forEach(cleanup => cleanup());\n  };\n}\n","/**\n * 로그 저장 및 관리 유틸리티\n *\n * 애플리케이션 내의 대화 로그와 에러 로그를 저장하고 관리하는 기능 제공\n */\n\nimport { formatBytes, getCurrentTimestamp } from './common-utils';\nimport { logger, LogLevel as MemoryLogLevel } from './memory/logger';\n// @ts-ignore\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * 로그 타입 정의\n */\nexport enum LogType {\n  CONVERSATION = 'conversation', // 사용자와 AI 간 대화 로그\n  ERROR = 'error', // 에러 로그\n  PERFORMANCE = 'performance', // 성능 관련 로그\n  MEMORY = 'memory', // 메모리 관련 로그\n  SYSTEM = 'system', // 시스템 관련 로그\n  USER = 'user', // 사용자 관련 로그\n}\n\n/**\n * 로그 레벨 정의\n */\nexport enum LogLevel {\n  Debug = 0,\n  Info = 1,\n  Warn = 2,\n  Error = 3,\n  Critical = 4,\n}\n\n/**\n * 로그 데이터 인터페이스\n */\nexport interface LogEntry {\n  id?: string; // 로그 고유 ID (저장 시 자동 생성)\n  type: LogType; // 로그 타입\n  timestamp: number; // 로그 생성 시간 (밀리초 타임스탬프)\n  content: string; // 로그 내용\n  metadata?: any; // 추가 메타데이터 (JSON 직렬화 가능한 객체)\n  tags?: string[]; // 로그 태그 (검색 및 필터링용)\n  sessionId?: string; // 세션 ID\n  level: LogLevel; // 로그 레벨\n  message: string; // 로그 메시지\n  data?: Record<string, unknown>; // 로그 데이터 (선택적으로 변경)\n}\n\n/**\n * 로그 검색 옵션 인터페이스\n */\nexport interface LogSearchOptions {\n  type?: LogType | LogType[]; // 검색할 로그 타입\n  startTime?: number; // 검색 시작 시간\n  endTime?: number; // 검색 종료 시간\n  tags?: string[]; // 검색할 태그\n  query?: string; // 검색 쿼리 (로그 내용에서 검색)\n  limit?: number; // 검색 결과 제한\n  offset?: number; // 검색 결과 오프셋\n  sessionId?: string; // 세션 ID로 검색\n}\n\n/**\n * 로그를 저장합니다.\n *\n * @param logEntry - 저장할 로그 데이터\n * @returns 저장된 로그 엔트리 (ID 포함)\n */\nexport async function saveLog(logEntry: Omit<LogEntry, 'id'>): Promise<LogEntry> {\n  try {\n    // 로그 ID 생성 (타임스탬프 + 랜덤 문자열)\n    const id = `${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;\n\n    const log: LogEntry = {\n      ...logEntry,\n      id,\n      timestamp: logEntry.timestamp || getCurrentTimestamp(),\n    };\n\n    // 로그 API 엔드포인트로 저장 요청\n    const response = await fetch('/api/logs/save', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(log),\n    });\n\n    if (!response.ok) {\n      throw new Error(`로그 저장 실패: ${response.status} ${response.statusText}`);\n    }\n\n    const result = await response.json();\n\n    logger.debug(`로그 저장 완료 (ID: ${id}, 타입: ${logEntry.type})`);\n    return result.data;\n  } catch (error) {\n    logger.error('로그 저장 중 오류 발생:', {\n      error: error instanceof Error ? { message: error.message, stack: error.stack } : error,\n    });\n\n    // API 호출 실패시 로컬 스토리지에 임시 저장\n    try {\n      const storageKey = `log_${Date.now()}`;\n      localStorage.setItem(storageKey, JSON.stringify(logEntry));\n    } catch (storageError) {\n      logger.error('로그의 로컬 스토리지 백업 저장 실패:', {\n        storageError:\n          storageError instanceof Error\n            ? { message: storageError.message, stack: storageError.stack }\n            : storageError,\n      });\n    }\n\n    throw error;\n  }\n}\n\n/**\n * 로그를 검색합니다.\n *\n * @param options - 검색 옵션\n * @returns 검색된 로그 엔트리 배열\n */\nexport async function searchLogs(options: LogSearchOptions = {}): Promise<LogEntry[]> {\n  try {\n    const queryParams = new URLSearchParams();\n\n    // 검색 옵션을 쿼리 파라미터로 변환\n    if (options.type) {\n      if (Array.isArray(options.type)) {\n        options.type.forEach(t => queryParams.append('type', t));\n      } else {\n        queryParams.set('type', options.type);\n      }\n    }\n\n    if (options.startTime) queryParams.set('startTime', options.startTime.toString());\n    if (options.endTime) queryParams.set('endTime', options.endTime.toString());\n    if (options.query) queryParams.set('query', options.query);\n    if (options.limit) queryParams.set('limit', options.limit.toString());\n    if (options.offset) queryParams.set('offset', options.offset.toString());\n    if (options.sessionId) queryParams.set('sessionId', options.sessionId);\n\n    if (options.tags && options.tags.length > 0) {\n      options.tags.forEach(tag => queryParams.append('tag', tag));\n    }\n\n    // 로그 검색 API 호출\n    const response = await fetch(`/api/logs/search?${queryParams.toString()}`);\n\n    if (!response.ok) {\n      throw new Error(`로그 검색 실패: ${response.status} ${response.statusText}`);\n    }\n\n    const result = await response.json();\n\n    logger.debug(`로그 검색 완료 (결과 수: ${result.data.length})`);\n    return result.data;\n  } catch (error) {\n    logger.error('로그 검색 중 오류 발생:', { error });\n    throw error;\n  }\n}\n\n/**\n * 대화 로그를 저장합니다.\n *\n * @param userMessage - 사용자 메시지\n * @param aiResponse - AI 응답\n * @param metadata - 추가 메타데이터\n * @returns 저장된 로그 엔트리\n */\nexport async function saveConversationLog(\n  userMessage: string,\n  aiResponse: string,\n  metadata: any = {}\n): Promise<LogEntry> {\n  const now = getCurrentTimestamp();\n  const sessionId = metadata.sessionId || localStorage.getItem('sessionId') || `session_${now}`;\n\n  // 세션 ID가 없으면 새로 생성하고 저장\n  if (!localStorage.getItem('sessionId')) {\n    localStorage.setItem('sessionId', sessionId);\n  }\n\n  const logEntry: Omit<LogEntry, 'id'> = {\n    type: LogType.CONVERSATION,\n    timestamp: now,\n    content: JSON.stringify({\n      userMessage,\n      aiResponse,\n      timestamp: now,\n    }),\n    metadata: {\n      ...metadata,\n      messageSize: {\n        user: new Blob([userMessage]).size,\n        ai: new Blob([aiResponse]).size,\n      },\n      messageSizeFormatted: {\n        user: formatBytes(new Blob([userMessage]).size),\n        ai: formatBytes(new Blob([aiResponse]).size),\n      },\n    },\n    tags: ['conversation', 'ai', ...(metadata.tags || [])],\n    sessionId,\n    level: LogLevel.Info,\n    message: '대화 로그',\n    data: {},\n  };\n\n  return saveLog(logEntry);\n}\n\n/**\n * 에러 로그를 저장합니다.\n *\n * @param error - 에러 객체 또는 에러 메시지\n * @param metadata - 추가 메타데이터\n * @returns 저장된 로그 엔트리\n */\nexport async function saveErrorLog(error: Error | string, metadata: any = {}): Promise<LogEntry> {\n  const errorMessage = error instanceof Error ? error.message : error;\n  const errorStack = error instanceof Error ? error.stack : undefined;\n\n  const logEntry: Omit<LogEntry, 'id'> = {\n    type: LogType.ERROR,\n    timestamp: getCurrentTimestamp(),\n    content: errorMessage,\n    metadata: {\n      ...metadata,\n      stack: errorStack,\n      browserInfo:\n        typeof navigator !== 'undefined'\n          ? {\n              userAgent: navigator.userAgent,\n              platform: navigator.platform,\n              language: navigator.language,\n            }\n          : undefined,\n    },\n    tags: ['error', ...(metadata.tags || [])],\n    sessionId: metadata.sessionId || localStorage.getItem('sessionId') || undefined,\n    level: LogLevel.Error,\n    message: errorMessage,\n    data: {},\n  };\n\n  return saveLog(logEntry);\n}\n\n/**\n * 메모리 로그를 저장합니다.\n *\n * @param memoryInfo - 메모리 정보\n * @returns 저장된 로그 엔트리\n */\nexport async function saveMemoryLog(memoryInfo: any): Promise<LogEntry> {\n  const logEntry: Omit<LogEntry, 'id'> = {\n    type: LogType.MEMORY,\n    timestamp: getCurrentTimestamp(),\n    content: JSON.stringify(memoryInfo),\n    metadata: {\n      heapUsed: memoryInfo.heapUsed,\n      heapTotal: memoryInfo.heapTotal,\n      percentUsed: memoryInfo.percentUsed,\n    },\n    tags: ['memory', 'performance'],\n    sessionId: localStorage.getItem('sessionId') || undefined,\n    level: LogLevel.Info,\n    message: '메모리 사용량 기록',\n    data: {},\n  };\n\n  return saveLog(logEntry);\n}\n\n/**\n * 성능 로그를 저장합니다.\n *\n * @param metric - 측정 항목 (ex: 'api_response_time', 'render_time')\n * @param value - 측정값\n * @param unit - 측정 단위 (기본값: 'ms')\n * @param metadata - 추가 메타데이터\n * @returns 저장된 로그 엔트리\n */\nexport async function savePerformanceLog(\n  metric: string,\n  value: number,\n  unit: string = 'ms',\n  metadata: any = {}\n): Promise<LogEntry> {\n  const logEntry: Omit<LogEntry, 'id'> = {\n    type: LogType.PERFORMANCE,\n    timestamp: getCurrentTimestamp(),\n    content: `${metric}: ${value}${unit}`,\n    metadata: {\n      ...metadata,\n      metric,\n      value,\n      unit,\n    },\n    tags: ['performance', metric, ...(metadata.tags || [])],\n    sessionId: localStorage.getItem('sessionId') || undefined,\n    level: LogLevel.Info,\n    message: `성능 측정: ${metric}`,\n    data: { metric, value, unit },\n  };\n\n  return saveLog(logEntry);\n}\n\n/**\n * 시스템 로그를 저장합니다.\n *\n * @param message - 로그 메시지\n * @param metadata - 추가 메타데이터\n * @returns 저장된 로그 엔트리\n */\nexport async function saveSystemLog(message: string, metadata: any = {}): Promise<LogEntry> {\n  const logEntry: Omit<LogEntry, 'id'> = {\n    type: LogType.SYSTEM,\n    timestamp: getCurrentTimestamp(),\n    content: message,\n    metadata: {\n      ...metadata,\n      osInfo:\n        typeof navigator !== 'undefined'\n          ? {\n              platform: navigator.platform,\n              userAgent: navigator.userAgent,\n            }\n          : undefined,\n    },\n    tags: ['system', ...(metadata.tags || [])],\n    sessionId: localStorage.getItem('sessionId') || undefined,\n    level: LogLevel.Info,\n    message,\n    data: {},\n  };\n\n  return saveLog(logEntry);\n}\n\n/**\n * 로컬에 저장된 로그를 서버와 동기화합니다.\n * 오프라인 상태에서 저장된 로그를 온라인 상태가 될 때 서버로 전송합니다.\n */\nexport async function syncLocalLogs(): Promise<void> {\n  try {\n    if (typeof localStorage === 'undefined') return;\n\n    // 로컬 스토리지에서 로그 키 찾기\n    const logKeys: string[] = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.startsWith('log_')) {\n        logKeys.push(key);\n      }\n    }\n\n    if (logKeys.length === 0) return;\n\n    logger.debug(`로컬 로그 동기화 시작 (${logKeys.length}개 항목)`);\n\n    // 각 로그를 서버로 전송\n    for (const key of logKeys) {\n      try {\n        const logJson = localStorage.getItem(key);\n        if (!logJson) continue;\n\n        const logEntry = JSON.parse(logJson);\n        await saveLog(logEntry);\n\n        // 성공적으로 저장된 로그는 로컬 스토리지에서 삭제\n        localStorage.removeItem(key);\n      } catch (error) {\n        logger.error('로그 항목 동기화 실패:', { error });\n      }\n    }\n\n    logger.debug('로컬 로그 동기화 완료');\n  } catch (error) {\n    logger.error('로그 동기화 중 오류 발생:', { error });\n  }\n}\n\n/**\n * 로깅 유틸리티\n */\n\nexport function isDebugMode(): boolean {\n  return (\n    process.env.NODE_ENV === 'development' ||\n    (typeof localStorage !== 'undefined' && localStorage.getItem('debug_mode') === 'true')\n  );\n}\n\nexport function addLogEntry(entry: Omit<LogEntry, 'id'>): void {\n  try {\n    if (typeof localStorage === 'undefined') return;\n\n    const logEntry = {\n      ...entry,\n      id: Date.now().toString() + Math.random().toString(36).substr(2, 5),\n    };\n\n    const logsJson = localStorage.getItem('application_logs');\n    const logs = logsJson ? JSON.parse(logsJson) : [];\n\n    logs.push(logEntry);\n\n    if (logs.length > 1000) {\n      logs.splice(0, logs.length - 1000);\n    }\n\n    localStorage.setItem('application_logs', JSON.stringify(logs));\n  } catch (error) {\n    console.error('로그 항목 저장 실패:', error);\n  }\n}\n\n/**\n * 로그 항목을 생성합니다.\n */\nexport function createLogEntry(level: LogLevel, message: string, data?: unknown): LogEntry {\n  const logType =\n    level === LogLevel.Error || level === LogLevel.Critical ? LogType.ERROR : LogType.SYSTEM;\n\n  const sessionId = getCurrentSessionId() ?? 'unknown-session';\n\n  // 데이터 처리: Error 객체인 경우 메시지와 스택을 추출하고, 그렇지 않은 경우 그대로 사용\n  let formattedData: Record<string, unknown> | undefined;\n  if (data instanceof Error) {\n    formattedData = {\n      errorMessage: data.message,\n      stack: data.stack,\n    };\n  } else if (data !== undefined) {\n    formattedData =\n      typeof data === 'object' && data !== null\n        ? (data as Record<string, unknown>)\n        : { value: data };\n  }\n\n  return {\n    id: uuidv4(),\n    timestamp: Date.now(),\n    type: logType,\n    level,\n    message,\n    content: message,\n    data: formattedData,\n    sessionId,\n  };\n}\n\n/**\n * 디버그 로그를 기록합니다.\n */\nexport async function logDebug(message: string, data?: unknown): Promise<void> {\n  try {\n    const logEntry = createLogEntry(LogLevel.Debug, message, data);\n    logger.debug(logEntry.message, logEntry.data);\n  } catch (error) {\n    console.error('로깅 중 오류 발생:', error);\n  }\n}\n\n/**\n * 정보 로그를 기록합니다.\n */\nexport async function logInfo(message: string, data?: unknown): Promise<void> {\n  try {\n    const logEntry = createLogEntry(LogLevel.Info, message, data);\n    logger.info(logEntry.message, logEntry.data);\n  } catch (error) {\n    console.error('로깅 중 오류 발생:', error);\n  }\n}\n\n/**\n * 경고 로그를 기록합니다.\n */\nexport async function logWarn(message: string, data?: unknown): Promise<void> {\n  try {\n    const logEntry = createLogEntry(LogLevel.Warn, message, data);\n    logger.warn(logEntry.message, logEntry.data);\n  } catch (error) {\n    console.error('로깅 중 오류 발생:', error);\n  }\n}\n\n/**\n * 에러 로그를 기록합니다.\n */\nexport async function logError(message: string, error?: unknown): Promise<void> {\n  try {\n    const logEntry = createLogEntry(LogLevel.Error, message, error);\n    logger.error(logEntry.message, logEntry.data);\n  } catch (loggingError) {\n    console.error('로깅 중 오류 발생:', loggingError);\n  }\n}\n\n/**\n * 치명적 에러 로그를 기록합니다.\n */\nexport async function logCritical(message: string, error?: unknown): Promise<void> {\n  try {\n    const logEntry = createLogEntry(LogLevel.Critical, message, error);\n    logger.error(logEntry.message, logEntry.data);\n  } catch (loggingError) {\n    console.error('로깅 중 오류 발생:', loggingError);\n  }\n}\n\n/**\n * 현재 세션 ID를 가져옵니다.\n */\nexport function getCurrentSessionId(): string | undefined {\n  return typeof localStorage !== 'undefined'\n    ? localStorage.getItem('sessionId') || undefined\n    : undefined;\n}\n","/**\r\n * 로그 학습 및 최적화 유틸리티\r\n * \r\n * 로그 데이터를 분석하여 학습하고 애플리케이션을 최적화하는 기능 제공\r\n */\r\n\r\nimport { LogType, searchLogs } from './log-utils';\r\nimport { logger } from './memory/logger';\r\n\r\n/**\r\n * 인터페이스 정의\r\n */\r\ninterface WordFrequency {\r\n  [key: string]: number;\r\n}\r\n\r\ninterface HourlyActivity {\r\n  [hour: number]: number;\r\n}\r\n\r\ninterface SessionConversations {\r\n  [sessionId: string]: number;\r\n}\r\n\r\ninterface ErrorGroups {\r\n  [errorType: string]: {\r\n    count: number;\r\n    examples: Array<{ message: string; timestamp: number }>;\r\n    sessionIds: Set<string>;\r\n  };\r\n}\r\n\r\n/**\r\n * 학습 모델 타입 정의\r\n */\r\nexport enum LearningModelType {\r\n  MEMORY_OPTIMIZATION = 'memory_optimization',\r\n  ERROR_PREDICTION = 'error_prediction',\r\n  PERFORMANCE_OPTIMIZATION = 'performance_optimization',\r\n  USER_BEHAVIOR = 'user_behavior'\r\n}\r\n\r\n/**\r\n * 학습 결과 인터페이스\r\n */\r\nexport interface LearningResult {\r\n  modelType: LearningModelType;\r\n  timestamp: number;\r\n  insights: any[];\r\n  recommendations: string[];\r\n  metrics: { [key: string]: number };\r\n}\r\n\r\n/**\r\n * 메모리 최적화 학습 옵션\r\n */\r\nexport interface MemoryOptimizationOptions {\r\n  timeRange?: {\r\n    startTime?: number;\r\n    endTime?: number;\r\n  };\r\n  minSampleSize?: number;\r\n  sessionLimit?: number;\r\n}\r\n\r\n/**\r\n * 로그 데이터로부터 메모리 사용 패턴을 학습합니다.\r\n * \r\n * @param options - 메모리 최적화 학습 옵션\r\n * @returns 학습 결과\r\n */\r\nexport async function learnMemoryUsagePatterns(\r\n  options: MemoryOptimizationOptions = {}\r\n): Promise<LearningResult> {\r\n  try {\r\n    logger.info('메모리 사용 패턴 학습 시작');\r\n    \r\n    // 기본값 설정\r\n    const minSampleSize = options.minSampleSize || 50;\r\n    const now = Date.now();\r\n    const startTime = options.timeRange?.startTime || now - 7 * 24 * 60 * 60 * 1000; // 기본 1주일\r\n    const endTime = options.timeRange?.endTime || now;\r\n    \r\n    // 메모리 관련 로그 검색\r\n    const memoryLogs = await searchLogs({\r\n      type: LogType.MEMORY,\r\n      startTime,\r\n      endTime,\r\n      limit: 1000 // 최대 1000개까지만 가져옴\r\n    });\r\n    \r\n    if (memoryLogs.length < minSampleSize) {\r\n      logger.warn(`충분한 메모리 로그 샘플이 없습니다. 필요: ${minSampleSize}, 현재: ${memoryLogs.length}`);\r\n    }\r\n    \r\n    // 메모리 사용량 분석\r\n    const memoryUsages = memoryLogs.map(log => {\r\n      const metadata = log.metadata || {};\r\n      return {\r\n        timestamp: log.timestamp,\r\n        heapUsed: metadata.heapUsed || 0,\r\n        heapTotal: metadata.heapTotal || 0,\r\n        percentUsed: metadata.percentUsed || 0\r\n      };\r\n    });\r\n    \r\n    // 시간대별 메모리 사용량 집계\r\n    const hourlyUsage: { [hour: number]: number[] } = {};\r\n    memoryUsages.forEach(usage => {\r\n      const date = new Date(usage.timestamp);\r\n      const hour = date.getHours();\r\n      \r\n      if (!hourlyUsage[hour]) hourlyUsage[hour] = [];\r\n      hourlyUsage[hour].push(usage.percentUsed);\r\n    });\r\n    \r\n    // 평균 시간대별 사용량 계산\r\n    const hourlyAverages = Object.entries(hourlyUsage).map(([hour, values]) => ({\r\n      hour: parseInt(hour),\r\n      avgUsage: values.reduce((sum, val) => sum + val, 0) / values.length,\r\n      count: values.length\r\n    }));\r\n    \r\n    // 최대 메모리 사용 시간대 식별\r\n    hourlyAverages.sort((a, b) => b.avgUsage - a.avgUsage);\r\n    const peakHours = hourlyAverages.slice(0, 3);\r\n    \r\n    // 메모리 누수 가능성이 있는 세션 식별\r\n    const sessionData: { [sessionId: string]: number[] } = {};\r\n    memoryLogs.forEach(log => {\r\n      if (!log.sessionId) return;\r\n      \r\n      const metadata = log.metadata || {};\r\n      if (!sessionData[log.sessionId]) sessionData[log.sessionId] = [];\r\n      sessionData[log.sessionId].push(metadata.percentUsed || 0);\r\n    });\r\n    \r\n    // 세션별로 메모리 증가 추세 분석\r\n    const sessionTrends = Object.entries(sessionData).map(([sessionId, usages]) => {\r\n      if (usages.length < 5) return null; // 너무 짧은 세션은 제외\r\n      \r\n      const firstHalf = usages.slice(0, Math.floor(usages.length / 2));\r\n      const secondHalf = usages.slice(Math.floor(usages.length / 2));\r\n      \r\n      const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length;\r\n      const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length;\r\n      \r\n      const increaseTrend = secondAvg - firstAvg;\r\n      \r\n      return {\r\n        sessionId,\r\n        samplesCount: usages.length,\r\n        increaseTrend,\r\n        percentIncrease: (increaseTrend / firstAvg) * 100\r\n      };\r\n    }).filter(Boolean);\r\n    \r\n    // 메모리 증가 추세가 높은 세션 정렬\r\n    sessionTrends.sort((a, b) => (b?.increaseTrend || 0) - (a?.increaseTrend || 0));\r\n    const problematicSessions = sessionTrends.filter(session => session && session.percentIncrease > 15);\r\n    \r\n    // 최적화 추천사항 생성\r\n    const recommendations = [];\r\n    \r\n    if (peakHours.length > 0) {\r\n      const formattedHours = peakHours.map(h => `${h.hour}시`).join(', ');\r\n      recommendations.push(`메모리 사용량이 높은 시간대(${formattedHours})에 자동 메모리 최적화를 예약하세요.`);\r\n    }\r\n    \r\n    if (problematicSessions.length > 0) {\r\n      recommendations.push(`메모리 누수 가능성이 있는 ${problematicSessions.length}개의 패턴이 발견되었습니다.`);\r\n      \r\n      if (problematicSessions.length > 2) {\r\n        recommendations.push('장기간 사용 시 주기적인 앱 재시작 일정을 설정하세요.');\r\n      }\r\n    }\r\n    \r\n    // 메모리 GC 최적 주기 추천\r\n    const gcSuggestion = calculateOptimalGCInterval(memoryUsages);\r\n    if (gcSuggestion) {\r\n      recommendations.push(`최적의 가비지 컬렉션 주기: ${gcSuggestion}ms`);\r\n    }\r\n    \r\n    // 학습 결과 반환\r\n    const result: LearningResult = {\r\n      modelType: LearningModelType.MEMORY_OPTIMIZATION,\r\n      timestamp: Date.now(),\r\n      insights: [\r\n        { type: 'peakHours', data: peakHours },\r\n        { type: 'problematicSessions', data: problematicSessions.slice(0, 5) },\r\n        { type: 'hourlyUsage', data: hourlyAverages },\r\n      ],\r\n      recommendations,\r\n      metrics: {\r\n        sampleSize: memoryLogs.length,\r\n        avgMemoryUsage: memoryUsages.reduce((sum, u) => sum + u.percentUsed, 0) / memoryUsages.length,\r\n        peakMemoryUsage: Math.max(...memoryUsages.map(u => u.percentUsed)),\r\n        problematicSessionsCount: problematicSessions.length\r\n      }\r\n    };\r\n    \r\n    logger.info('메모리 사용 패턴 학습 완료', { \r\n      sampleSize: memoryLogs.length, \r\n      recommendations: recommendations.length \r\n    });\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    logger.error('메모리 사용 패턴 학습 중 오류:', error as Record<string, unknown>);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 사용자 행동 패턴 학습 옵션\r\n */\r\nexport interface UserBehaviorOptions {\r\n  timeRange?: {\r\n    startTime?: number;\r\n    endTime?: number;\r\n  };\r\n  minSampleSize?: number;\r\n}\r\n\r\n/**\r\n * 로그 데이터로부터 사용자 행동 패턴을 학습합니다.\r\n * \r\n * @param options - 사용자 행동 학습 옵션\r\n * @returns 학습 결과\r\n */\r\nexport async function learnUserBehaviorPatterns(\r\n  options: UserBehaviorOptions = {}\r\n): Promise<LearningResult> {\r\n  try {\r\n    logger.info('사용자 행동 패턴 학습 시작');\r\n    \r\n    // 기본값 설정\r\n    const minSampleSize = options.minSampleSize || 20;\r\n    const now = Date.now();\r\n    const startTime = options.timeRange?.startTime || now - 30 * 24 * 60 * 60 * 1000; // 기본 30일\r\n    const endTime = options.timeRange?.endTime || now;\r\n    \r\n    // 대화 로그 검색\r\n    const conversationLogs = await searchLogs({\r\n      type: LogType.CONVERSATION,\r\n      startTime,\r\n      endTime,\r\n      limit: 1000 // 최대 1000개까지만 가져옴\r\n    });\r\n    \r\n    if (conversationLogs.length < minSampleSize) {\r\n      logger.warn(`충분한 대화 로그 샘플이 없습니다. 필요: ${minSampleSize}, 현재: ${conversationLogs.length}`);\r\n    }\r\n    \r\n    // 대화 데이터 추출\r\n    const conversations = conversationLogs.map(log => {\r\n      try {\r\n        return {\r\n          ...log,\r\n          parsedContent: JSON.parse(log.content)\r\n        };\r\n      } catch (_) {  // 사용하지 않는 변수는 _ 로만 표시\r\n        return {\r\n          ...log,\r\n          parsedContent: {\r\n            userMessage: '',\r\n            aiResponse: '',\r\n            timestamp: log.timestamp\r\n          }\r\n        };\r\n      }\r\n    });\r\n    \r\n    // 자주 사용되는 단어/구문 분석\r\n    const wordFrequency: WordFrequency = {};\r\n    conversations.forEach(conv => {\r\n      const userMessage = conv.parsedContent?.userMessage || '';\r\n      if (!userMessage) return;\r\n      \r\n      const words = userMessage\r\n        .toLowerCase()\r\n        .replace(/[^\\w\\s가-힣]/g, ' ')\r\n        .split(/\\s+/)\r\n        .filter((word: string) => word.length > 1);\r\n      \r\n      words.forEach((word: string) => {\r\n        wordFrequency[word] = (wordFrequency[word] || 0) + 1;\r\n      });\r\n    });\r\n    \r\n    // 시간대별 활동 패턴 분석\r\n    const hourlyActivity: HourlyActivity = {};\r\n    conversations.forEach(conv => {\r\n      const timestamp = conv.timestamp || conv.parsedContent?.timestamp;\r\n      if (!timestamp) return;\r\n      \r\n      const date = new Date(timestamp);\r\n      const hour = date.getHours();\r\n      \r\n      hourlyActivity[hour] = (hourlyActivity[hour] || 0) + 1;\r\n    });\r\n    \r\n    // 메시지 길이 분석\r\n    const messageLengths = conversations.map(conv => {\r\n      const userMessage = conv.parsedContent?.userMessage || '';\r\n      return userMessage.length;\r\n    });\r\n    \r\n    const avgMessageLength = messageLengths.length > 0 ? \r\n      messageLengths.reduce((sum, len) => sum + len, 0) / messageLengths.length : 0;\r\n    \r\n    // 세션별 대화 수 분석\r\n    const sessionConversations: SessionConversations = {};\r\n    conversations.forEach(conv => {\r\n      if (!conv.sessionId) return;\r\n      sessionConversations[conv.sessionId] = (sessionConversations[conv.sessionId] || 0) + 1;\r\n    });\r\n    \r\n    const sessionsArray = Object.entries(sessionConversations)\r\n      .map(([id, count]) => ({ id, count: count as number }));\r\n    \r\n    const avgConversationsPerSession = sessionsArray.length > 0 ?\r\n      sessionsArray.reduce((sum, session) => {\r\n        return sum + (session && session.count ? session.count : 0);\r\n      }, 0) / sessionsArray.length : 0;\r\n    \r\n    // 활동이 가장 많은 시간대 식별: null 체크 추가\r\n    const activeHours = Object.entries(hourlyActivity)\r\n      .sort((a, b) => {\r\n        if (a === null || b === null || a[1] === null || b[1] === null) return 0;\r\n        return (b[1] as number) - (a[1] as number);\r\n      })\r\n      .slice(0, 3)\r\n      .map(([hour, count]) => ({ \r\n        hour: parseInt(hour), \r\n        count: count as number \r\n      }));\r\n    \r\n    // 추천사항 생성\r\n    const recommendations = [];\r\n    \r\n    if (activeHours.length > 0) {\r\n      const formattedHours = activeHours.map(h => `${h.hour}시`).join(', ');\r\n      recommendations.push(`사용자는 ${formattedHours}에 가장 활발하게 활동합니다. 이 시간대에 성능을 최적화하세요.`);\r\n    }\r\n    \r\n    if (avgMessageLength > 100) {\r\n      recommendations.push(`사용자는 평균 ${Math.round(avgMessageLength)}자의 긴 메시지를 보냅니다. 대용량 텍스트 처리를 최적화하세요.`);\r\n    } else {\r\n      recommendations.push(`사용자는 평균 ${Math.round(avgMessageLength)}자의 짧은 메시지를 보냅니다. 빠른 응답에 집중하세요.`);\r\n    }\r\n    \r\n    if (avgConversationsPerSession > 10) {\r\n      recommendations.push(`사용자는 세션당 평균 ${Math.round(avgConversationsPerSession)}개의 대화를 나눕니다. 장기 세션 메모리 관리를 최적화하세요.`);\r\n    }\r\n    \r\n    if (Object.keys(wordFrequency).length > 0) {\r\n      const topWords = Object.entries(wordFrequency)\r\n        .sort((a, b) => b[1] - a[1])\r\n        .slice(0, 20)\r\n        .map(([word, count]) => ({ word, count }));\r\n      const topThreeWords = topWords.slice(0, 3).map(w => w.word).join(', ');\r\n      recommendations.push(`가장 자주 사용된 키워드는 \"${topThreeWords}\"입니다. 이와 관련된 응답을 최적화하세요.`);\r\n    }\r\n    \r\n    // 학습 결과 반환 코드에서 타입 단언 안전하게 처리\r\n    const result: LearningResult = {\r\n      modelType: LearningModelType.USER_BEHAVIOR,\r\n      timestamp: Date.now(),\r\n      insights: [\r\n        { type: 'topWords', data: Object.entries(wordFrequency)\r\n          .sort((a, b) => b[1] - a[1])\r\n          .slice(0, 20)\r\n          .map(([word, count]) => ({ word, count })) },\r\n        { type: 'activeHours', data: activeHours },\r\n        { type: 'messageLengths', data: { average: avgMessageLength, max: Math.max(...messageLengths) } },\r\n        { type: 'sessionsActivity', data: { \r\n          average: avgConversationsPerSession, \r\n          maxCount: Math.max(...Object.values(sessionConversations).map(v => v as number)) \r\n        } },\r\n      ],\r\n      recommendations: recommendations || [], // null 체크 추가\r\n      metrics: {\r\n        sampleSize: conversations.length,\r\n        uniqueWords: Object.keys(wordFrequency).length,\r\n        avgMessageLength,\r\n        avgConversationsPerSession\r\n      }\r\n    };\r\n    \r\n    // 타입 안전한 로깅\r\n    logger.info('사용자 행동 패턴 학습 완료', { \r\n      sampleSize: conversations.length, \r\n      recommendations: recommendations ? recommendations.length : 0 \r\n    } as Record<string, unknown>);  // 타입 단언 추가\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    logger.error('사용자 행동 패턴 학습 중 오류:', error as Record<string, unknown>);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 오류 예측 학습 옵션\r\n */\r\nexport interface ErrorPredictionOptions {\r\n  timeRange?: {\r\n    startTime?: number;\r\n    endTime?: number;\r\n  };\r\n  minSampleSize?: number;\r\n}\r\n\r\n/**\r\n * 로그 데이터로부터 오류 패턴을 학습하여 예측 모델을 생성합니다.\r\n * \r\n * @param options - 오류 예측 학습 옵션\r\n * @returns 학습 결과\r\n */\r\nexport async function learnErrorPatterns(\r\n  options: ErrorPredictionOptions = {}\r\n): Promise<LearningResult> {\r\n  try {\r\n    logger.info('오류 패턴 학습 시작');\r\n    \r\n    // 기본값 설정\r\n    const minSampleSize = options.minSampleSize || 10;\r\n    const now = Date.now();\r\n    const startTime = options.timeRange?.startTime || now - 30 * 24 * 60 * 60 * 1000; // 기본 30일\r\n    const endTime = options.timeRange?.endTime || now;\r\n    \r\n    // 오류 로그 검색\r\n    const errorLogs = await searchLogs({\r\n      type: LogType.ERROR,\r\n      startTime,\r\n      endTime,\r\n      limit: 1000\r\n    });\r\n    \r\n    if (errorLogs.length < minSampleSize) {\r\n      logger.warn(`충분한 오류 로그 샘플이 없습니다. 필요: ${minSampleSize}, 현재: ${errorLogs.length}`);\r\n    }\r\n    \r\n    // 오류 메시지 분류\r\n    const errorGroups: ErrorGroups = {};\r\n    errorLogs.forEach(log => {\r\n      // 오류 메시지에서 핵심 부분만 추출\r\n      const errorMessage = log.content || '';\r\n      const errorType = getErrorType(errorMessage);\r\n      \r\n      if (!errorGroups[errorType]) {\r\n        errorGroups[errorType] = {\r\n          count: 0,\r\n          examples: [],\r\n          sessionIds: new Set()\r\n        };\r\n      }\r\n      \r\n      errorGroups[errorType].count++;\r\n      \r\n      // 최대 5개까지만 예시 저장\r\n      if (errorGroups[errorType].examples.length < 5) {\r\n        errorGroups[errorType].examples.push({\r\n          message: errorMessage,\r\n          timestamp: log.timestamp\r\n        });\r\n      }\r\n      \r\n      // 세션 ID가 있는 경우 추가\r\n      if (log.sessionId) {\r\n        errorGroups[errorType].sessionIds.add(log.sessionId);\r\n      }\r\n    });\r\n    \r\n    // 가장 빈번한 오류 추출\r\n    const topErrors = Object.entries(errorGroups)\r\n      .map(([type, data]) => ({\r\n        type,\r\n        count: data.count,\r\n        examples: data.examples,\r\n        uniqueSessions: data.sessionIds.size\r\n      }))\r\n      .sort((a, b) => b.count - a.count);\r\n    \r\n    // 시간대별 오류 발생 패턴\r\n    const hourlyErrors: Record<number, number> = {};\r\n    errorLogs.forEach(log => {\r\n      const date = new Date(log.timestamp);\r\n      const hour = date.getHours();\r\n      \r\n      hourlyErrors[hour] = (hourlyErrors[hour] || 0) + 1;\r\n    });\r\n    \r\n    // 가장 오류가 많은 시간대\r\n    const errorPeakHours = Object.entries(hourlyErrors)\r\n      .sort((a, b) => b[1] - a[1])\r\n      .slice(0, 3)\r\n      .map(([hour, count]) => ({ hour: parseInt(hour), count }));\r\n    \r\n    // 추천사항 생성\r\n    const recommendations = [];\r\n    \r\n    if (topErrors.length > 0) {\r\n      const topError = topErrors[0];\r\n      recommendations.push(`가장 빈번한 오류 \"${topError.type}\"에 대한 예외 처리를 강화하세요. (${topError.count}회 발생)`);\r\n      \r\n      if (topError.uniqueSessions > 3) {\r\n        recommendations.push(`\"${topError.type}\" 오류가 ${topError.uniqueSessions}개의 다른 세션에서 발생했습니다. 시스템적 문제일 가능성이 있습니다.`);\r\n      }\r\n    }\r\n    \r\n    if (errorPeakHours.length > 0) {\r\n      const formattedHours = errorPeakHours.map(h => `${h.hour}시`).join(', ');\r\n      recommendations.push(`${formattedHours}에 오류 발생률이 높습니다. 이 시간대에 추가 모니터링을 설정하세요.`);\r\n    }\r\n    \r\n    if (errorLogs.length > 50) {\r\n      const errorRate = (errorLogs.length / ((endTime - startTime) / (24 * 60 * 60 * 1000))).toFixed(2);\r\n      recommendations.push(`일평균 ${errorRate}개의 오류가 발생합니다. 오류 처리 로직을 검토하세요.`);\r\n    }\r\n    \r\n    // 학습 결과 반환\r\n    const result: LearningResult = {\r\n      modelType: LearningModelType.ERROR_PREDICTION,\r\n      timestamp: Date.now(),\r\n      insights: [\r\n        { type: 'topErrors', data: topErrors.slice(0, 5) },\r\n        { type: 'errorPeakHours', data: errorPeakHours },\r\n        { type: 'errorDistribution', data: Object.fromEntries(topErrors.slice(0, 10).map(e => [e.type, e.count])) }\r\n      ],\r\n      recommendations,\r\n      metrics: {\r\n        sampleSize: errorLogs.length,\r\n        uniqueErrorTypes: Object.keys(errorGroups).length,\r\n        mostFrequentErrorCount: topErrors.length > 0 ? topErrors[0].count : 0,\r\n        errorVarietyIndex: Object.keys(errorGroups).length / errorLogs.length\r\n      }\r\n    };\r\n    \r\n    logger.info('오류 패턴 학습 완료', { \r\n      sampleSize: errorLogs.length, \r\n      errorTypes: Object.keys(errorGroups).length \r\n    });\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    logger.error('오류 패턴 학습 중 오류:', error as Record<string, unknown>);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 여러 학습 결과를 통합하여 종합적인 최적화 추천을 생성합니다.\r\n * \r\n * @param results - 학습 결과 배열\r\n * @returns 통합된 추천사항 배열\r\n */\r\nexport function combineRecommendations(results: LearningResult[]): string[] {\r\n  // 모든 추천사항 수집\r\n  const allRecommendations = results.flatMap(result => result.recommendations);\r\n  \r\n  // 중복 제거 (유사한 추천사항 병합)\r\n  const uniqueRecommendations = [];\r\n  const addedKeywords = new Set();\r\n  \r\n  for (const rec of allRecommendations) {\r\n    // 문장에서 핵심 키워드 추출 (간단한 구현)\r\n    const keywords = rec.toLowerCase().replace(/[^\\w\\s가-힣]/g, ' ').split(/\\s+/).filter(w => w.length > 4);\r\n    \r\n    // 이미 유사한 키워드가 있는지 확인\r\n    let isDuplicate = false;\r\n    for (const keyword of keywords) {\r\n      if (addedKeywords.has(keyword)) {\r\n        isDuplicate = true;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (!isDuplicate) {\r\n      uniqueRecommendations.push(rec);\r\n      keywords.forEach(keyword => addedKeywords.add(keyword));\r\n    }\r\n  }\r\n  \r\n  return uniqueRecommendations;\r\n}\r\n\r\n/**\r\n * 에러 메시지에서 에러 타입을 추출합니다.\r\n * \r\n * @param errorMessage - 에러 메시지\r\n * @returns 추출된 에러 타입\r\n */\r\nfunction getErrorType(errorMessage: string): string {\r\n  // 일반적인 JavaScript 오류 패턴 확인\r\n  if (errorMessage.includes('TypeError:')) return 'TypeError';\r\n  if (errorMessage.includes('ReferenceError:')) return 'ReferenceError';\r\n  if (errorMessage.includes('SyntaxError:')) return 'SyntaxError';\r\n  if (errorMessage.includes('RangeError:')) return 'RangeError';\r\n  if (errorMessage.includes('NetworkError:') || errorMessage.includes('네트워크')) return 'NetworkError';\r\n  if (errorMessage.includes('API 요청 실패') || errorMessage.includes('API request failed')) return 'APIError';\r\n  if (errorMessage.includes('Permission denied') || errorMessage.includes('권한')) return 'PermissionError';\r\n  if (errorMessage.includes('not found') || errorMessage.includes('찾을 수 없음')) return 'NotFoundError';\r\n  if (errorMessage.includes('메모리') || errorMessage.includes('memory')) return 'MemoryError';\r\n  \r\n  // 특정 키워드로 분류\r\n  if (errorMessage.includes('undefined') || errorMessage.includes('null')) return 'NullError';\r\n  if (errorMessage.includes('promise') || errorMessage.includes('async')) return 'AsyncError';\r\n  if (errorMessage.includes('초과') || errorMessage.includes('limit') || errorMessage.includes('threshold')) return 'LimitExceededError';\r\n  \r\n  // 기본값 반환\r\n  return 'UnknownError';\r\n}\r\n\r\n/**\r\n * 최적의 가비지 컬렉션 간격을 계산합니다.\r\n * \r\n * @param memoryUsages - 메모리 사용량 데이터\r\n * @returns 최적의 GC 간격(ms) 또는 null\r\n */\r\nfunction calculateOptimalGCInterval(memoryUsages: any[]): number | null {\r\n  if (memoryUsages.length < 10) return null;\r\n  \r\n  // 메모리 사용량 증가 패턴 분석\r\n  const _timestamps = memoryUsages.map(u => u.timestamp);  // 사용하지 않는 변수에 _ 접두사 추가\r\n  const _memoryValues = memoryUsages.map(u => u.percentUsed);  // 사용하지 않는 변수에 _ 접두사 추가\r\n  \r\n  // 정렬\r\n  const sortedData = memoryUsages\r\n    .map((u, _i) => ({ timestamp: u.timestamp, value: u.percentUsed }))\r\n    .sort((a, b) => a.timestamp - b.timestamp);\r\n  \r\n  // 증가율 계산\r\n  const increases = [];\r\n  for (let i = 1; i < sortedData.length; i++) {\r\n    const timeDiff = sortedData[i].timestamp - sortedData[i-1].timestamp;\r\n    const valueDiff = sortedData[i].value - sortedData[i-1].value;\r\n    \r\n    if (valueDiff > 0 && timeDiff > 0) {\r\n      increases.push({\r\n        rate: valueDiff / timeDiff * 1000, // ms당 증가율을 초당 증가율로 변환\r\n        timeDiff\r\n      });\r\n    }\r\n  }\r\n  \r\n  if (increases.length < 5) return null;\r\n  \r\n  // 중앙값 계산\r\n  increases.sort((a, b) => a.rate - b.rate);\r\n  const medianRate = increases[Math.floor(increases.length / 2)].rate;\r\n  \r\n  // 메모리 사용량이 5% 증가하는데 걸리는 평균 시간 (밀리초)\r\n  const timeToIncrease5Percent = 5 / medianRate * 1000;\r\n  \r\n  // 적절한 GC 간격 = 메모리가 5% 증가하는 시간의 80%\r\n  // 이 값은 경험적으로 결정된 것이며, 상황에 따라 조정 가능\r\n  const suggestedInterval = Math.round(timeToIncrease5Percent * 0.8);\r\n  \r\n  // 합리적인 범위 내에 있는지 검증 (최소 10초, 최대 5분)\r\n  const minInterval = 10 * 1000;\r\n  const maxInterval = 5 * 60 * 1000;\r\n  \r\n  if (suggestedInterval < minInterval) return minInterval;\r\n  if (suggestedInterval > maxInterval) return maxInterval;\r\n  \r\n  return suggestedInterval;\r\n}\r\n","/**\r\n * 포맷팅 유틸리티 함수\r\n */\r\n\r\n/**\r\n * 바이트 크기를 사람이 읽기 쉬운 형태로 변환\r\n */\r\nexport function formatBytes(bytes: number, decimals: number = 2): string {\r\n  if (bytes === 0) return '0 Bytes';\r\n\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  \r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(decimals)) + ' ' + sizes[i];\r\n}\r\n\r\n/**\r\n * 숫자를 천 단위 구분자가 있는 문자열로 변환\r\n */\r\nexport function formatNumber(num: number): string {\r\n  return num.toLocaleString();\r\n}\r\n\r\n/**\r\n * 시간(밀리초)을 읽기 쉬운 형태로 변환\r\n */\r\nexport function formatTime(milliseconds: number): string {\r\n  if (milliseconds < 1000) {\r\n    return `${milliseconds}ms`;\r\n  } else if (milliseconds < 60000) {\r\n    return `${(milliseconds / 1000).toFixed(1)}s`;\r\n  } else {\r\n    const minutes = Math.floor(milliseconds / 60000);\r\n    const seconds = ((milliseconds % 60000) / 1000).toFixed(0);\r\n    return `${minutes}m ${seconds}s`;\r\n  }\r\n}\r\n\r\n/**\r\n * WPM(분당 단어 수) 포맷팅\r\n */\r\nexport function formatWPM(wpm: number): string {\r\n  return `${Math.round(wpm)} WPM`;\r\n}\r\n","'use client';\r\n\r\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { LearningModelType, LearningResult } from '../utils/log-learning';\r\nimport { formatBytes, formatTime } from '../utils/format-utils';\r\nimport KeyboardIcon from '@mui/icons-material/Keyboard';\r\nimport styles from './LogAnalysisPanel.module.css';\r\n\r\n/**\r\n * 시간별 데이터를 위한 타입 정의\r\n */\r\ninterface HourData {\r\n  hour: number;\r\n  count: number;\r\n  percentage?: number;\r\n  // 필요한 다른 속성들 추가\r\n}\r\n\r\n/**\r\n * 세션 데이터를 위한 타입 정의\r\n */\r\ninterface SessionData {\r\n  id: string;\r\n  duration: number;\r\n  keyCount: number;\r\n  date: string;\r\n  // 필요한 다른 속성들 추가\r\n}\r\n\r\n/**\r\n * 단어 데이터를 위한 타입 정의\r\n */\r\ninterface WordData {\r\n  word: string;\r\n  count: number;\r\n  percentage?: number;\r\n  // 필요한 다른 속성들 추가\r\n}\r\n\r\ninterface LogAnalysisPanelProps {\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * 로그 분석 패널 컴포넌트\r\n * 로그 데이터를 학습하고 분석 결과를 표시합니다.\r\n */\r\nexport default function LogAnalysisPanel({ className = '' }: LogAnalysisPanelProps) {\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [results, setResults] = useState<LearningResult[]>([]);\r\n  const [selectedTab, setSelectedTab] = useState<LearningModelType>(LearningModelType.MEMORY_OPTIMIZATION);\r\n  const [lastAnalysisTime, setLastAnalysisTime] = useState<number | null>(null);\r\n  const [combinedRecommendations, setCombinedRecommendations] = useState<string[]>([]);\r\n\r\n  // 학습 상태\r\n  const [, setLearningStatus] = useState<{\r\n    isLearning: boolean;\r\n    lastLearningTime: number | null;\r\n    availableModels: LearningModelType[];\r\n  }>({\r\n    isLearning: false,\r\n    lastLearningTime: null,\r\n    availableModels: Object.values(LearningModelType)\r\n  });\r\n\r\n  const learningStatusRef = useRef(false);\r\n\r\n  /**\r\n   * 학습 상태 확인\r\n   */\r\n  const checkLearningStatus = useCallback(async () => {\r\n    try {\r\n      const response = await fetch('/api/logs/learn');\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API 요청 실패: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        setLearningStatus(data.status || {\r\n          isLearning: false,\r\n          lastLearningTime: null,\r\n          availableModels: Object.values(LearningModelType)\r\n        });\r\n      } else {\r\n        console.error('학습 상태 확인 오류:', data.error);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('학습 상태 확인 중 오류 발생:', error);\r\n    }\r\n  }, []);\r\n\r\n  // 컴포넌트 마운트 시 학습 상태 확인\r\n  useEffect(() => {\r\n    checkLearningStatus();\r\n  }, [checkLearningStatus]);\r\n\r\n  /**\r\n   * 학습 실행\r\n   */\r\n  const runLearning = useCallback(async (models: LearningModelType[] = []) => {\r\n    // 모델을 지정하지 않은 경우 기본값으로 모든 모델 사용\r\n    const modelsToLearn = models.length > 0\r\n      ? models\r\n      : Object.values(LearningModelType);\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('/api/logs/learn', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          modelTypes: modelsToLearn,\r\n          options: {\r\n            memory: {\r\n              timeRange: {\r\n                startTime: Date.now() - 7 * 24 * 60 * 60 * 1000, // 1주일\r\n                endTime: Date.now()\r\n              }\r\n            },\r\n            user: {\r\n              timeRange: {\r\n                startTime: Date.now() - 30 * 24 * 60 * 60 * 1000, // 1개월\r\n                endTime: Date.now()\r\n              }\r\n            },\r\n            error: {\r\n              timeRange: {\r\n                startTime: Date.now() - 30 * 24 * 60 * 60 * 1000, // 1개월\r\n                endTime: Date.now()\r\n              }\r\n            }\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API 요청 실패: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        setResults(data.results || []);\r\n        setCombinedRecommendations(data.combinedRecommendations || []);\r\n        setLastAnalysisTime(data.timestamp || Date.now());\r\n\r\n        // 학습 상태 업데이트\r\n        await checkLearningStatus();\r\n      } else {\r\n        setError(data.error || '알 수 없는 오류가 발생했습니다.');\r\n      }\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [checkLearningStatus]);\r\n\r\n  /**\r\n   * 특정 모델 유형에 대한 학습 결과 가져오기\r\n   */\r\n  const getResultForModel = (modelType: LearningModelType): LearningResult | undefined => {\r\n    return results.find(result => result.modelType === modelType);\r\n  };\r\n\r\n  /**\r\n   * 학습 결과에서 추천 사항 렌더링\r\n   */\r\n  const renderRecommendations = (recommendations: string[]) => {\r\n    return (\r\n      <ul className={styles.recommendationList}>\r\n        {recommendations.map((rec, index) => (\r\n          <li key={index} className={styles.recommendationItem}>{rec}</li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 통계 항목 렌더링\r\n   */\r\n  const renderMetricItem = (label: string, value: any) => {\r\n    let formattedValue = value;\r\n\r\n    // 숫자인 경우 소수점 처리\r\n    if (typeof value === 'number') {\r\n      // 메모리 관련 항목은 MB 또는 바이트로 표시\r\n      if (label.toLowerCase().includes('memory') ||\r\n        label.toLowerCase().includes('heap') ||\r\n        label.toLowerCase().includes('size')) {\r\n        formattedValue = formatBytes(value);\r\n      }\r\n      // 0과 1 사이의 값은 백분율로 표시\r\n      else if (value > 0 && value < 1) {\r\n        formattedValue = `${(value * 100).toFixed(2)}%`;\r\n      }\r\n      // 기타 숫자는 소수점 2자리까지 표시\r\n      else {\r\n        formattedValue = Number.isInteger(value) ? value : value.toFixed(2);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div key={label} className={styles.metricItem}>\r\n        <span className={styles.metricLabel}>{label}:</span>\r\n        <span className={styles.metricValue}>{formattedValue}</span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 메모리 최적화 결과 렌더링\r\n   */\r\n  const renderMemoryOptimizationResults = () => {\r\n    const result = getResultForModel(LearningModelType.MEMORY_OPTIMIZATION);\r\n\r\n    if (!result) {\r\n      return (\r\n        <div className={styles.noResults}>\r\n          <p>메모리 최적화 학습 결과가 없습니다.</p>\r\n          <button\r\n            onClick={() => runLearning([LearningModelType.MEMORY_OPTIMIZATION])}\r\n            disabled={isLoading}\r\n            className={styles.learningButton}\r\n          >\r\n            메모리 패턴 학습하기\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const { insights, recommendations, metrics } = result;\r\n\r\n    return (\r\n      <div className={styles.resultSection}>\r\n        <h3>메모리 사용량 분석 결과</h3>\r\n\r\n        {/* 인사이트 표시 */}\r\n        <div className={styles.insightsSection}>\r\n          <h4>주요 인사이트</h4>\r\n\r\n          {insights.map((insight, index) => {\r\n            if (insight.type === 'peakHours' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>메모리 사용량 피크 시간대</h5>\r\n                  <div className={styles.peakHoursChart}>\r\n                    {insight.data.map((hour: HourData, i: number) => (\r\n                      <div key={i} className={styles.hourBar}>\r\n                        <div \r\n                          className={styles.hourBarFill} \r\n                          style={{ height: `${hour.percentage || 0}%` }}\r\n                        />\r\n                        <span className={styles.hourLabel}>{hour.hour}</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            if (insight.type === 'problematicSessions' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>의심되는 메모리 누수 세션</h5>\r\n                  <ul className={styles.sessionsList}>\r\n                    {insight.data.map((session: SessionData, i: number) => (\r\n                      <div key={i} className={styles.sessionItem}>\r\n                        <div className={styles.sessionDetails}>\r\n                          <span className={styles.sessionDate}>{session.date}</span>\r\n                          <span className={styles.sessionDuration}>{formatTime(session.duration)}</span>\r\n                        </div>\r\n                        <div className={styles.sessionKeyCount}>\r\n                          <KeyboardIcon className={styles.keyIcon} />\r\n                          <span>{session.keyCount}</span>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            return null;\r\n          })}\r\n        </div>\r\n\r\n        {/* 메트릭 표시 */}\r\n        <div className={styles.metricsSection}>\r\n          <h4>메모리 사용 통계</h4>\r\n          <div className={styles.metricsGrid}>\r\n            {Object.entries(metrics).map(([key, value]) =>\r\n              renderMetricItem(\r\n                key\r\n                  .replace(/([A-Z])/g, ' $1')\r\n                  .replace(/^./, str => str.toUpperCase()),\r\n                value\r\n              )\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 추천 사항 표시 */}\r\n        <div className={styles.recommendationsSection}>\r\n          <h4>추천 사항</h4>\r\n          {renderRecommendations(recommendations)}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 사용자 행동 분석 결과 렌더링\r\n   */\r\n  const renderUserBehaviorResults = () => {\r\n    const result = getResultForModel(LearningModelType.USER_BEHAVIOR);\r\n\r\n    if (!result) {\r\n      return (\r\n        <div className={styles.noResults}>\r\n          <p>사용자 행동 분석 결과가 없습니다.</p>\r\n          <button\r\n            onClick={() => runLearning([LearningModelType.USER_BEHAVIOR])}\r\n            disabled={isLoading}\r\n            className={styles.learningButton}\r\n          >\r\n            사용자 패턴 학습하기\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const { insights, recommendations, metrics } = result;\r\n\r\n    return (\r\n      <div className={styles.resultSection}>\r\n        <h3>사용자 행동 분석 결과</h3>\r\n\r\n        {/* 인사이트 표시 */}\r\n        <div className={styles.insightsSection}>\r\n          <h4>주요 인사이트</h4>\r\n\r\n          {insights.map((insight, index) => {\r\n            if (insight.type === 'topWords' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>자주 사용하는 단어</h5>\r\n                  <div className={styles.wordCloud}>\r\n                    {insight.data.slice(0, 10).map((word: WordData, i: number) => (\r\n                      <div key={i} className={styles.wordItem}>\r\n                        <span className={styles.wordRank}>{i + 1}</span>\r\n                        <span className={styles.wordText}>{word.word}</span>\r\n                        <span className={styles.wordCount}>{word.count}</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            if (insight.type === 'activeHours' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>활발한 활동 시간대</h5>\r\n                  <div className={styles.activeHoursChart}>\r\n                    {insight.data.map((hour: HourData, i: number) => (\r\n                      <div key={i} className={styles.hourBar}>\r\n                        <div \r\n                          className={styles.hourBarFill} \r\n                          style={{ height: `${hour.percentage || 0}%` }}\r\n                        />\r\n                        <span className={styles.hourLabel}>{hour.hour}</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            return null;\r\n          })}\r\n        </div>\r\n\r\n        {/* 메트릭 표시 */}\r\n        <div className={styles.metricsSection}>\r\n          <h4>사용 통계</h4>\r\n          <div className={styles.metricsGrid}>\r\n            {Object.entries(metrics).map(([key, value]) =>\r\n              renderMetricItem(\r\n                key\r\n                  .replace(/([A-Z])/g, ' $1')\r\n                  .replace(/^./, str => str.toUpperCase()),\r\n                value\r\n              )\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 추천 사항 표시 */}\r\n        <div className={styles.recommendationsSection}>\r\n          <h4>추천 사항</h4>\r\n          {renderRecommendations(recommendations)}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 오류 분석 결과 렌더링\r\n   */\r\n  const renderErrorPredictionResults = () => {\r\n    const result = getResultForModel(LearningModelType.ERROR_PREDICTION);\r\n\r\n    if (!result) {\r\n      return (\r\n        <div className={styles.noResults}>\r\n          <p>오류 분석 결과가 없습니다.</p>\r\n          <button\r\n            onClick={() => runLearning([LearningModelType.ERROR_PREDICTION])}\r\n            disabled={isLoading}\r\n            className={styles.learningButton}\r\n          >\r\n            오류 패턴 학습하기\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const { insights, recommendations, metrics } = result;\r\n\r\n    return (\r\n      <div className={styles.resultSection}>\r\n        <h3>오류 패턴 분석 결과</h3>\r\n\r\n        {/* 인사이트 표시 */}\r\n        <div className={styles.insightsSection}>\r\n          <h4>주요 인사이트</h4>\r\n\r\n          {insights.map((insight, index) => {\r\n            if (insight.type === 'topErrors' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>가장 빈번한 오류 유형</h5>\r\n                  <ul className={styles.errorsList}>\r\n                    {insight.data.map((error: any, i: number) => (\r\n                      <li key={i} className={styles.errorItem}>\r\n                        <span className={styles.errorType}>{error.type}</span>\r\n                        <span className={styles.errorCount}>{error.count}회</span>\r\n                        <div className={styles.errorBar} style={{ width: `${Math.min(100, error.count * 5)}%` }} />\r\n\r\n                        {error.examples && error.examples.length > 0 && (\r\n                          <div className={styles.errorExample}>\r\n                            <span className={styles.errorExampleLabel}>예시:</span>\r\n                            <span className={styles.errorExampleContent}>\r\n                              {error.examples[0].message}\r\n                            </span>\r\n                          </div>\r\n                        )}\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            if (insight.type === 'errorPeakHours' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>오류 발생 빈도 높은 시간대</h5>\r\n                  <div className={styles.errorHoursChart}>\r\n                    {insight.data.map((hour: HourData, i: number) => (\r\n                      <div key={i} className={styles.errorHourBar}\r\n                        style={{\r\n                          height: `${Math.max(20, (hour.count / 5) * 100)}px`,\r\n                          backgroundColor: i === 0 ? '#e03131' : '#f08c00'\r\n                        }}\r\n                      >\r\n                        <span className={styles.errorHourLabel}>{hour.hour}시</span>\r\n                        <span className={styles.errorHourValue}>{hour.count}회</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            return null;\r\n          })}\r\n        </div>\r\n\r\n        {/* 메트릭 표시 */}\r\n        <div className={styles.metricsSection}>\r\n          <h4>오류 통계</h4>\r\n          <div className={styles.metricsGrid}>\r\n            {Object.entries(metrics).map(([key, value]) =>\r\n              renderMetricItem(\r\n                key\r\n                  .replace(/([A-Z])/g, ' $1')\r\n                  .replace(/^./, str => str.toUpperCase()),\r\n                value\r\n              )\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 추천 사항 표시 */}\r\n        <div className={styles.recommendationsSection}>\r\n          <h4>추천 사항</h4>\r\n          {renderRecommendations(recommendations)}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 종합 분석 결과 렌더링\r\n   */\r\n  const renderOverallInsights = () => {\r\n    if (combinedRecommendations.length === 0) {\r\n      return (\r\n        <div className={styles.noResults}>\r\n          <p>종합 분석 결과가 없습니다. 먼저 다양한 유형의 학습을 실행하세요.</p>\r\n          <button\r\n            onClick={() => runLearning()}\r\n            disabled={isLoading}\r\n            className={styles.learningButton}\r\n          >\r\n            전체 학습 실행하기\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className={styles.resultSection}>\r\n        <h3>종합 분석 결과</h3>\r\n\r\n        <div className={styles.overallSummary}>\r\n          <div className={styles.summaryStats}>\r\n            <div className={styles.summaryStat}>\r\n              <span className={styles.summaryStatLabel}>분석된 모델</span>\r\n              <span className={styles.summaryStatValue}>{results.length}</span>\r\n            </div>\r\n            <div className={styles.summaryStat}>\r\n              <span className={styles.summaryStatLabel}>총 추천사항</span>\r\n              <span className={styles.summaryStatValue}>{combinedRecommendations.length}</span>\r\n            </div>\r\n            <div className={styles.summaryStat}>\r\n              <span className={styles.summaryStatLabel}>마지막 분석</span>\r\n              <span className={styles.summaryStatValue}>\r\n                {lastAnalysisTime\r\n                  ? new Date(lastAnalysisTime).toLocaleString()\r\n                  : '없음'}\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={styles.recommendationsSection}>\r\n            <h4>통합 추천 사항</h4>\r\n            {renderRecommendations(combinedRecommendations)}\r\n          </div>\r\n\r\n          <div className={styles.actionButtons}>\r\n            <button\r\n              onClick={() => runLearning()}\r\n              disabled={isLoading}\r\n              className={styles.learningButton}\r\n            >\r\n              {isLoading ? '학습 중...' : '학습 다시 실행하기'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // 선택한 탭에 따라 결과 렌더링\r\n  const renderSelectedTabContent = () => {\r\n    switch (selectedTab) {\r\n      case LearningModelType.MEMORY_OPTIMIZATION:\r\n        return renderMemoryOptimizationResults();\r\n      case LearningModelType.USER_BEHAVIOR:\r\n        return renderUserBehaviorResults();\r\n      case LearningModelType.ERROR_PREDICTION:\r\n        return renderErrorPredictionResults();\r\n      case LearningModelType.PERFORMANCE_OPTIMIZATION:\r\n        return renderOverallInsights();\r\n      default:\r\n        return <div>유효하지 않은 탭입니다.</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`${styles.logAnalysisPanel} ${className}`}>\r\n      <div className={styles.header}>\r\n        <h2>로그 분석 대시보드</h2>\r\n        {lastAnalysisTime && (\r\n          <p className={styles.lastAnalysisTime}>\r\n            마지막 분석: {new Date(lastAnalysisTime).toLocaleString()}\r\n          </p>\r\n        )}\r\n      </div>\r\n\r\n      {/* 학습 컨트롤 버튼 */}\r\n      <div className={styles.controls}>\r\n        <button\r\n          onClick={() => runLearning()}\r\n          disabled={isLoading}\r\n          className={styles.mainButton}\r\n        >\r\n          {isLoading ? '학습 중...' : '모든 데이터 학습하기'}\r\n        </button>\r\n      </div>\r\n\r\n      {/* 에러 메시지 */}\r\n      {error && (\r\n        <div className={styles.errorMessage}>\r\n          <p>오류 발생: {error}</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* 학습 중 로딩 표시 */}\r\n      {isLoading && (\r\n        <div className={styles.loadingIndicator}>\r\n          <div className={styles.spinner}></div>\r\n          <p>로그 데이터 학습 중...</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* 탭 네비게이션 */}\r\n      <div className={styles.tabNavigation}>\r\n        <button\r\n          className={`${styles.tabButton} ${selectedTab === LearningModelType.MEMORY_OPTIMIZATION ? styles.activeTab : ''}`}\r\n          onClick={() => setSelectedTab(LearningModelType.MEMORY_OPTIMIZATION)}\r\n        >\r\n          메모리 최적화\r\n        </button>\r\n        <button\r\n          className={`${styles.tabButton} ${selectedTab === LearningModelType.USER_BEHAVIOR ? styles.activeTab : ''}`}\r\n          onClick={() => setSelectedTab(LearningModelType.USER_BEHAVIOR)}\r\n        >\r\n          사용자 행동\r\n        </button>\r\n        <button\r\n          className={`${styles.tabButton} ${selectedTab === LearningModelType.ERROR_PREDICTION ? styles.activeTab : ''}`}\r\n          onClick={() => setSelectedTab(LearningModelType.ERROR_PREDICTION)}\r\n        >\r\n          오류 예측\r\n        </button>\r\n        <button\r\n          className={`${styles.tabButton} ${selectedTab === LearningModelType.PERFORMANCE_OPTIMIZATION ? styles.activeTab : ''}`}\r\n          onClick={() => setSelectedTab(LearningModelType.PERFORMANCE_OPTIMIZATION)}\r\n        >\r\n          종합 분석\r\n        </button>\r\n      </div>\r\n\r\n      {/* 선택한 탭 내용 렌더링 */}\r\n      <div className={styles.tabContent}>\r\n        {renderSelectedTabContent()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","'use client';\r\n\r\nimport React from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport LogAnalysisPanel from '../../components/LogAnalysisPanel';\r\nimport styles from './page.module.css';\r\n\r\n/**\r\n * 로그 분석 페이지\r\n * 로그 데이터 학습 및 분석 결과를 보여줍니다.\r\n */\r\nexport default function LogAnalysisPage() {\r\n  const router = useRouter();\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <header className={styles.header}>\r\n        <h1>로그 분석 및 인사이트</h1>\r\n        <p>\r\n          로그 데이터를 기반으로 메모리 최적화, 사용자 행동 패턴, 오류 예측에 대한 인사이트를 확인하세요.\r\n        </p>\r\n      </header>\r\n\r\n      <main className={styles.main}>\r\n        <LogAnalysisPanel />\r\n\r\n        <section className={styles.helpSection}>\r\n          <h2>분석 도움말</h2>\r\n          <div className={styles.helpContent}>\r\n            <h3>학습 기능 안내</h3>\r\n            <p>\r\n              로그 학습은 애플리케이션의 저장된 로그 데이터를 분석하여 패턴을 발견하고 최적화 방안을 제시합니다.\r\n              각 모듈별로 다음과 같은 인사이트를 제공합니다:\r\n            </p>\r\n\r\n            <ul>\r\n              <li>\r\n                <strong>메모리 최적화</strong>: 메모리 사용 패턴을 분석하여 최적의 GC 간격, 메모리 누수 가능성이 있는 세션,\r\n                그리고 메모리 사용량이 많은 시간대를 식별합니다.\r\n              </li>\r\n              <li>\r\n                <strong>사용자 행동</strong>: 사용자의 입력 패턴, 자주 사용하는 단어, 활발한 활동 시간대 등을 분석하여\r\n                사용자 경험 최적화 방안을 제안합니다.\r\n              </li>\r\n              <li>\r\n                <strong>오류 예측</strong>: 발생한 오류의 유형과 패턴을 분석하여 자주 발생하는 오류에 대한 대응 전략을\r\n                제시합니다.\r\n              </li>\r\n              <li>\r\n                <strong>종합 분석</strong>: 모든 데이터를 종합하여 시스템 전반의 최적화 권장사항을 제공합니다.\r\n              </li>\r\n            </ul>\r\n\r\n            <h3>학습 시 참고사항</h3>\r\n            <p>\r\n              <strong>데이터 양</strong>: 보다 정확한 분석 결과를 위해 충분한 양의 로그 데이터가 필요합니다. 일반적으로 최소 몇 일 이상의\r\n              사용 데이터가 필요합니다.\r\n            </p>\r\n            <p>\r\n              <strong>학습 주기</strong>: 시스템 변화나 새로운 패턴을 반영하기 위해 정기적으로 학습을 실행하는 것이 좋습니다.\r\n            </p>\r\n            <p>\r\n              <strong>리소스 사용</strong>: 학습 과정은 서버 리소스를 일시적으로 많이 사용할 수 있으므로, 사용량이 적은 시간대에 실행하는 것을 권장합니다.\r\n            </p>\r\n          </div>\r\n\r\n          <div className={styles.actions}>\r\n            <button\r\n              onClick={() => router.push('/dashboard')}\r\n              className={styles.secondaryButton}\r\n            >\r\n              대시보드로 돌아가기\r\n            </button>\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logAnalysisPanel\":\"LogAnalysisPanel_logAnalysisPanel__oyS8m\",\"header\":\"LogAnalysisPanel_header__ntVim\",\"lastAnalysisTime\":\"LogAnalysisPanel_lastAnalysisTime__fsF3j\",\"controls\":\"LogAnalysisPanel_controls__uA_Zd\",\"mainButton\":\"LogAnalysisPanel_mainButton__p9rNy\",\"learningButton\":\"LogAnalysisPanel_learningButton__91G6_\",\"errorMessage\":\"LogAnalysisPanel_errorMessage__XQM51\",\"loadingIndicator\":\"LogAnalysisPanel_loadingIndicator___8OQc\",\"spinner\":\"LogAnalysisPanel_spinner__2cxhW\",\"spin\":\"LogAnalysisPanel_spin__HYfFK\",\"tabNavigation\":\"LogAnalysisPanel_tabNavigation__pveWH\",\"tabButton\":\"LogAnalysisPanel_tabButton__ZFnuT\",\"activeTab\":\"LogAnalysisPanel_activeTab__wJN0E\",\"resultSection\":\"LogAnalysisPanel_resultSection__Cy9Qz\",\"noResults\":\"LogAnalysisPanel_noResults__8IaJP\",\"insightsSection\":\"LogAnalysisPanel_insightsSection__RzhLb\",\"metricsSection\":\"LogAnalysisPanel_metricsSection__PDTFd\",\"recommendationsSection\":\"LogAnalysisPanel_recommendationsSection__W53ft\",\"insightItem\":\"LogAnalysisPanel_insightItem__z_dHX\",\"peakHoursChart\":\"LogAnalysisPanel_peakHoursChart__7yAvM\",\"activeHoursChart\":\"LogAnalysisPanel_activeHoursChart__6NKUe\",\"errorHoursChart\":\"LogAnalysisPanel_errorHoursChart__PXG0_\",\"peakHourBar\":\"LogAnalysisPanel_peakHourBar__Ao4lA\",\"activeHourBar\":\"LogAnalysisPanel_activeHourBar__Uwapg\",\"errorHourBar\":\"LogAnalysisPanel_errorHourBar__lml6X\",\"peakHourLabel\":\"LogAnalysisPanel_peakHourLabel__yXmte\",\"activeHourLabel\":\"LogAnalysisPanel_activeHourLabel__Vm7ZA\",\"errorHourLabel\":\"LogAnalysisPanel_errorHourLabel__YHKIA\",\"peakHourValue\":\"LogAnalysisPanel_peakHourValue__873hu\",\"activeHourValue\":\"LogAnalysisPanel_activeHourValue__K6F3f\",\"errorHourValue\":\"LogAnalysisPanel_errorHourValue__WfPSg\",\"metricsGrid\":\"LogAnalysisPanel_metricsGrid__ItMfT\",\"metricItem\":\"LogAnalysisPanel_metricItem__aFhJB\",\"metricLabel\":\"LogAnalysisPanel_metricLabel__7En0A\",\"metricValue\":\"LogAnalysisPanel_metricValue__hwk1l\",\"recommendationList\":\"LogAnalysisPanel_recommendationList__3i7br\",\"recommendationItem\":\"LogAnalysisPanel_recommendationItem__i_n1b\",\"wordCloud\":\"LogAnalysisPanel_wordCloud__dpTf_\",\"wordItem\":\"LogAnalysisPanel_wordItem__I7IQy\",\"errorsList\":\"LogAnalysisPanel_errorsList__z4AlY\",\"errorItem\":\"LogAnalysisPanel_errorItem__pXK0v\",\"errorType\":\"LogAnalysisPanel_errorType__X9Q21\",\"errorCount\":\"LogAnalysisPanel_errorCount__tJ7HM\",\"errorBar\":\"LogAnalysisPanel_errorBar__IQe6W\",\"errorExample\":\"LogAnalysisPanel_errorExample__e0ghi\",\"errorExampleLabel\":\"LogAnalysisPanel_errorExampleLabel__bH9TT\",\"errorExampleContent\":\"LogAnalysisPanel_errorExampleContent__90lxt\",\"sessionsList\":\"LogAnalysisPanel_sessionsList__49n41\",\"sessionIncrease\":\"LogAnalysisPanel_sessionIncrease__E4TUk\",\"overallSummary\":\"LogAnalysisPanel_overallSummary__IczVW\",\"summaryStats\":\"LogAnalysisPanel_summaryStats__dPN8j\",\"summaryStat\":\"LogAnalysisPanel_summaryStat__3W5FW\",\"summaryStatLabel\":\"LogAnalysisPanel_summaryStatLabel__6P0lq\",\"summaryStatValue\":\"LogAnalysisPanel_summaryStatValue__BG_t2\",\"actionButtons\":\"LogAnalysisPanel_actionButtons__YM7Ce\"};","import(/* webpackMode: \"eager\" */ \"/Users/user/loop/loop_3/src/app/pages/analysis/page.tsx\");\n"],"names":["OPTIMIZATION_LEVEL","MEDIUM","DEFAULT_OPTIONS","minLevel","maxLogs","printToConsole","moduleName","MemoryLogger","level","message","data","options","entry","timestamp","Date","now","logs","push","length","shift","toISOString","prefix","console","debug","info","warn","error","log","getLogs","getLogsByLevel","filter","getErrorLogs","constructor","memoryLogger","bind","INDEXEDDB_STORE","saveLogToIndexedDB","logEntry","Promise","resolve","reject","window","indexedDB","request","open","onupgradeneeded","event","db","target","result","objectStoreNames","contains","createObjectStore","keyPath","onerror","onsuccess","transaction","addRequest","objectStore","add","oncomplete","close","LearningModelType","LogAnalysisPanel","className","isLoading","setIsLoading","useState","setError","results","setResults","selectedTab","setSelectedTab","MEMORY_OPTIMIZATION","lastAnalysisTime","setLastAnalysisTime","combinedRecommendations","setCombinedRecommendations","setLearningStatus","isLearning","lastLearningTime","availableModels","Object","values","useRef","checkLearningStatus","useCallback","response","fetch","ok","status","statusText","json","success","useEffect","runLearning","models","modelsToLearn","method","headers","body","JSON","stringify","modelTypes","memory","timeRange","startTime","endTime","user","getResultForModel","find","modelType","renderRecommendations","ul","styles","recommendations","map","rec","index","li","renderMetricItem","label","value","formattedValue","toLowerCase","includes","formatBytes","decimals","bytes","i","Math","floor","k","parseFloat","pow","toFixed","Number","isInteger","div","span","renderMemoryOptimizationResults","p","button","onClick","disabled","insights","metrics","h3","h4","insight","type","h5","hour","style","height","percentage","session","date","formatTime","milliseconds","minutes","seconds","duration","KeyboardIcon","keyCount","entries","key","replace","str","toUpperCase","renderUserBehaviorResults","USER_BEHAVIOR","slice","word","count","renderErrorPredictionResults","ERROR_PREDICTION","width","min","examples","max","backgroundColor","renderOverallInsights","toLocaleString","h2","PERFORMANCE_OPTIMIZATION","LogAnalysisPage","router","useRouter","header","h1","main","section","strong"],"sourceRoot":"","ignoreList":[]}