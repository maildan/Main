[{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\ClientLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\db-test\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\getLogs\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LogEntry' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport pool from '@/lib/mysql';\r\n\r\n// 로그 항목 인터페이스 정의\r\ninterface LogEntry {\r\n  id?: number;\r\n  timestamp: string;\r\n  keyCount: number;\r\n  typingTime: number;\r\n  totalChars: number;\r\n  totalWords: number;\r\n  accuracy: number;\r\n  application: string;\r\n  browser?: string;\r\n  website?: string;\r\n}\r\n\r\n// \"force-dynamic\" 제거 - electron 환경에서는 필요하지 않음\r\n// export const dynamic = 'force-dynamic'; \r\n\r\nexport async function GET() {\r\n  try {\r\n    // SQL 쿼리 직접 실행\r\n    const [rows] = await pool.query(`\r\n      SELECT * FROM typing_logs \r\n      ORDER BY timestamp DESC\r\n    `);\r\n    \r\n    return NextResponse.json({ success: true, logs: rows }, { status: 200 });\r\n  } catch (error: unknown) {\r\n    console.error('DB 조회 오류:', error);\r\n    \r\n    // 에러 발생 시 빈 배열 반환\r\n    return NextResponse.json(\r\n      { success: true, logs: [] },\r\n      { status: 200 }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\init-db\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\logs\\learn\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\logs\\save\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":76,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 로그 저장 API 엔드포인트\r\n */\r\n\r\nimport { NextResponse } from 'next/server';\r\nimport { writeFile, mkdir } from 'fs/promises';\r\nimport { join, dirname } from 'path';\r\nimport { LogEntry } from '@/app/utils/log-utils';\r\n\r\n/**\r\n * 로그를 저장합니다.\r\n * \r\n * @param request - POST 요청\r\n * @returns 저장 결과\r\n */\r\nexport async function POST(request: Request) {\r\n  try {\r\n    // 요청 검증\r\n    if (!request.body) {\r\n      return NextResponse.json(\r\n        { success: false, error: '요청 본문이 없습니다.' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // 로그 데이터 파싱\r\n    const logEntry = await request.json() as LogEntry;\r\n    \r\n    if (!logEntry.type || !logEntry.timestamp) {\r\n      return NextResponse.json(\r\n        { success: false, error: '필수 로그 필드가 누락되었습니다.' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // 로그 저장\r\n    const savedLog = await saveLogToFile(logEntry);\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      message: '로그가 성공적으로 저장되었습니다.',\r\n      data: savedLog\r\n    });\r\n  } catch (error) {\r\n    console.error('로그 저장 중 오류:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: error instanceof Error ? error.message : '로그 저장 중 알 수 없는 오류가 발생했습니다.' \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * 로그를 파일 시스템에 저장합니다.\r\n * \r\n * @param logEntry - 저장할 로그 엔트리\r\n * @returns 저장된 로그 엔트리\r\n */\r\nasync function saveLogToFile(logEntry: LogEntry): Promise<LogEntry> {\r\n  // 로그 저장 디렉토리 경로 생성\r\n  const date = new Date(logEntry.timestamp);\r\n  const year = date.getFullYear();\r\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n  const day = date.getDate().toString().padStart(2, '0');\r\n  \r\n  // 로그 파일 저장 경로 구성 (public 폴더 하위에 저장)\r\n  const logDir = join(process.cwd(), 'public', 'logs', logEntry.type, `${year}-${month}-${day}`);\r\n  \r\n  // 디렉토리가 없으면 생성\r\n  try {\r\n    await mkdir(dirname(logDir), { recursive: true });\r\n  } catch (error) {\r\n    // 디렉토리가 이미 존재하면 무시\r\n  }\r\n  \r\n  // 파일명 생성 (timestamp + id)\r\n  const fileName = `${logEntry.timestamp}-${logEntry.id || Date.now()}.json`;\r\n  const filePath = join(logDir, fileName);\r\n  \r\n  // 로그를 JSON 형식으로 저장\r\n  await writeFile(filePath, JSON.stringify(logEntry, null, 2), 'utf-8');\r\n  \r\n  return {\r\n    ...logEntry,\r\n    id: logEntry.id || `${Date.now()}-${Math.random().toString(36).substring(2, 10)}`\r\n  };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\logs\\search\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\native\\gpu\\acceleration\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setGpuAcceleration' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport {\r\n  enableGpuAcceleration,\r\n  disableGpuAcceleration,\r\n  setGpuAcceleration // checkGpuAcceleration -> setGpuAcceleration 으로 변경\r\n} from '@/app/utils/gpu-acceleration';\r\n\r\nexport async function GET(_request: NextRequest) {\r\n  try {\r\n    let isEnabled: boolean;\r\n    try {\r\n      isEnabled = await enableGpuAcceleration();\r\n    } catch (e) {\r\n      isEnabled = false;\r\n      console.warn('enableGpuAcceleration failed, assuming disabled', e);\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      enabled: isEnabled,\r\n    });\r\n  } catch (error) {\r\n    const errorMessage = error instanceof Error ? error.message : String(error);\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      enabled: false,\r\n      error: errorMessage\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const requestData = await request.json();\r\n    const enableAcceleration = requestData.enable === true;\r\n    \r\n    let result;\r\n    if (enableAcceleration) {\r\n      const success = await enableGpuAcceleration();\r\n      result = {\r\n        enabled: success,\r\n        message: success ? 'GPU 가속이 활성화되었습니다.' : 'GPU 가속 활성화에 실패했습니다.'\r\n      };\r\n    } else {\r\n      const success = await disableGpuAcceleration();\r\n      result = {\r\n        enabled: false,\r\n        message: success ? 'GPU 가속이 비활성화되었습니다.' : 'GPU 가속 비활성화에 실패했습니다.'\r\n      };\r\n    }\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      enabled: result.enabled,\r\n      message: result.message || null\r\n    });\r\n  } catch (error) {\r\n    const errorMessage = error instanceof Error ? error.message : String(error);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: errorMessage\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const requestData = await request.json();\r\n    const { settings: _settings } = requestData;\r\n    \r\n    const success = true;\r\n    const message = '설정이 적용되었습니다';\r\n    \r\n    return NextResponse.json({\r\n      success,\r\n      message\r\n    });\r\n  } catch (error) {\r\n    const errorMessage = error instanceof Error ? error.message : String(error);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: errorMessage\r\n    }, { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\native\\gpu\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\native\\gpu\\settings\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":6,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\n\r\n/**\r\n * GPU 설정 가져오기 API\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // 서버 측에서 네이티브 모듈 불러오기\r\n    const nativeModule = require('../../../../../../../native-modules');\r\n    \r\n    // GPU 설정 가져오기\r\n    const settingsJson = nativeModule.get_gpu_settings_json();\r\n    const settings = JSON.parse(settingsJson);\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      settings,\r\n      timestamp: Date.now()\r\n    });\r\n  } catch (error) {\r\n    console.error('GPU 설정 가져오기 API 오류:', error);\r\n    return NextResponse.json({\r\n      success: false,\r\n      settings: null,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n      timestamp: Date.now()\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n/**\r\n * GPU 설정 업데이트 API\r\n */\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const settingsJson = await request.text();\r\n    \r\n    // 서버 측에서 네이티브 모듈 불러오기\r\n    const nativeModule = require('../../../../../../../native-modules');\r\n    \r\n    // GPU 설정 업데이트\r\n    const success = nativeModule.update_gpu_settings_json(settingsJson);\r\n    \r\n    return NextResponse.json({\r\n      success,\r\n      timestamp: Date.now()\r\n    });\r\n  } catch (error) {\r\n    console.error('GPU 설정 업데이트 API 오류:', error);\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n      timestamp: Date.now()\r\n    }, { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\native\\memory\\optimize\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\native\\memory\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\native\\memory\\settings\\initialize\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\native\\memory\\settings\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":6,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\n\r\n/**\r\n * 메모리 설정 가져오기 API\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // 서버 측에서 네이티브 모듈 불러오기\r\n    const nativeModule = require('../../../../../../../native-modules');\r\n    \r\n    // 설정 가져오기\r\n    const settingsJson = nativeModule.get_settings_json();\r\n    const settings = JSON.parse(settingsJson);\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      settings,\r\n      timestamp: Date.now()\r\n    });\r\n  } catch (error) {\r\n    console.error('메모리 설정 가져오기 API 오류:', error);\r\n    return NextResponse.json({\r\n      success: false,\r\n      settings: null,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n      timestamp: Date.now()\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n/**\r\n * 메모리 설정 초기화 API\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const settingsJson = await request.text();\r\n    \r\n    // 서버 측에서 네이티브 모듈 불러오기\r\n    const nativeModule = require('../../../../../../native-modules');\r\n    \r\n    const success = await nativeModule.initialize_memory_settings(settingsJson);\r\n    \r\n    return NextResponse.json({\r\n      success: !!success,\r\n      timestamp: Date.now()\r\n    });\r\n  } catch (error) {\r\n    console.error('메모리 설정 초기화 API 오류:', error);\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n      timestamp: Date.now()\r\n    }, { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\native\\memory\\settings\\update\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\native\\status\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\native\\test\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\native\\worker\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'threadCount' is assigned a value but never used. Allowed unused args must match /^_/u.","line":11,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'taskType' is defined but never used. Allowed unused args must match /^_/u.","line":13,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":13,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\n// 모듈 경로 수정 (가능한 대안들)\r\n// import { workerPool } from '@/utils/worker-pool';\r\n// 또는 아래 경로들 중 적합한 것 사용\r\n// import { workerPool } from '@/app/lib/worker-pool';\r\n// import { workerPool } from '@/lib/worker-pool';\r\n// import { workerPool } from '../../../utils/worker-pool';\r\n\r\n// 또는 임시로 workerPool 모듈을 직접 정의\r\nconst workerPool = {\r\n  initialize: (threadCount: number = 2) => true,\r\n  shutdown: () => true,\r\n  submitTask: async (taskType: string, data: string) => ({ success: true }),\r\n  getStats: () => ({ activeWorkers: 0, pendingTasks: 0, completedTasks: 0 })\r\n};\r\n\r\n// 기존 코드는 동일하게 유지\r\nconst {\r\n  initialize: initializeWorkerPool,\r\n  shutdown: shutdownWorkerPool,\r\n  submitTask,\r\n  getStats: getWorkerPoolStats\r\n} = workerPool;\r\n\r\n/**\r\n * 워커 풀 상태 확인 API\r\n */\r\nexport async function GET(_request: NextRequest) {\r\n  try {\r\n    const stats = getWorkerPoolStats();\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      stats,\r\n      timestamp: Date.now()\r\n    });\r\n  } catch (error) {\r\n    console.error('워커 풀 상태 API 오류:', error);\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n      timestamp: Date.now()\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n/**\r\n * 작업 제출 API\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { taskType, data } = await request.json();\r\n    \r\n    if (!taskType || !data) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: '유효하지 않은 요청 파라미터',\r\n        timestamp: Date.now()\r\n      }, { status: 400 });\r\n    }\r\n    \r\n    const result = await submitTask(taskType, JSON.stringify(data));\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      result,\r\n      timestamp: Date.now()\r\n    });\r\n  } catch (error) {\r\n    console.error('작업 제출 API 오류:', error);\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n      timestamp: Date.now()\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n/**\r\n * 워커 풀 초기화/종료 API\r\n */\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const { action, threadCount } = await request.json();\r\n    \r\n    if (action === 'initialize') {\r\n      const result = initializeWorkerPool(threadCount || 0);\r\n      return NextResponse.json({\r\n        success: result,\r\n        action: 'initialize',\r\n        timestamp: Date.now()\r\n      });\r\n    } else if (action === 'shutdown') {\r\n      const result = shutdownWorkerPool();\r\n      return NextResponse.json({\r\n        success: result,\r\n        action: 'shutdown',\r\n        timestamp: Date.now()\r\n      });\r\n    } else {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: '유효하지 않은 액션',\r\n        timestamp: Date.now()\r\n      }, { status: 400 });\r\n    }\r\n  } catch (error) {\r\n    console.error('워커 풀 제어 API 오류:', error);\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n      timestamp: Date.now()\r\n    }, { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\api\\saveLogs\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\AppFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\AppHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\ClientLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\ClientSideControls.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":43,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState } from 'react';\r\n\r\n// TypingTracker 컴포넌트가 없어 임시로 타입 정의\r\ninterface TypingTrackerProps {\r\n  stats?: TypingData | undefined;\r\n  _isTracking?: boolean | undefined;\r\n  onResult: (result: TypingData) => void;\r\n}\r\n\r\n// TypingData 타입이 없어 임시로 정의\r\ninterface TypingData {\r\n  keyCount: number;\r\n  typingTime: number;\r\n  accuracy: number;\r\n}\r\n\r\n// ClientSideControlsProps 정의\r\ninterface ClientSideControlsProps {\r\n  // 필요한 props가 있으면 여기에 추가\r\n}\r\n\r\nexport default function ClientSideControls(_props: ClientSideControlsProps) {\r\n  const [typingStats, setTypingStats] = useState<TypingData | null>(null);\r\n  const [isTracking, setIsTracking] = useState(false);\r\n\r\n  const handleTypingResult = (result: TypingData) => {\r\n    setTypingStats(result);\r\n    setIsTracking(false);\r\n  };\r\n\r\n  const startTracking = () => {\r\n    setTypingStats(null);\r\n    setIsTracking(true);\r\n  };\r\n\r\n  const stopTracking = () => {\r\n    setIsTracking(false);\r\n  };\r\n\r\n  // 임시 TypingTracker 컴포넌트 정의\r\n  const TypingTracker = (props: TypingTrackerProps) => (\r\n    <div>Typing Tracker Placeholder</div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"rounded-lg border bg-white p-4 shadow-sm dark:border-gray-700 dark:bg-gray-800\">\r\n      <h2 className=\"mb-3 text-lg font-medium\">타이핑 통계</h2>\r\n\r\n      <div className=\"mb-4 flex justify-between\">\r\n        <button\r\n          onClick={startTracking}\r\n          disabled={isTracking}\r\n          className=\"rounded bg-blue-500 px-3 py-1 text-white hover:bg-blue-600 disabled:bg-blue-300\"\r\n        >\r\n          트래킹 시작\r\n        </button>\r\n\r\n        <button\r\n          onClick={stopTracking}\r\n          disabled={!isTracking}\r\n          className=\"rounded bg-red-500 px-3 py-1 text-white hover:bg-red-600 disabled:bg-red-300\"\r\n        >\r\n          트래킹 중지\r\n        </button>\r\n      </div>\r\n\r\n      {isTracking && (\r\n        <TypingTracker\r\n          stats={typingStats || undefined}\r\n          _isTracking={isTracking}\r\n          onResult={handleTypingResult}\r\n        />\r\n      )}\r\n\r\n      {typingStats && !isTracking && (\r\n        <div className=\"rounded-md border bg-gray-50 p-3 dark:border-gray-600 dark:bg-gray-700\">\r\n          <h3 className=\"mb-2 font-medium\">결과</h3>\r\n          <div className=\"grid grid-cols-3 gap-3 text-sm\">\r\n            <div>\r\n              <p className=\"text-gray-500\">키 입력 수</p>\r\n              <p className=\"font-medium\">{typingStats.keyCount}</p>\r\n            </div>\r\n            <div>\r\n              <p className=\"text-gray-500\">총 시간</p>\r\n              <p className=\"font-medium\">{typingStats.typingTime}초</p>\r\n            </div>\r\n            <div>\r\n              <p className=\"text-gray-500\">정확도</p>\r\n              <p className=\"font-medium\">{typingStats.accuracy}%</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\CustomHeader.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'headerRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'headerRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":108,"column":19,"nodeType":"Identifier","endLine":108,"endColumn":26},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'detectionAreaRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'detectionAreaRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":112,"column":26,"nodeType":"Identifier","endLine":112,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { memo, useState, useEffect, useRef, useCallback } from 'react';\r\nimport { WindowControls } from './WindowControls';\r\nimport styles from './CustomHeader.module.css';\r\nimport Image from 'next/image';\r\n\r\ninterface CustomHeaderProps {\r\n  darkMode: boolean;\r\n  windowMode: string;\r\n}\r\n\r\nexport const CustomHeader = memo(function CustomHeader({ \r\n  darkMode, \r\n  windowMode \r\n}: CustomHeaderProps) {\r\n  const [isVisible, setIsVisible] = useState(true);\r\n  const [isAutoHide, setIsAutoHide] = useState(windowMode === 'fullscreen-auto-hide');\r\n  const headerRef = useRef<HTMLDivElement>(null);\r\n  const detectionAreaRef = useRef<HTMLDivElement>(null);\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const mouseInsideHeader = useRef(false);\r\n  \r\n  // 창 모드에 따른 자동 숨김 활성화 여부 설정\r\n  useEffect(() => {\r\n    setIsAutoHide(windowMode === 'fullscreen-auto-hide');\r\n    if (windowMode !== 'fullscreen-auto-hide') {\r\n      setIsVisible(true);\r\n    }\r\n  }, [windowMode]);\r\n  \r\n  // 마우스 감지 영역 이벤트 핸들러를 메모이제이션\r\n  const handleDetectionAreaEnter = useCallback(() => {\r\n    if (isAutoHide) {\r\n      setIsVisible(true);\r\n    }\r\n  }, [isAutoHide]);\r\n  \r\n  // 헤더 마우스 이벤트 핸들러를 메모이제이션\r\n  const handleMouseEnter = useCallback(() => {\r\n    mouseInsideHeader.current = true;\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = null;\r\n    }\r\n    setIsVisible(true);\r\n  }, []);\r\n  \r\n  const handleMouseLeave = useCallback(() => {\r\n    mouseInsideHeader.current = false;\r\n    // 마우스가 헤더를 떠나면 타이머 설정\r\n    if (isAutoHide && !timeoutRef.current) {\r\n      timeoutRef.current = setTimeout(() => {\r\n        setIsVisible(false);\r\n        timeoutRef.current = null;\r\n      }, 600);\r\n    }\r\n  }, [isAutoHide]);\r\n\r\n  // 마우스 움직임 감지 함수를 메모이제이션\r\n  const handleMouseMove = useCallback((e: MouseEvent) => {\r\n    const { clientY } = e;\r\n    \r\n    // 마우스가 화면 상단 10px 이내에 있으면 도구모음 표시\r\n    if (clientY < 10) {\r\n      setIsVisible(true);\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n        timeoutRef.current = null;\r\n      }\r\n    } else if (clientY > 100 && isVisible && !mouseInsideHeader.current) {\r\n      // 마우스가 헤더 영역을 벗어났고, 아래로 이동한 경우 타이머 설정\r\n      if (!timeoutRef.current) {\r\n        timeoutRef.current = setTimeout(() => {\r\n          if (!mouseInsideHeader.current) {\r\n            setIsVisible(false);\r\n          }\r\n          timeoutRef.current = null;\r\n        }, 600);\r\n      }\r\n    }\r\n  }, [isVisible]);\r\n  \r\n  // 마우스 움직임 감지 및 도구모음 표시/숨김 처리 최적화\r\n  useEffect(() => {\r\n    if (!isAutoHide) {\r\n      setIsVisible(true);\r\n      return;\r\n    }\r\n    \r\n    // passive 옵션을 true로 설정하여 성능 향상\r\n    window.addEventListener('mousemove', handleMouseMove, { passive: true });\r\n    \r\n    if (headerRef.current) {\r\n      headerRef.current.addEventListener('mouseenter', handleMouseEnter);\r\n      headerRef.current.addEventListener('mouseleave', handleMouseLeave);\r\n    }\r\n    \r\n    if (detectionAreaRef.current) {\r\n      detectionAreaRef.current.addEventListener('mouseenter', handleDetectionAreaEnter);\r\n    }\r\n    \r\n    return () => {\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      \r\n      if (headerRef.current) {\r\n        headerRef.current.removeEventListener('mouseenter', handleMouseEnter);\r\n        headerRef.current.removeEventListener('mouseleave', handleMouseLeave);\r\n      }\r\n      \r\n      if (detectionAreaRef.current) {\r\n        detectionAreaRef.current.removeEventListener('mouseenter', handleDetectionAreaEnter);\r\n      }\r\n      \r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n      }\r\n    };\r\n  }, [isAutoHide, handleMouseMove, handleMouseEnter, handleMouseLeave, handleDetectionAreaEnter]);\r\n\r\n  return (\r\n    <>\r\n      {isAutoHide && (\r\n        <div \r\n          ref={detectionAreaRef}\r\n          className={styles.headerDetectionArea}\r\n          aria-hidden=\"true\"\r\n        />\r\n      )}\r\n      <header \r\n        ref={headerRef}\r\n        className={`${styles.customHeader} ${darkMode ? styles.darkMode : ''} ${isVisible ? styles.visible : styles.hidden}`}\r\n      >\r\n        <div className={styles.dragArea}>\r\n          <div className={styles.leftSection}>\r\n            <div className={styles.iconOnly}>\r\n              <Image \r\n                src=\"/loop-icon.svg\" \r\n                alt=\"Loop 아이콘\"\r\n                width={24}\r\n                height={24}\r\n                priority \r\n                loading=\"eager\"\r\n              />\r\n            </div>\r\n            <h4 className={styles.appTitle}>loop</h4>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className={styles.rightSection}>\r\n          <WindowControls api={window.electronAPI} />\r\n        </div>\r\n      </header>\r\n    </>\r\n  );\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\DarkModeVisualizer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\DebugPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\Editor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\GPUSettingsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\HomeContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\LogAnalysisPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'learningStatusRef' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":67,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { LearningModelType, LearningResult } from '../utils/log-learning';\r\nimport { formatBytes, formatTime } from '../utils/format-utils';\r\nimport KeyboardIcon from '@mui/icons-material/Keyboard';\r\nimport styles from './LogAnalysisPanel.module.css';\r\n\r\n/**\r\n * 시간별 데이터를 위한 타입 정의\r\n */\r\ninterface HourData {\r\n  hour: number;\r\n  count: number;\r\n  percentage?: number;\r\n  // 필요한 다른 속성들 추가\r\n}\r\n\r\n/**\r\n * 세션 데이터를 위한 타입 정의\r\n */\r\ninterface SessionData {\r\n  id: string;\r\n  duration: number;\r\n  keyCount: number;\r\n  date: string;\r\n  // 필요한 다른 속성들 추가\r\n}\r\n\r\n/**\r\n * 단어 데이터를 위한 타입 정의\r\n */\r\ninterface WordData {\r\n  word: string;\r\n  count: number;\r\n  percentage?: number;\r\n  // 필요한 다른 속성들 추가\r\n}\r\n\r\ninterface LogAnalysisPanelProps {\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * 로그 분석 패널 컴포넌트\r\n * 로그 데이터를 학습하고 분석 결과를 표시합니다.\r\n */\r\nexport default function LogAnalysisPanel({ className = '' }: LogAnalysisPanelProps) {\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [results, setResults] = useState<LearningResult[]>([]);\r\n  const [selectedTab, setSelectedTab] = useState<LearningModelType>(LearningModelType.MEMORY_OPTIMIZATION);\r\n  const [lastAnalysisTime, setLastAnalysisTime] = useState<number | null>(null);\r\n  const [combinedRecommendations, setCombinedRecommendations] = useState<string[]>([]);\r\n\r\n  // 학습 상태\r\n  const [, setLearningStatus] = useState<{\r\n    isLearning: boolean;\r\n    lastLearningTime: number | null;\r\n    availableModels: LearningModelType[];\r\n  }>({\r\n    isLearning: false,\r\n    lastLearningTime: null,\r\n    availableModels: Object.values(LearningModelType)\r\n  });\r\n\r\n  const learningStatusRef = useRef(false);\r\n\r\n  /**\r\n   * 학습 상태 확인\r\n   */\r\n  const checkLearningStatus = useCallback(async () => {\r\n    try {\r\n      const response = await fetch('/api/logs/learn');\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API 요청 실패: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        setLearningStatus(data.status || {\r\n          isLearning: false,\r\n          lastLearningTime: null,\r\n          availableModels: Object.values(LearningModelType)\r\n        });\r\n      } else {\r\n        console.error('학습 상태 확인 오류:', data.error);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('학습 상태 확인 중 오류 발생:', error);\r\n    }\r\n  }, []);\r\n\r\n  // 컴포넌트 마운트 시 학습 상태 확인\r\n  useEffect(() => {\r\n    checkLearningStatus();\r\n  }, [checkLearningStatus]);\r\n\r\n  /**\r\n   * 학습 실행\r\n   */\r\n  const runLearning = useCallback(async (models: LearningModelType[] = []) => {\r\n    // 모델을 지정하지 않은 경우 기본값으로 모든 모델 사용\r\n    const modelsToLearn = models.length > 0\r\n      ? models\r\n      : Object.values(LearningModelType);\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('/api/logs/learn', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          modelTypes: modelsToLearn,\r\n          options: {\r\n            memory: {\r\n              timeRange: {\r\n                startTime: Date.now() - 7 * 24 * 60 * 60 * 1000, // 1주일\r\n                endTime: Date.now()\r\n              }\r\n            },\r\n            user: {\r\n              timeRange: {\r\n                startTime: Date.now() - 30 * 24 * 60 * 60 * 1000, // 1개월\r\n                endTime: Date.now()\r\n              }\r\n            },\r\n            error: {\r\n              timeRange: {\r\n                startTime: Date.now() - 30 * 24 * 60 * 60 * 1000, // 1개월\r\n                endTime: Date.now()\r\n              }\r\n            }\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API 요청 실패: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        setResults(data.results || []);\r\n        setCombinedRecommendations(data.combinedRecommendations || []);\r\n        setLastAnalysisTime(data.timestamp || Date.now());\r\n\r\n        // 학습 상태 업데이트\r\n        await checkLearningStatus();\r\n      } else {\r\n        setError(data.error || '알 수 없는 오류가 발생했습니다.');\r\n      }\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [checkLearningStatus]);\r\n\r\n  /**\r\n   * 특정 모델 유형에 대한 학습 결과 가져오기\r\n   */\r\n  const getResultForModel = (modelType: LearningModelType): LearningResult | undefined => {\r\n    return results.find(result => result.modelType === modelType);\r\n  };\r\n\r\n  /**\r\n   * 학습 결과에서 추천 사항 렌더링\r\n   */\r\n  const renderRecommendations = (recommendations: string[]) => {\r\n    return (\r\n      <ul className={styles.recommendationList}>\r\n        {recommendations.map((rec, index) => (\r\n          <li key={index} className={styles.recommendationItem}>{rec}</li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 통계 항목 렌더링\r\n   */\r\n  const renderMetricItem = (label: string, value: any) => {\r\n    let formattedValue = value;\r\n\r\n    // 숫자인 경우 소수점 처리\r\n    if (typeof value === 'number') {\r\n      // 메모리 관련 항목은 MB 또는 바이트로 표시\r\n      if (label.toLowerCase().includes('memory') ||\r\n        label.toLowerCase().includes('heap') ||\r\n        label.toLowerCase().includes('size')) {\r\n        formattedValue = formatBytes(value);\r\n      }\r\n      // 0과 1 사이의 값은 백분율로 표시\r\n      else if (value > 0 && value < 1) {\r\n        formattedValue = `${(value * 100).toFixed(2)}%`;\r\n      }\r\n      // 기타 숫자는 소수점 2자리까지 표시\r\n      else {\r\n        formattedValue = Number.isInteger(value) ? value : value.toFixed(2);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div key={label} className={styles.metricItem}>\r\n        <span className={styles.metricLabel}>{label}:</span>\r\n        <span className={styles.metricValue}>{formattedValue}</span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 메모리 최적화 결과 렌더링\r\n   */\r\n  const renderMemoryOptimizationResults = () => {\r\n    const result = getResultForModel(LearningModelType.MEMORY_OPTIMIZATION);\r\n\r\n    if (!result) {\r\n      return (\r\n        <div className={styles.noResults}>\r\n          <p>메모리 최적화 학습 결과가 없습니다.</p>\r\n          <button\r\n            onClick={() => runLearning([LearningModelType.MEMORY_OPTIMIZATION])}\r\n            disabled={isLoading}\r\n            className={styles.learningButton}\r\n          >\r\n            메모리 패턴 학습하기\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const { insights, recommendations, metrics } = result;\r\n\r\n    return (\r\n      <div className={styles.resultSection}>\r\n        <h3>메모리 사용량 분석 결과</h3>\r\n\r\n        {/* 인사이트 표시 */}\r\n        <div className={styles.insightsSection}>\r\n          <h4>주요 인사이트</h4>\r\n\r\n          {insights.map((insight, index) => {\r\n            if (insight.type === 'peakHours' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>메모리 사용량 피크 시간대</h5>\r\n                  <div className={styles.peakHoursChart}>\r\n                    {insight.data.map((hour: HourData, i: number) => (\r\n                      <div key={i} className={styles.hourBar}>\r\n                        <div \r\n                          className={styles.hourBarFill} \r\n                          style={{ height: `${hour.percentage || 0}%` }}\r\n                        />\r\n                        <span className={styles.hourLabel}>{hour.hour}</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            if (insight.type === 'problematicSessions' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>의심되는 메모리 누수 세션</h5>\r\n                  <ul className={styles.sessionsList}>\r\n                    {insight.data.map((session: SessionData, i: number) => (\r\n                      <div key={i} className={styles.sessionItem}>\r\n                        <div className={styles.sessionDetails}>\r\n                          <span className={styles.sessionDate}>{session.date}</span>\r\n                          <span className={styles.sessionDuration}>{formatTime(session.duration)}</span>\r\n                        </div>\r\n                        <div className={styles.sessionKeyCount}>\r\n                          <KeyboardIcon className={styles.keyIcon} />\r\n                          <span>{session.keyCount}</span>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            return null;\r\n          })}\r\n        </div>\r\n\r\n        {/* 메트릭 표시 */}\r\n        <div className={styles.metricsSection}>\r\n          <h4>메모리 사용 통계</h4>\r\n          <div className={styles.metricsGrid}>\r\n            {Object.entries(metrics).map(([key, value]) =>\r\n              renderMetricItem(\r\n                key\r\n                  .replace(/([A-Z])/g, ' $1')\r\n                  .replace(/^./, str => str.toUpperCase()),\r\n                value\r\n              )\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 추천 사항 표시 */}\r\n        <div className={styles.recommendationsSection}>\r\n          <h4>추천 사항</h4>\r\n          {renderRecommendations(recommendations)}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 사용자 행동 분석 결과 렌더링\r\n   */\r\n  const renderUserBehaviorResults = () => {\r\n    const result = getResultForModel(LearningModelType.USER_BEHAVIOR);\r\n\r\n    if (!result) {\r\n      return (\r\n        <div className={styles.noResults}>\r\n          <p>사용자 행동 분석 결과가 없습니다.</p>\r\n          <button\r\n            onClick={() => runLearning([LearningModelType.USER_BEHAVIOR])}\r\n            disabled={isLoading}\r\n            className={styles.learningButton}\r\n          >\r\n            사용자 패턴 학습하기\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const { insights, recommendations, metrics } = result;\r\n\r\n    return (\r\n      <div className={styles.resultSection}>\r\n        <h3>사용자 행동 분석 결과</h3>\r\n\r\n        {/* 인사이트 표시 */}\r\n        <div className={styles.insightsSection}>\r\n          <h4>주요 인사이트</h4>\r\n\r\n          {insights.map((insight, index) => {\r\n            if (insight.type === 'topWords' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>자주 사용하는 단어</h5>\r\n                  <div className={styles.wordCloud}>\r\n                    {insight.data.slice(0, 10).map((word: WordData, i: number) => (\r\n                      <div key={i} className={styles.wordItem}>\r\n                        <span className={styles.wordRank}>{i + 1}</span>\r\n                        <span className={styles.wordText}>{word.word}</span>\r\n                        <span className={styles.wordCount}>{word.count}</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            if (insight.type === 'activeHours' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>활발한 활동 시간대</h5>\r\n                  <div className={styles.activeHoursChart}>\r\n                    {insight.data.map((hour: HourData, i: number) => (\r\n                      <div key={i} className={styles.hourBar}>\r\n                        <div \r\n                          className={styles.hourBarFill} \r\n                          style={{ height: `${hour.percentage || 0}%` }}\r\n                        />\r\n                        <span className={styles.hourLabel}>{hour.hour}</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            return null;\r\n          })}\r\n        </div>\r\n\r\n        {/* 메트릭 표시 */}\r\n        <div className={styles.metricsSection}>\r\n          <h4>사용 통계</h4>\r\n          <div className={styles.metricsGrid}>\r\n            {Object.entries(metrics).map(([key, value]) =>\r\n              renderMetricItem(\r\n                key\r\n                  .replace(/([A-Z])/g, ' $1')\r\n                  .replace(/^./, str => str.toUpperCase()),\r\n                value\r\n              )\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 추천 사항 표시 */}\r\n        <div className={styles.recommendationsSection}>\r\n          <h4>추천 사항</h4>\r\n          {renderRecommendations(recommendations)}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 오류 분석 결과 렌더링\r\n   */\r\n  const renderErrorPredictionResults = () => {\r\n    const result = getResultForModel(LearningModelType.ERROR_PREDICTION);\r\n\r\n    if (!result) {\r\n      return (\r\n        <div className={styles.noResults}>\r\n          <p>오류 분석 결과가 없습니다.</p>\r\n          <button\r\n            onClick={() => runLearning([LearningModelType.ERROR_PREDICTION])}\r\n            disabled={isLoading}\r\n            className={styles.learningButton}\r\n          >\r\n            오류 패턴 학습하기\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const { insights, recommendations, metrics } = result;\r\n\r\n    return (\r\n      <div className={styles.resultSection}>\r\n        <h3>오류 패턴 분석 결과</h3>\r\n\r\n        {/* 인사이트 표시 */}\r\n        <div className={styles.insightsSection}>\r\n          <h4>주요 인사이트</h4>\r\n\r\n          {insights.map((insight, index) => {\r\n            if (insight.type === 'topErrors' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>가장 빈번한 오류 유형</h5>\r\n                  <ul className={styles.errorsList}>\r\n                    {insight.data.map((error: any, i: number) => (\r\n                      <li key={i} className={styles.errorItem}>\r\n                        <span className={styles.errorType}>{error.type}</span>\r\n                        <span className={styles.errorCount}>{error.count}회</span>\r\n                        <div className={styles.errorBar} style={{ width: `${Math.min(100, error.count * 5)}%` }} />\r\n\r\n                        {error.examples && error.examples.length > 0 && (\r\n                          <div className={styles.errorExample}>\r\n                            <span className={styles.errorExampleLabel}>예시:</span>\r\n                            <span className={styles.errorExampleContent}>\r\n                              {error.examples[0].message}\r\n                            </span>\r\n                          </div>\r\n                        )}\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            if (insight.type === 'errorPeakHours' && insight.data.length > 0) {\r\n              return (\r\n                <div key={index} className={styles.insightItem}>\r\n                  <h5>오류 발생 빈도 높은 시간대</h5>\r\n                  <div className={styles.errorHoursChart}>\r\n                    {insight.data.map((hour: HourData, i: number) => (\r\n                      <div key={i} className={styles.errorHourBar}\r\n                        style={{\r\n                          height: `${Math.max(20, (hour.count / 5) * 100)}px`,\r\n                          backgroundColor: i === 0 ? '#e03131' : '#f08c00'\r\n                        }}\r\n                      >\r\n                        <span className={styles.errorHourLabel}>{hour.hour}시</span>\r\n                        <span className={styles.errorHourValue}>{hour.count}회</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            return null;\r\n          })}\r\n        </div>\r\n\r\n        {/* 메트릭 표시 */}\r\n        <div className={styles.metricsSection}>\r\n          <h4>오류 통계</h4>\r\n          <div className={styles.metricsGrid}>\r\n            {Object.entries(metrics).map(([key, value]) =>\r\n              renderMetricItem(\r\n                key\r\n                  .replace(/([A-Z])/g, ' $1')\r\n                  .replace(/^./, str => str.toUpperCase()),\r\n                value\r\n              )\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 추천 사항 표시 */}\r\n        <div className={styles.recommendationsSection}>\r\n          <h4>추천 사항</h4>\r\n          {renderRecommendations(recommendations)}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 종합 분석 결과 렌더링\r\n   */\r\n  const renderOverallInsights = () => {\r\n    if (combinedRecommendations.length === 0) {\r\n      return (\r\n        <div className={styles.noResults}>\r\n          <p>종합 분석 결과가 없습니다. 먼저 다양한 유형의 학습을 실행하세요.</p>\r\n          <button\r\n            onClick={() => runLearning()}\r\n            disabled={isLoading}\r\n            className={styles.learningButton}\r\n          >\r\n            전체 학습 실행하기\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className={styles.resultSection}>\r\n        <h3>종합 분석 결과</h3>\r\n\r\n        <div className={styles.overallSummary}>\r\n          <div className={styles.summaryStats}>\r\n            <div className={styles.summaryStat}>\r\n              <span className={styles.summaryStatLabel}>분석된 모델</span>\r\n              <span className={styles.summaryStatValue}>{results.length}</span>\r\n            </div>\r\n            <div className={styles.summaryStat}>\r\n              <span className={styles.summaryStatLabel}>총 추천사항</span>\r\n              <span className={styles.summaryStatValue}>{combinedRecommendations.length}</span>\r\n            </div>\r\n            <div className={styles.summaryStat}>\r\n              <span className={styles.summaryStatLabel}>마지막 분석</span>\r\n              <span className={styles.summaryStatValue}>\r\n                {lastAnalysisTime\r\n                  ? new Date(lastAnalysisTime).toLocaleString()\r\n                  : '없음'}\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={styles.recommendationsSection}>\r\n            <h4>통합 추천 사항</h4>\r\n            {renderRecommendations(combinedRecommendations)}\r\n          </div>\r\n\r\n          <div className={styles.actionButtons}>\r\n            <button\r\n              onClick={() => runLearning()}\r\n              disabled={isLoading}\r\n              className={styles.learningButton}\r\n            >\r\n              {isLoading ? '학습 중...' : '학습 다시 실행하기'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // 선택한 탭에 따라 결과 렌더링\r\n  const renderSelectedTabContent = () => {\r\n    switch (selectedTab) {\r\n      case LearningModelType.MEMORY_OPTIMIZATION:\r\n        return renderMemoryOptimizationResults();\r\n      case LearningModelType.USER_BEHAVIOR:\r\n        return renderUserBehaviorResults();\r\n      case LearningModelType.ERROR_PREDICTION:\r\n        return renderErrorPredictionResults();\r\n      case LearningModelType.PERFORMANCE_OPTIMIZATION:\r\n        return renderOverallInsights();\r\n      default:\r\n        return <div>유효하지 않은 탭입니다.</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`${styles.logAnalysisPanel} ${className}`}>\r\n      <div className={styles.header}>\r\n        <h2>로그 분석 대시보드</h2>\r\n        {lastAnalysisTime && (\r\n          <p className={styles.lastAnalysisTime}>\r\n            마지막 분석: {new Date(lastAnalysisTime).toLocaleString()}\r\n          </p>\r\n        )}\r\n      </div>\r\n\r\n      {/* 학습 컨트롤 버튼 */}\r\n      <div className={styles.controls}>\r\n        <button\r\n          onClick={() => runLearning()}\r\n          disabled={isLoading}\r\n          className={styles.mainButton}\r\n        >\r\n          {isLoading ? '학습 중...' : '모든 데이터 학습하기'}\r\n        </button>\r\n      </div>\r\n\r\n      {/* 에러 메시지 */}\r\n      {error && (\r\n        <div className={styles.errorMessage}>\r\n          <p>오류 발생: {error}</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* 학습 중 로딩 표시 */}\r\n      {isLoading && (\r\n        <div className={styles.loadingIndicator}>\r\n          <div className={styles.spinner}></div>\r\n          <p>로그 데이터 학습 중...</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* 탭 네비게이션 */}\r\n      <div className={styles.tabNavigation}>\r\n        <button\r\n          className={`${styles.tabButton} ${selectedTab === LearningModelType.MEMORY_OPTIMIZATION ? styles.activeTab : ''}`}\r\n          onClick={() => setSelectedTab(LearningModelType.MEMORY_OPTIMIZATION)}\r\n        >\r\n          메모리 최적화\r\n        </button>\r\n        <button\r\n          className={`${styles.tabButton} ${selectedTab === LearningModelType.USER_BEHAVIOR ? styles.activeTab : ''}`}\r\n          onClick={() => setSelectedTab(LearningModelType.USER_BEHAVIOR)}\r\n        >\r\n          사용자 행동\r\n        </button>\r\n        <button\r\n          className={`${styles.tabButton} ${selectedTab === LearningModelType.ERROR_PREDICTION ? styles.activeTab : ''}`}\r\n          onClick={() => setSelectedTab(LearningModelType.ERROR_PREDICTION)}\r\n        >\r\n          오류 예측\r\n        </button>\r\n        <button\r\n          className={`${styles.tabButton} ${selectedTab === LearningModelType.PERFORMANCE_OPTIMIZATION ? styles.activeTab : ''}`}\r\n          onClick={() => setSelectedTab(LearningModelType.PERFORMANCE_OPTIMIZATION)}\r\n        >\r\n          종합 분석\r\n        </button>\r\n      </div>\r\n\r\n      {/* 선택한 탭 내용 렌더링 */}\r\n      <div className={styles.tabContent}>\r\n        {renderSelectedTabContent()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\MainLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\MemoryMonitor.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchMemoryInfo'. Either include it or remove the dependency array.","line":235,"column":6,"nodeType":"ArrayExpression","endLine":235,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [fetchMemoryInfo, pollInterval]","fix":{"range":[6043,6057],"text":"[fetchMemoryInfo, pollInterval]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { \r\n  Chart as ChartJS, \r\n  CategoryScale, \r\n  LinearScale, \r\n  PointElement, \r\n  LineElement, \r\n  Title, \r\n  Tooltip, \r\n  Legend, \r\n  ChartOptions \r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { getMemoryInfo } from '../utils/memory/memory-info';\r\nimport { requestGC } from '../utils/memory/gc-utils';\r\nimport styles from './MemoryMonitor.module.css';\r\n\r\n// 차트 등록\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\n// 메모리 타임스탬프 형식화\r\nconst formatTime = (timestamp: number) => {\r\n  const date = new Date(timestamp);\r\n  return `${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}`;\r\n};\r\n\r\n// 차트 옵션\r\nconst chartOptions: ChartOptions<'line'> = {\r\n  responsive: true,\r\n  maintainAspectRatio: false,\r\n  animation: {\r\n    duration: 500\r\n  },\r\n  scales: {\r\n    y: {\r\n      beginAtZero: true,\r\n      title: {\r\n        display: true,\r\n        text: 'Memory (MB)'\r\n      }\r\n    },\r\n    x: {\r\n      title: {\r\n        display: true,\r\n        text: 'Time'\r\n      }\r\n    }\r\n  },\r\n  plugins: {\r\n    legend: {\r\n      position: 'top',\r\n    },\r\n    tooltip: {\r\n      callbacks: {\r\n        label: (context) => {\r\n          const label = context.dataset.label || '';\r\n          const value = context.parsed.y || 0;\r\n          return `${label}: ${value.toFixed(2)} MB`;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\ninterface MemoryMonitorProps {\r\n  pollInterval?: number; // 데이터 수집 간격 (ms)\r\n  historyLength?: number; // 기록할 데이터 포인트 수\r\n  showControls?: boolean; // GC 버튼 등 컨트롤 표시 여부\r\n  height?: number; // 차트 높이\r\n  detailed?: boolean; // 상세 정보 표시 여부\r\n  darkMode?: boolean; // 다크 모드 여부\r\n}\r\n\r\n/**\r\n * 메모리 모니터링 컴포넌트\r\n * \r\n * 실시간으로 메모리 사용량을 그래프로 표시하고 메모리 관리 기능을 제공합니다.\r\n */\r\nexport default function MemoryMonitor({\r\n  pollInterval = 5000,\r\n  historyLength = 20,\r\n  showControls = true,\r\n  height = 300,\r\n  detailed = true,\r\n  darkMode = false\r\n}: MemoryMonitorProps) {\r\n  // 메모리 데이터 상태\r\n  const [memoryData, setMemoryData] = useState<{\r\n    labels: string[];\r\n    used: number[];\r\n    total: number[];\r\n    percent: number[];\r\n    rss?: number[];\r\n  }>({\r\n    labels: [],\r\n    used: [],\r\n    total: [],\r\n    percent: [],\r\n    rss: []\r\n  });\r\n  \r\n  // 현재 메모리 상태\r\n  const [currentMemory, setCurrentMemory] = useState<{\r\n    heapUsed: number;\r\n    heapTotal: number;\r\n    percentUsed: number;\r\n    rss?: number;\r\n    timestamp: number;\r\n  } | null>(null);\r\n  \r\n  // 갱신 중 상태\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n  \r\n  // GC 실행 중 상태\r\n  const [isPerformingGC, setIsPerformingGC] = useState(false);\r\n  \r\n  // 메모리 상태 (안전, 주의, 위험)\r\n  const [memoryStatus, setMemoryStatus] = useState<'safe' | 'warning' | 'danger'>('safe');\r\n  \r\n  // 애니메이션을 위한 타이머 ID\r\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\r\n  \r\n  // 메모리 상태 평가 함수\r\n  const evaluateMemoryStatus = (percentUsed: number) => {\r\n    if (percentUsed > 85) return 'danger';\r\n    if (percentUsed > 70) return 'warning';\r\n    return 'safe';\r\n  };\r\n  \r\n  // 메모리 정보 가져오기\r\n  const fetchMemoryInfo = async () => {\r\n    try {\r\n      setIsRefreshing(true);\r\n      \r\n      const memoryInfo = await getMemoryInfo();\r\n      \r\n      if (memoryInfo) {\r\n        const timestamp = memoryInfo.timestamp || Date.now();\r\n        const formattedTime = formatTime(timestamp);\r\n        \r\n        // 메모리 상태 업데이트\r\n        setCurrentMemory({\r\n          heapUsed: memoryInfo.heap_used_mb || memoryInfo.heapUsedMB || 0,\r\n          heapTotal: (memoryInfo.heap_total || 0) / (1024 * 1024),\r\n          percentUsed: memoryInfo.percent_used || memoryInfo.percentUsed || 0,\r\n          rss: memoryInfo.rss_mb || memoryInfo.rssMB,\r\n          timestamp\r\n        });\r\n        \r\n        // 메모리 상태 평가\r\n        setMemoryStatus(evaluateMemoryStatus(\r\n          memoryInfo.percent_used || memoryInfo.percentUsed || 0\r\n        ));\r\n        \r\n        // 차트 데이터 업데이트\r\n        setMemoryData(prev => {\r\n          // 새 데이터 포인트 추가\r\n          const newLabels = [...prev.labels, formattedTime];\r\n          const newUsed = [...prev.used, memoryInfo.heap_used_mb || memoryInfo.heapUsedMB || 0];\r\n          const newTotal = [...prev.total, (memoryInfo.heap_total || 0) / (1024 * 1024)];\r\n          const newPercent = [...prev.percent, memoryInfo.percent_used || memoryInfo.percentUsed || 0];\r\n          const newRSS = [...(prev.rss || []), memoryInfo.rss_mb || memoryInfo.rssMB || 0];\r\n          \r\n          // 데이터 개수 제한\r\n          if (newLabels.length > historyLength) {\r\n            newLabels.shift();\r\n            newUsed.shift();\r\n            newTotal.shift();\r\n            newPercent.shift();\r\n            if (newRSS.length > historyLength) newRSS.shift();\r\n          }\r\n          \r\n          return {\r\n            labels: newLabels,\r\n            used: newUsed,\r\n            total: newTotal,\r\n            percent: newPercent,\r\n            rss: newRSS\r\n          };\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('메모리 정보 가져오기 오류:', error);\r\n    } finally {\r\n      setIsRefreshing(false);\r\n    }\r\n  };\r\n  \r\n  // 가비지 컬렉션 요청\r\n  const handleGarbageCollection = async () => {\r\n    try {\r\n      setIsPerformingGC(true);\r\n      const result = await requestGC();\r\n      \r\n      if (result && result.success) {\r\n        const freedMB = result.freedMB || 0;\r\n        console.log(`가비지 컬렉션 완료: ${freedMB.toFixed(2)}MB 해제됨`);\r\n      }\r\n      \r\n      // GC 후 메모리 정보 갱신\r\n      await fetchMemoryInfo();\r\n    } catch (error) {\r\n      console.error('가비지 컬렉션 오류:', error);\r\n    } finally {\r\n      setIsPerformingGC(false);\r\n    }\r\n  };\r\n  \r\n  // 초기화 및 주기적 갱신\r\n  useEffect(() => {\r\n    // 초기 데이터 로드\r\n    fetchMemoryInfo();\r\n    \r\n    // 주기적 갱신 설정\r\n    timerRef.current = setInterval(() => {\r\n      fetchMemoryInfo();\r\n    }, pollInterval);\r\n    \r\n    // 정리 함수\r\n    return () => {\r\n      if (timerRef.current) {\r\n        clearInterval(timerRef.current);\r\n      }\r\n    };\r\n  }, [pollInterval]);\r\n  // 차트 데이터\r\n  const chartData = {\r\n    labels: memoryData.labels,\r\n    datasets: [\r\n      {\r\n        label: 'Heap Used (MB)',\r\n        data: memoryData.used,\r\n        borderColor: 'rgb(75, 192, 192)',\r\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n        tension: 0.4\r\n      },\r\n      ...(detailed ? [{\r\n        label: 'RSS (MB)',\r\n        data: memoryData.rss,\r\n        borderColor: 'rgb(153, 102, 255)',\r\n        backgroundColor: 'rgba(153, 102, 255, 0.2)',\r\n        tension: 0.4\r\n      }] : [])\r\n    ]\r\n  };\r\n  \r\n  return (\r\n    <div className={`${styles.container} ${darkMode ? styles.darkMode : ''}`}>\r\n      <h3 className={styles.title}>메모리 모니터링</h3>\r\n      \r\n      {/* 현재 메모리 상태 */}\r\n      <div className={`${styles.statsContainer} ${styles[memoryStatus]}`}>\r\n        {currentMemory ? (\r\n          <>\r\n            <div className={styles.stat}>\r\n              <span className={styles.statLabel}>사용됨:</span>\r\n              <span className={styles.statValue}>{currentMemory.heapUsed.toFixed(2)} MB</span>\r\n            </div>\r\n            {detailed && (\r\n              <div className={styles.stat}>\r\n                <span className={styles.statLabel}>전체:</span>\r\n                <span className={styles.statValue}>{currentMemory.heapTotal.toFixed(2)} MB</span>\r\n              </div>\r\n            )}\r\n            <div className={styles.stat}>\r\n              <span className={styles.statLabel}>사용률:</span>\r\n              <span className={styles.statValue}>{currentMemory.percentUsed.toFixed(1)}%</span>\r\n            </div>\r\n            {detailed && currentMemory.rss && (\r\n              <div className={styles.stat}>\r\n                <span className={styles.statLabel}>RSS:</span>\r\n                <span className={styles.statValue}>{currentMemory.rss.toFixed(2)} MB</span>\r\n              </div>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <div className={styles.loading}>데이터 로드 중...</div>\r\n        )}\r\n      </div>\r\n      \r\n      {/* 메모리 사용량 차트 */}\r\n      <div className={styles.chartContainer} style={{ height: `${height}px` }}>\r\n        <Line data={chartData} options={chartOptions} />\r\n      </div>\r\n      \r\n      {/* 컨트롤 버튼 */}\r\n      {showControls && (\r\n        <div className={styles.controls}>\r\n          <button \r\n            className={styles.refreshButton} \r\n            onClick={fetchMemoryInfo}\r\n            disabled={isRefreshing}\r\n          >\r\n            {isRefreshing ? '갱신 중...' : '수동 갱신'}\r\n          </button>\r\n          \r\n          <button \r\n            className={styles.gcButton} \r\n            onClick={handleGarbageCollection}\r\n            disabled={isPerformingGC}\r\n          >\r\n            {isPerformingGC ? 'GC 실행 중...' : '가비지 컬렉션 실행'}\r\n          </button>\r\n        </div>\r\n      )}\r\n      \r\n      {/* 메모리 상태 표시 */}\r\n      <div className={`${styles.statusIndicator} ${styles[memoryStatus]}`}>\r\n        <div className={styles.statusLabel}>\r\n          {memoryStatus === 'safe' && '정상'}\r\n          {memoryStatus === 'warning' && '주의'}\r\n          {memoryStatus === 'danger' && '위험'}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\MemorySettingsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\MemoryUsageMonitor.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchMemoryInfo'. Either include it or remove the dependency array.","line":72,"column":6,"nodeType":"ArrayExpression","endLine":72,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchMemoryInfo]","fix":{"range":[1979,1981],"text":"[fetchMemoryInfo]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\MiniView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useCallback' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useCallback, useEffect } from 'react';\r\nimport styles from './MiniView.module.css';\r\n\r\n// 미니뷰 통계 인터페이스 추가\r\ninterface MiniViewStats {\r\n  keyCount: number;\r\n  typingTime: number;\r\n  windowTitle?: string;\r\n  browserName?: string;\r\n  totalChars?: number;\r\n  totalWords?: number;\r\n  accuracy?: number;\r\n  isTracking?: boolean;\r\n}\r\n\r\nexport default function MiniView() {\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [stats, setStats] = useState<MiniViewStats>({\r\n    keyCount: 0,\r\n    typingTime: 0,\r\n    windowTitle: '',\r\n    browserName: '',\r\n    totalChars: 0,\r\n    totalWords: 0,\r\n    accuracy: 100,\r\n    isTracking: false\r\n  });\r\n\r\n  // 초기화 시 webkitUserSelect를 none으로 설정\r\n  useEffect(() => {\r\n    document.documentElement.style.webkitUserSelect = 'none';\r\n    document.documentElement.style.userSelect = 'none';\r\n    \r\n    // 전자 API를 사용하여 통계 업데이트 수신\r\n    let unsubscribe: (() => void) | null = null;\r\n    \r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      unsubscribe = window.electronAPI.onMiniViewStatsUpdate((data: MiniViewStats) => {\r\n        setStats(data);\r\n      });\r\n    }\r\n    \r\n    return () => {\r\n      document.documentElement.style.webkitUserSelect = '';\r\n      document.documentElement.style.userSelect = '';\r\n      \r\n      if (unsubscribe) {\r\n        unsubscribe();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // 드래그만 가능하게, onClick 제거\r\n  // Collapsed state: Show only the app icon\r\n  if (!isExpanded) {\r\n    return (\r\n      <div\r\n        className={styles.miniViewCollapsed}\r\n        aria-label=\"타이핑 통계 드래그\"\r\n        style={{\r\n          WebkitAppRegion: 'drag',\r\n          cursor: 'move',\r\n          border: 'none',\r\n          outline: 'none',\r\n          boxShadow: 'none'\r\n        }}\r\n      >\r\n        <img\r\n          src=\"/app-icon.svg\"\r\n          alt=\"앱 아이콘\"\r\n          className={styles.appIcon}\r\n          style={{ \r\n            pointerEvents: 'none',\r\n            WebkitAppRegion: 'drag',\r\n            border: 'none',\r\n            outline: 'none'\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Expanded state: Show the full mini-view with statistics\r\n  return (\r\n    <div className={styles.miniView}>\r\n      <div className={styles.appIconWrapper}>\r\n        <img\r\n          src=\"/app-icon.svg\"\r\n          alt=\"앱 아이콘\"\r\n          className={styles.appIcon}\r\n          onClick={() => setIsExpanded(false)}\r\n        />\r\n      </div>\r\n      <div className={styles.content}>\r\n        <div className={styles.statsContainer}>\r\n          <div className={styles.statItem}>\r\n            <span className={styles.statLabel}>타자 수</span>\r\n            <span className={styles.statValue}>{stats.keyCount.toLocaleString()}</span>\r\n          </div>\r\n          <div className={styles.statItem}>\r\n            <span className={styles.statLabel}>타이핑 시간</span>\r\n            <span className={styles.statValue}>{stats.typingTime}초</span>\r\n          </div>\r\n          <div className={styles.statItem}>\r\n            <span className={styles.statLabel}>평균 속도</span>\r\n            <span className={styles.statValue}>\r\n              {stats.typingTime > 0 ? Math.round((stats.keyCount / stats.typingTime) * 60) : 0} 타/분\r\n            </span>\r\n          </div>\r\n          {stats.accuracy && (\r\n            <div className={styles.statItem}>\r\n              <span className={styles.statLabel}>정확도</span>\r\n              <span className={styles.statValue}>{stats.accuracy}%</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {stats.windowTitle && (\r\n          <div className={styles.currentWindow}>\r\n            {stats.windowTitle}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\MiniViewIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\ModuleDebugPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\NativeModuleStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\NativeModuleTest.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":59,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport styles from './NativeModuleTest.module.css';\r\n\r\n// 모듈 정보 인터페이스\r\ninterface ModuleInfo {\r\n  isLoaded: boolean;\r\n  isFallback: boolean;\r\n  availableFunctions: string[];\r\n  version: string;\r\n  timestamp: number;\r\n}\r\n\r\n// 메모리 정보 인터페이스\r\ninterface MemoryInfo {\r\n  heap_used?: number;\r\n  heap_total?: number;\r\n  heap_used_mb?: number;\r\n  percent_used?: number;\r\n  error?: string;\r\n}\r\n\r\n// API 응답 인터페이스\r\ninterface TestResponse {\r\n  success: boolean;\r\n  moduleInfo?: ModuleInfo;\r\n  memoryInfo?: MemoryInfo;\r\n  message?: string;\r\n  error?: string;\r\n}\r\n\r\nexport default function NativeModuleTest() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [result, setResult] = useState<TestResponse | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // 네이티브 모듈 테스트\r\n  const testNativeModule = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch('/api/native/test');\r\n      const data: TestResponse = await response.json();\r\n      setResult(data);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : '알 수 없는 오류');\r\n      setResult(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // 메모리 최적화 테스트\r\n  const testMemoryOptimization = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch('/api/native/memory/optimize');\r\n      const data = await response.json();\r\n      \r\n      // 메모리 최적화 후 모듈 상태 다시 테스트\r\n      await testNativeModule();\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : '알 수 없는 오류');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // 페이지 로딩 시 테스트 실행\r\n  useEffect(() => {\r\n    testNativeModule();\r\n  }, []);\r\n\r\n  // 연결 상태에 따른 클래스 이름 계산\r\n  const getStatusClassName = () => {\r\n    if (!result) return styles.unknown;\r\n    if (!result.success) return styles.error;\r\n    if (result.moduleInfo?.isLoaded && !result.moduleInfo?.isFallback) return styles.success;\r\n    if (result.moduleInfo?.isLoaded && result.moduleInfo?.isFallback) return styles.warning;\r\n    return styles.error;\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <h2 className={styles.title}>Rust 네이티브 모듈 연결 테스트</h2>\r\n      \r\n      <div className={`${styles.statusCard} ${getStatusClassName()}`}>\r\n        <div className={styles.statusHeader}>\r\n          <h3 className={styles.statusTitle}>연결 상태</h3>\r\n          <div className={styles.statusBadge}>\r\n            {loading ? '테스트 중...' : \r\n              result?.success \r\n                ? (result.moduleInfo?.isFallback ? 'Fallback 모드' : '연결됨') \r\n                : '연결 실패'}\r\n          </div>\r\n        </div>\r\n        \r\n        {error && (\r\n          <div className={styles.errorMessage}>\r\n            <p>오류: {error}</p>\r\n          </div>\r\n        )}\r\n        \r\n        {result?.success && (\r\n          <div className={styles.resultContent}>\r\n            <div className={styles.resultItem}>\r\n              <span className={styles.label}>모듈 로드됨:</span>\r\n              <span className={styles.value}>{result.moduleInfo?.isLoaded ? '예' : '아니오'}</span>\r\n            </div>\r\n            \r\n            <div className={styles.resultItem}>\r\n              <span className={styles.label}>Fallback 모드:</span>\r\n              <span className={styles.value}>{result.moduleInfo?.isFallback ? '예' : '아니오'}</span>\r\n            </div>\r\n            \r\n            <div className={styles.resultItem}>\r\n              <span className={styles.label}>버전:</span>\r\n              <span className={styles.value}>{result.moduleInfo?.version || 'N/A'}</span>\r\n            </div>\r\n            \r\n            {result.memoryInfo && !result.memoryInfo.error && (\r\n              <>\r\n                <div className={styles.divider}></div>\r\n                <h4 className={styles.sectionTitle}>메모리 정보</h4>\r\n                \r\n                <div className={styles.resultItem}>\r\n                  <span className={styles.label}>사용된 힙:</span>\r\n                  <span className={styles.value}>\r\n                    {result.memoryInfo.heap_used_mb ? `${result.memoryInfo.heap_used_mb.toFixed(2)}MB` : 'N/A'}\r\n                  </span>\r\n                </div>\r\n                \r\n                <div className={styles.resultItem}>\r\n                  <span className={styles.label}>사용률:</span>\r\n                  <span className={styles.value}>\r\n                    {result.memoryInfo.percent_used ? `${result.memoryInfo.percent_used.toFixed(1)}%` : 'N/A'}\r\n                  </span>\r\n                </div>\r\n              </>\r\n            )}\r\n            \r\n            {result.moduleInfo?.availableFunctions && (\r\n              <>\r\n                <div className={styles.divider}></div>\r\n                <h4 className={styles.sectionTitle}>사용 가능한 함수</h4>\r\n                <div className={styles.functionList}>\r\n                  {result.moduleInfo.availableFunctions.length > 0 ? (\r\n                    result.moduleInfo.availableFunctions.map(func => (\r\n                      <div key={func} className={styles.functionItem}>{func}</div>\r\n                    ))\r\n                  ) : (\r\n                    <div className={styles.emptyMessage}>사용 가능한 함수 없음</div>\r\n                  )}\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n        )}\r\n        \r\n        <div className={styles.actions}>\r\n          <button \r\n            className={styles.testButton} \r\n            onClick={testNativeModule} \r\n            disabled={loading}\r\n          >\r\n            {loading ? '테스트 중...' : '다시 테스트'}\r\n          </button>\r\n          \r\n          <button \r\n            className={styles.optimizeButton} \r\n            onClick={testMemoryOptimization} \r\n            disabled={loading}\r\n          >\r\n            메모리 최적화 테스트\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className={styles.note}>\r\n        <p>\r\n          <strong>참고:</strong> Rust 네이티브 모듈을 사용할 수 없는 경우 JS로 구현된 폴백 모듈이 사용됩니다.\r\n          폴백 모듈은 모든 기능을 지원하지 않을 수 있습니다.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\NativeModuleTestPanel.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchGpuInfo' and 'fetchMemoryInfo'. Either include them or remove the dependency array.","line":94,"column":6,"nodeType":"ArrayExpression","endLine":94,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchGpuInfo, fetchMemoryInfo]","fix":{"range":[2836,2838],"text":"[fetchGpuInfo, fetchMemoryInfo]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { \r\n  getMemoryInfo, \r\n  optimizeMemory, \r\n  forceGarbageCollection, \r\n  getGpuInfo \r\n} from '../utils/nativeModuleClient';\r\nimport styles from './NativeModuleTestPanel.module.css';\r\nimport NativeModuleStatus from './NativeModuleStatus';\r\n\r\nexport default function NativeModuleTestPanel() {\r\n  const [memoryInfo, setMemoryInfo] = useState<any>(null);\r\n  const [gpuInfo, setGpuInfo] = useState<any>(null);\r\n  const [optimizationResult, setOptimizationResult] = useState<any>(null);\r\n  const [gcResult, setGcResult] = useState<any>(null);\r\n  const [loading, setLoading] = useState<{ [key: string]: boolean }>({});\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // 로딩 상태 설정 헬퍼 함수\r\n  const setLoadingState = (key: string, isLoading: boolean) => {\r\n    setLoading(prev => ({ ...prev, [key]: isLoading }));\r\n  };\r\n  \r\n  // 메모리 정보 가져오기\r\n  const fetchMemoryInfo = async () => {\r\n    try {\r\n      setLoadingState('memory', true);\r\n      setError(null);\r\n      \r\n      const response = await getMemoryInfo();\r\n      setMemoryInfo(response.memoryInfo);\r\n    } catch (err) {\r\n      console.error('메모리 정보 가져오기 오류:', err);\r\n      setError(err instanceof Error ? err.message : '메모리 정보를 가져오는 중 오류가 발생했습니다');\r\n    } finally {\r\n      setLoadingState('memory', false);\r\n    }\r\n  };\r\n  \r\n  // GPU 정보 가져오기\r\n  const fetchGpuInfo = async () => {\r\n    try {\r\n      setLoadingState('gpu', true);\r\n      setError(null);\r\n      \r\n      const response = await getGpuInfo();\r\n      setGpuInfo(response);\r\n    } catch (err) {\r\n      console.error('GPU 정보 가져오기 오류:', err);\r\n      setError(err instanceof Error ? err.message : 'GPU 정보를 가져오는 중 오류가 발생했습니다');\r\n    } finally {\r\n      setLoadingState('gpu', false);\r\n    }\r\n  };\r\n  \r\n  // 메모리 최적화 수행\r\n  const performMemoryOptimization = async (level: number = 2) => {\r\n    try {\r\n      setLoadingState('optimize', true);\r\n      setError(null);\r\n      \r\n      const response = await optimizeMemory(level, level === 4);\r\n      setOptimizationResult(response.result);\r\n    } catch (err) {\r\n      console.error('메모리 최적화 오류:', err);\r\n      setError(err instanceof Error ? err.message : '메모리 최적화 중 오류가 발생했습니다');\r\n    } finally {\r\n      setLoadingState('optimize', false);\r\n    }\r\n  };\r\n  \r\n  // 가비지 컬렉션 수행\r\n  const performGarbageCollection = async () => {\r\n    try {\r\n      setLoadingState('gc', true);\r\n      setError(null);\r\n      \r\n      const response = await forceGarbageCollection();\r\n      setGcResult(response.result);\r\n    } catch (err) {\r\n      console.error('가비지 컬렉션 오류:', err);\r\n      setError(err instanceof Error ? err.message : '가비지 컬렉션 중 오류가 발생했습니다');\r\n    } finally {\r\n      setLoadingState('gc', false);\r\n    }\r\n  };\r\n  \r\n  // 컴포넌트 마운트 시 초기 데이터 로드\r\n  useEffect(() => {\r\n    fetchMemoryInfo();\r\n    fetchGpuInfo();\r\n  }, []);\r\n  \r\n  return (\r\n    <div className={styles.container}>\r\n      <h2 className={styles.title}>네이티브 모듈 테스트 패널</h2>\r\n      \r\n      {/* 네이티브 모듈 상태 */}\r\n      <div className={styles.section}>\r\n        <h3 className={styles.sectionTitle}>네이티브 모듈 상태</h3>\r\n        <NativeModuleStatus />\r\n      </div>\r\n      \r\n      {/* 오류 표시 */}\r\n      {error && (\r\n        <div className={styles.error}>\r\n          <p>오류: {error}</p>\r\n        </div>\r\n      )}\r\n      \r\n      {/* 메모리 정보 */}\r\n      <div className={styles.section}>\r\n        <h3 className={styles.sectionTitle}>메모리 정보</h3>\r\n        <button \r\n          className={styles.button}\r\n          onClick={fetchMemoryInfo}\r\n          disabled={loading.memory}\r\n        >\r\n          {loading.memory ? '로딩 중...' : '메모리 정보 가져오기'}\r\n        </button>\r\n        \r\n        {memoryInfo && (\r\n          <div className={styles.infoContainer}>\r\n            <p>힙 사용량: {Math.round(memoryInfo.heap_used_mb * 10) / 10} MB</p>\r\n            <p>힙 총량: {Math.round((memoryInfo.heap_total / (1024 * 1024)) * 10) / 10} MB</p>\r\n            <p>사용률: {Math.round(memoryInfo.percent_used)}%</p>\r\n            <p>RSS: {Math.round(memoryInfo.rss_mb)} MB</p>\r\n            <p>타임스탬프: {new Date(memoryInfo.timestamp).toLocaleString()}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      {/* 메모리 최적화 */}\r\n      <div className={styles.section}>\r\n        <h3 className={styles.sectionTitle}>메모리 최적화</h3>\r\n        <div className={styles.buttonGroup}>\r\n          <button \r\n            className={`${styles.button} ${styles.levelLow}`}\r\n            onClick={() => performMemoryOptimization(1)}\r\n            disabled={loading.optimize}\r\n          >\r\n            가벼운 최적화\r\n          </button>\r\n          <button \r\n            className={`${styles.button} ${styles.levelMedium}`}\r\n            onClick={() => performMemoryOptimization(2)}\r\n            disabled={loading.optimize}\r\n          >\r\n            중간 최적화\r\n          </button>\r\n          <button \r\n            className={`${styles.button} ${styles.levelHigh}`}\r\n            onClick={() => performMemoryOptimization(3)}\r\n            disabled={loading.optimize}\r\n          >\r\n            높은 최적화\r\n          </button>\r\n          <button \r\n            className={`${styles.button} ${styles.levelCritical}`}\r\n            onClick={() => performMemoryOptimization(4)}\r\n            disabled={loading.optimize}\r\n          >\r\n            긴급 최적화\r\n          </button>\r\n        </div>\r\n        \r\n        {loading.optimize && <p className={styles.loading}>최적화 진행 중...</p>}\r\n        \r\n        {optimizationResult && (\r\n          <div className={styles.infoContainer}>\r\n            <p>최적화 레벨: {optimizationResult.optimization_level}</p>\r\n            <p>해제된 메모리: {optimizationResult.freed_mb} MB</p>\r\n            <p>소요 시간: {optimizationResult.duration} ms</p>\r\n            <p>성공 여부: {optimizationResult.success ? '성공' : '실패'}</p>\r\n            {optimizationResult.error && <p>오류: {optimizationResult.error}</p>}\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      {/* 가비지 컬렉션 */}\r\n      <div className={styles.section}>\r\n        <h3 className={styles.sectionTitle}>가비지 컬렉션</h3>\r\n        <button \r\n          className={styles.button}\r\n          onClick={performGarbageCollection}\r\n          disabled={loading.gc}\r\n        >\r\n          {loading.gc ? 'GC 수행 중...' : '가비지 컬렉션 수행'}\r\n        </button>\r\n        \r\n        {gcResult && (\r\n          <div className={styles.infoContainer}>\r\n            <p>해제된 메모리: {gcResult.freed_mb} MB</p>\r\n            <p>소요 시간: {gcResult.duration} ms</p>\r\n            <p>성공 여부: {gcResult.success ? '성공' : '실패'}</p>\r\n            {gcResult.error && <p>오류: {gcResult.error}</p>}\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      {/* GPU 정보 */}\r\n      <div className={styles.section}>\r\n        <h3 className={styles.sectionTitle}>GPU 정보</h3>\r\n        <button \r\n          className={styles.button}\r\n          onClick={fetchGpuInfo}\r\n          disabled={loading.gpu}\r\n        >\r\n          {loading.gpu ? '로딩 중...' : 'GPU 정보 가져오기'}\r\n        </button>\r\n        \r\n        {gpuInfo && (\r\n          <div className={styles.infoContainer}>\r\n            <p>가용성: {gpuInfo.available ? '사용 가능' : '사용 불가'}</p>\r\n            <p>이름: {gpuInfo.gpuInfo?.name || 'N/A'}</p>\r\n            <p>벤더: {gpuInfo.gpuInfo?.vendor || 'N/A'}</p>\r\n            <p>드라이버: {gpuInfo.gpuInfo?.driver_info || 'N/A'}</p>\r\n            <p>디바이스 타입: {gpuInfo.gpuInfo?.device_type || 'N/A'}</p>\r\n            <p>백엔드: {gpuInfo.gpuInfo?.backend || 'N/A'}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\RestartLoading.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onClose' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport styles from './RestartLoading.module.css';\r\n\r\ninterface RestartLoadingProps {\r\n  message?: string;\r\n  isVisible: boolean;\r\n  onClose?: () => void;\r\n}\r\n\r\nexport default function RestartLoading({ \r\n  message = '앱을 재시작하는 중입니다...',\r\n  isVisible,\r\n  onClose\r\n}: RestartLoadingProps) {\r\n  const [dots, setDots] = useState('');\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  // 로딩 애니메이션 효과\r\n  useEffect(() => {\r\n    if (!isVisible) return;\r\n    \r\n    // 진행 점 애니메이션\r\n    const dotsInterval = setInterval(() => {\r\n      setDots(prev => {\r\n        if (prev.length >= 3) return '';\r\n        return prev + '.';\r\n      });\r\n    }, 500);\r\n    \r\n    // 진행 표시줄 애니메이션\r\n    const progressInterval = setInterval(() => {\r\n      setProgress(prev => {\r\n        if (prev >= 100) return 100;\r\n        return prev + 5;\r\n      });\r\n    }, 100);\r\n    \r\n    return () => {\r\n      clearInterval(dotsInterval);\r\n      clearInterval(progressInterval);\r\n    };\r\n  }, [isVisible]);\r\n\r\n  if (!isVisible) return null;\r\n\r\n  return (\r\n    <div className={styles.overlay}>\r\n      <div className={styles.loadingContainer}>\r\n        <div className={styles.spinner}></div>\r\n        <h3 className={styles.title}>{message}{dots}</h3>\r\n        \r\n        <div className={styles.progressContainer}>\r\n          <div \r\n            className={styles.progressBar}\r\n            style={{ width: `${progress}%` }}\r\n          ></div>\r\n        </div>\r\n        \r\n        <p className={styles.note}>앱이 곧 다시 시작됩니다.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\RestartPrompt.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\SelfLearningSystem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LogType' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'runAutoLearning' and 'shouldRunLearning'. Either include them or remove the dependency array.","line":221,"column":6,"nodeType":"ArrayExpression","endLine":221,"endColumn":81,"suggestions":[{"desc":"Update the dependencies array to be: [learningOptions.enableAutoLearning, learningOptions.learningIntervalHours, runAutoLearning, shouldRunLearning]","fix":{"range":[5922,5997],"text":"[learningOptions.enableAutoLearning, learningOptions.learningIntervalHours, runAutoLearning, shouldRunLearning]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { LearningModelType } from '../utils/log-learning';\r\nimport { LogType, saveSystemLog } from '../utils/log-utils';\r\n\r\n/**\r\n * 자동 학습 옵션 인터페이스\r\n */\r\ninterface AutoLearningOptions {\r\n  enableAutoLearning: boolean;          // 자동 학습 활성화 여부\r\n  learningIntervalHours: number;        // 학습 실행 간격 (시간)\r\n  runOnLowActivity: boolean;            // 낮은 활동 시에만 실행 여부\r\n  modelsToLearn: LearningModelType[];   // 학습할 모델 유형\r\n  maxLogAgeDays: number;                // 학습에 사용할 최대 로그 기간 (일)\r\n}\r\n\r\n/**\r\n * 자동 학습 시스템 컴포넌트 Props\r\n */\r\ninterface SelfLearningSystemProps {\r\n  options?: Partial<AutoLearningOptions>;\r\n  onLearningComplete?: (results: any) => void;\r\n  onLearningError?: (error: Error) => void;\r\n}\r\n\r\n/**\r\n * 자동 학습 시스템 컴포넌트\r\n * \r\n * 백그라운드에서 정기적으로 로그 데이터에서 학습을 실행합니다.\r\n */\r\nexport default function SelfLearningSystem({\r\n  options,\r\n  onLearningComplete,\r\n  onLearningError\r\n}: SelfLearningSystemProps) {\r\n  // 마지막 학습 시간을 추적하는 ref (렌더링을 트리거하지 않기 위해 ref 사용)\r\n  const lastLearningRef = useRef<number | null>(null);\r\n  // 학습 실행 중인지 여부\r\n  const [isLearning, setIsLearning] = useState<boolean>(false);\r\n  // 학습 예약 타이머 ID\r\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // 기본 옵션과 사용자 옵션을 병합\r\n  const defaultOptions: AutoLearningOptions = {\r\n    enableAutoLearning: true,\r\n    learningIntervalHours: 24, // 기본 24시간마다\r\n    runOnLowActivity: true,\r\n    modelsToLearn: [\r\n      LearningModelType.MEMORY_OPTIMIZATION,\r\n      LearningModelType.USER_BEHAVIOR,\r\n      LearningModelType.ERROR_PREDICTION\r\n    ],\r\n    maxLogAgeDays: 30\r\n  };\r\n\r\n  const learningOptions: AutoLearningOptions = {\r\n    ...defaultOptions,\r\n    ...(options || {})\r\n  };\r\n\r\n  /**\r\n   * 현재 사용자 활동이 낮은지 확인\r\n   * (예: 야간 시간, 키보드/마우스 활동 없음)\r\n   */\r\n  const isLowActivityPeriod = (): boolean => {\r\n    // 현재 시간을 확인 (로컬 시간)\r\n    const now = new Date();\r\n    const hour = now.getHours();\r\n\r\n    // 밤 10시 ~ 아침 7시 사이면 낮은 활동 시간으로 간주\r\n    if (hour >= 22 || hour <= 7) {\r\n      return true;\r\n    }\r\n\r\n    // 추가 활동 감지 로직은 여기에 구현\r\n    // 예: 마지막 키보드/마우스 활동 시간, CPU 사용량 등\r\n\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * 학습 간격 시간이 지났는지 확인\r\n   */\r\n  const shouldRunLearning = (): boolean => {\r\n    // 자동 학습이 비활성화되어 있으면 실행하지 않음\r\n    if (!learningOptions.enableAutoLearning) {\r\n      return false;\r\n    }\r\n\r\n    const now = Date.now();\r\n\r\n    // 마지막 학습 시간이 없거나 간격 시간이 지났는지 확인\r\n    if (lastLearningRef.current === null) {\r\n      // 로컬 스토리지에서 마지막 학습 시간 불러오기\r\n      const lastLearningTime = localStorage.getItem('lastAutoLearningTime');\r\n\r\n      if (!lastLearningTime) {\r\n        return true; // 마지막 학습 기록이 없으면 실행\r\n      }\r\n\r\n      lastLearningRef.current = Number(lastLearningTime);\r\n    }\r\n\r\n    // 학습 간격 시간을 밀리초로 변환\r\n    const intervalMs = learningOptions.learningIntervalHours * 60 * 60 * 1000;\r\n\r\n    // 마지막 학습 후 간격이 지났는지 확인\r\n    return (now - lastLearningRef.current) >= intervalMs;\r\n  };\r\n\r\n  /**\r\n   * 자동 학습 실행\r\n   */\r\n  const runAutoLearning = async () => {\r\n    // 이미 학습 중이면 중복 실행 방지\r\n    if (isLearning) {\r\n      return;\r\n    }\r\n\r\n    // 낮은 활동 시에만 실행 옵션이 켜져 있고, 현재 활동이 높으면 건너뜀\r\n    if (learningOptions.runOnLowActivity && !isLowActivityPeriod()) {\r\n      console.log('활동이 높은 시간대라 자동 학습을 연기합니다.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsLearning(true);\r\n\r\n      await saveSystemLog('자동 학습 시작', {\r\n        modelsToLearn: learningOptions.modelsToLearn,\r\n        maxLogAgeDays: learningOptions.maxLogAgeDays\r\n      });\r\n\r\n      const startTime = Date.now() - (learningOptions.maxLogAgeDays * 24 * 60 * 60 * 1000);\r\n      const endTime = Date.now();\r\n\r\n      // 학습 API 호출\r\n      const response = await fetch('/api/logs/learn', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          modelTypes: learningOptions.modelsToLearn,\r\n          options: {\r\n            memory: { timeRange: { startTime, endTime } },\r\n            user: { timeRange: { startTime, endTime } },\r\n            error: { timeRange: { startTime, endTime } }\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API 요청 실패: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        // 마지막 학습 시간 업데이트\r\n        lastLearningRef.current = Date.now();\r\n        localStorage.setItem('lastAutoLearningTime', lastLearningRef.current.toString());\r\n\r\n        // 로그 저장\r\n        await saveSystemLog('자동 학습 완료', {\r\n          resultsCount: result.results?.length || 0,\r\n          timestamp: Date.now()\r\n        });\r\n\r\n        // 콜백 호출\r\n        onLearningComplete?.(result);\r\n      } else {\r\n        throw new Error(result.error || '학습 중 오류가 발생했습니다.');\r\n      }\r\n    } catch (error) {\r\n      console.error('자동 학습 중 오류:', error);\r\n\r\n      // 오류 로그 저장\r\n      await saveSystemLog('자동 학습 오류', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        timestamp: Date.now()\r\n      });\r\n\r\n      // 오류 콜백 호출\r\n      onLearningError?.(error instanceof Error ? error : new Error(String(error)));\r\n    } finally {\r\n      setIsLearning(false);\r\n    }\r\n  };\r\n\r\n  // 컴포넌트 마운트 시 자동 학습 체크 및 설정\r\n  useEffect(() => {\r\n    // 정기적으로 학습 체크 및 실행 (10분마다)\r\n    const checkAndRunLearning = async () => {\r\n      if (shouldRunLearning()) {\r\n        console.log('자동 학습 조건 충족, 학습 실행');\r\n        await runAutoLearning();\r\n      }\r\n    };\r\n\r\n    // 컴포넌트 마운트 시 즉시 확인 (하지만 바로 실행은 하지 않음)\r\n    const initialCheck = async () => {\r\n      if (shouldRunLearning() && isLowActivityPeriod()) {\r\n        console.log('초기 조건 확인 - 자동 학습 실행');\r\n        await runAutoLearning();\r\n      }\r\n    };\r\n\r\n    initialCheck();\r\n\r\n    // 10분마다 체크\r\n    timerRef.current = setInterval(checkAndRunLearning, 10 * 60 * 1000);\r\n\r\n    // 컴포넌트 언마운트 시 타이머 정리\r\n    return () => {\r\n      if (timerRef.current) {\r\n        clearInterval(timerRef.current);\r\n      }\r\n    };\r\n  }, [learningOptions.enableAutoLearning, learningOptions.learningIntervalHours]);\r\n\r\n  // 이 컴포넌트는 UI를 렌더링하지 않음\r\n  return null;\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\Settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\StatsChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\TabNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\ThemeProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\ThemeProviderWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\Toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\ToastContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'type' is defined but never used. Allowed unused args must match /^_/u.","line":43,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState } from 'react';\r\nimport { Toast } from './Toast';\r\n\r\ntype ToastType = 'success' | 'error' | 'info' | 'warning'; // warning 타입 추가\r\n\r\ninterface ToastContextType {\r\n  showToast: (message: string, type: ToastType) => void;\r\n}\r\n\r\nconst ToastContext = createContext<ToastContextType | undefined>(undefined);\r\n\r\nexport function ToastProvider({ children }: { children: React.ReactNode }) {\r\n  const [toast, setToast] = useState<{ message: string; type: ToastType } | null>(null);\r\n  \r\n  const showToast = (message: string, type: ToastType) => {\r\n    setToast({ message, type });\r\n    \r\n    // 3초 후 자동으로 토스트 제거\r\n    setTimeout(() => {\r\n      setToast(null);\r\n    }, 3000);\r\n  };\r\n  \r\n  return (\r\n    <ToastContext.Provider value={{ showToast }}>\r\n      {children}\r\n      {toast && (\r\n        <Toast\r\n          message={toast.message}\r\n          type={toast.type}\r\n          onClose={() => setToast(null)}\r\n        />\r\n      )}\r\n    </ToastContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useToast = () => {\r\n  const context = useContext(ToastContext);\r\n  if (context === undefined) {\r\n    // 오류 대신 더미 함수 반환하여 앱이 중단되지 않도록 함\r\n    return {\r\n      showToast: (message: string, type: ToastType) => {\r\n        console.warn('ToastProvider가 설정되지 않았습니다:', message);\r\n      }\r\n    };\r\n  }\r\n  return context;\r\n};","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\TypingAnalyzer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\TypingAnalyzerWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\TypingBox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\TypingChart.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'chartRefs.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'chartRefs.current' to a variable inside the effect, and use that variable in the cleanup function.","line":103,"column":17,"nodeType":"Identifier","endLine":103,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":113,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useEffect, useState, useCallback, useMemo, useRef } from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './TypingChart.module.css';\r\n\r\n// Chart.js 컴포넌트 등록\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\ninterface LogType {\r\n  id: number;\r\n  content: string;\r\n  key_count: number;\r\n  typing_time: number;\r\n  timestamp: string;\r\n  created_at: string;\r\n}\r\n\r\ninterface TypingChartProps {\r\n  logs: LogType[];\r\n}\r\n\r\n// 로그 데이터 필터링 함수 - 컴포넌트 외부로 이동\r\nconst filterLogsForChart = (logs: LogType[]) => {\r\n  // 최근 7일 데이터만 표시 (30일에서 7일로 단축)\r\n  const sevenDaysAgo = new Date();\r\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\r\n  \r\n  return logs\r\n    .filter(log => new Date(log.timestamp) >= sevenDaysAgo)\r\n    .slice(0, 50); // 최대 50개 항목으로 제한 (100개에서 50개로 축소)\r\n};\r\n\r\nexport const TypingChart = React.memo(function TypingChart({ logs }: TypingChartProps) {\r\n  // 다크 모드 상태 추적\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  \r\n  // 차트 인스턴스 참조 저장\r\n  const chartRefs = useRef<any[]>([]);\r\n  \r\n  // 컴포넌트 마운트/언마운트 감지\r\n  const isMountedRef = useRef(true);\r\n  \r\n  // 다크 모드 감지 함수 개선\r\n  useEffect(() => {\r\n    const checkDarkMode = () => {\r\n      const isDark = document.documentElement.classList.contains('dark-mode') || \r\n                    document.body.classList.contains('dark-mode');\r\n      setIsDarkMode(isDark);\r\n    };\r\n    \r\n    // 초기 확인\r\n    checkDarkMode();\r\n    \r\n    // 커스텀 이벤트 리스너 추가\r\n    const handleDarkModeChange = (event: CustomEvent<{darkMode: boolean}>) => {\r\n      setIsDarkMode(event.detail.darkMode);\r\n    };\r\n    \r\n    window.addEventListener('darkmode-changed', handleDarkModeChange as EventListener);\r\n    \r\n    // DOM 변화 관찰\r\n    const observer = new MutationObserver(checkDarkMode);\r\n    observer.observe(document.documentElement, { \r\n      attributes: true, \r\n      attributeFilter: ['class'] \r\n    });\r\n    observer.observe(document.body, { \r\n      attributes: true, \r\n      attributeFilter: ['class'] \r\n    });\r\n    \r\n    // 컴포넌트 마운트 상태 설정\r\n    isMountedRef.current = true;\r\n    \r\n    return () => {\r\n      // 컴포넌트 언마운트 시 모든 리소스 해제\r\n      isMountedRef.current = false;\r\n      observer.disconnect();\r\n      window.removeEventListener('darkmode-changed', handleDarkModeChange as EventListener);\r\n      \r\n      // 차트 인스턴스 정리\r\n      chartRefs.current.forEach(chart => {\r\n        if (chart && chart.destroy) {\r\n          chart.destroy();\r\n        }\r\n      });\r\n      \r\n      // 메모리 정리 요청\r\n      if (window.gc) {\r\n        try {\r\n          window.gc();\r\n        } catch (e) {\r\n          console.log('GC 호출 실패');\r\n        }\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // 필터링된 로그 데이터 메모이제이션 (최소 데이터만 사용)\r\n  const filteredLogs = useMemo(() => {\r\n    try {\r\n      // 데이터 검증 추가\r\n      if (!Array.isArray(logs)) {\r\n        console.warn('유효하지 않은 로그 데이터:', logs);\r\n        return [];\r\n      }\r\n      return filterLogsForChart(logs);\r\n    } catch (error) {\r\n      console.error('로그 필터링 중 오류:', error);\r\n      return [];\r\n    }\r\n  }, [logs]);\r\n\r\n  // 차트 옵션 - 다크 모드에 따라 변경되는 옵션들\r\n  const getChartOptions = useCallback((title: string) => {\r\n    return {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      // 메모리 사용량 감소를 위한 설정 추가\r\n      animation: {\r\n        duration: 0 // 애니메이션 비활성화\r\n      },\r\n      // 데이터 포인트 수 제한\r\n      elements: {\r\n        point: {\r\n          radius: 2, // 더 작은 포인트 크기\r\n          hoverRadius: 4,\r\n        },\r\n        line: {\r\n          tension: 0, // 직선으로 연결 (곡선 없음)\r\n        }\r\n      },\r\n      // 렌더링 성능 개선\r\n      devicePixelRatio: 1,\r\n      plugins: {\r\n        legend: { \r\n          position: 'top' as const,\r\n          labels: {\r\n            color: isDarkMode ? '#E0E0E0' : '#333',\r\n            // 폰트 크기 축소\r\n            font: {\r\n              size: 11,\r\n            }\r\n          }\r\n        },\r\n        title: { \r\n          display: true, \r\n          text: title,\r\n          color: isDarkMode ? '#E0E0E0' : '#333',\r\n          // 수정: 'normal'을 리터럴로 변경\r\n          font: {\r\n            size: 12,\r\n            weight: 'normal' as const, // 타입 문제 해결\r\n          }\r\n        },\r\n        tooltip: {\r\n          enabled: true, // 필요한 경우에만 활성화\r\n          backgroundColor: isDarkMode ? 'rgba(30, 30, 30, 0.8)' : 'rgba(255, 255, 255, 0.8)',\r\n          titleColor: isDarkMode ? '#E0E0E0' : '#333',\r\n          bodyColor: isDarkMode ? '#B0B0B0' : '#666',\r\n          borderColor: isDarkMode ? '#303030' : '#ddd',\r\n          borderWidth: 1,\r\n          // 툴팁 콜백 간소화\r\n          callbacks: {\r\n            label: function(context: any) {\r\n              return context.raw;\r\n            }\r\n          }\r\n        }\r\n      },\r\n      scales: {\r\n        x: {\r\n          ticks: { \r\n            color: isDarkMode ? '#B0B0B0' : '#666',\r\n            // 표시할 틱 수 제한\r\n            maxTicksLimit: 7,\r\n            font: {\r\n              size: 10,\r\n            }\r\n          },\r\n          grid: { \r\n            color: isDarkMode ? 'rgba(60, 60, 60, 0.3)' : 'rgba(0, 0, 0, 0.1)',\r\n            // 그리드 간소화\r\n            display: false\r\n          }\r\n        },\r\n        y: {\r\n          ticks: { \r\n            color: isDarkMode ? '#B0B0B0' : '#666',\r\n            font: {\r\n              size: 10,\r\n            }\r\n          },\r\n          grid: { \r\n            color: isDarkMode ? 'rgba(60, 60, 60, 0.3)' : 'rgba(0, 0, 0, 0.1)',\r\n            // 그리드 선 수 제한\r\n            tickLength: 5\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }, [isDarkMode]);\r\n\r\n  // 날짜별 통계 데이터 가공 - 메모이제이션\r\n  const chartData = useMemo(() => {\r\n    try {\r\n      // 데이터가 없으면 기본값 반환\r\n      if (!Array.isArray(filteredLogs) || filteredLogs.length === 0) {\r\n        return {\r\n          labels: [],\r\n          keyCountData: [],\r\n          timeData: [],\r\n          speedData: [],\r\n          wordData: [],\r\n          charData: []\r\n        };\r\n      }\r\n      \r\n      const dataMap = new Map();\r\n\r\n      // 데이터 검증 추가\r\n      for (let i = 0; i < filteredLogs.length; i++) {\r\n        const log = filteredLogs[i];\r\n        if (!log || typeof log !== 'object') continue;\r\n        \r\n        // timestamp가 없거나 유효하지 않은 경우 건너뛰기\r\n        if (!log.timestamp || !Date.parse(log.timestamp)) continue;\r\n        \r\n        const date = new Date(log.timestamp).toLocaleDateString();\r\n        \r\n        if (!dataMap.has(date)) {\r\n          dataMap.set(date, {\r\n            totalKeyCount: 0,\r\n            totalTime: 0,\r\n            totalChars: 0,\r\n            totalWords: 0,\r\n          });\r\n        }\r\n\r\n        const data = dataMap.get(date);\r\n        data.totalKeyCount += log.key_count || 0;\r\n        data.totalTime += log.typing_time || 0;\r\n        \r\n        // 콘텐츠 길이 기반 계산 (간소화)\r\n        const contentLength = log.content?.length || 0;\r\n        data.totalChars += contentLength;\r\n        data.totalWords += Math.ceil(contentLength / 5);\r\n      }\r\n\r\n      // 배열로 변환 (Object.entries 사용)\r\n      const sortedDates = Array.from(dataMap.keys()).sort((a, b) => \r\n        new Date(a).getTime() - new Date(b).getTime()\r\n      );\r\n      \r\n      return {\r\n        // 날짜 레이블 간략화 (월/일만 표시)\r\n        labels: sortedDates.map(date => {\r\n          const parts = date.split('/');\r\n          return parts.length >= 2 ? `${parts[0]}/${parts[1]}` : date;\r\n        }),\r\n        keyCountData: sortedDates.map(date => dataMap.get(date).totalKeyCount),\r\n        // 분 단위로 변환하고 정수로 반올림\r\n        timeData: sortedDates.map(date => Math.round(dataMap.get(date).totalTime / 60)),\r\n        // 속도 계산도 간소화\r\n        speedData: sortedDates.map(date => {\r\n          const d = dataMap.get(date);\r\n          return d.totalTime > 0 ? Math.round((d.totalKeyCount / d.totalTime) * 60) : 0;\r\n        }),\r\n        wordData: sortedDates.map(date => dataMap.get(date).totalWords),\r\n        charData: sortedDates.map(date => dataMap.get(date).totalChars),\r\n      };\r\n    } catch (error) {\r\n      console.error('차트 데이터 생성 중 오류:', error);\r\n      // 오류 발생 시 빈 데이터 반환\r\n      return {\r\n        labels: [],\r\n        keyCountData: [],\r\n        timeData: [],\r\n        speedData: [],\r\n        wordData: [],\r\n        charData: []\r\n      };\r\n    }\r\n  }, [filteredLogs]);\r\n\r\n  // 차트 데이터 생성 함수 - 메모리 사용 최적화\r\n  const createChartData = useCallback((\r\n    labels: string[], \r\n    data: number[], \r\n    label: string, \r\n    color: string, \r\n    bgColor: string\r\n  ) => {\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label,\r\n          data,\r\n          borderColor: color,\r\n          backgroundColor: bgColor,\r\n          // 불필요한 옵션 제거\r\n          pointBackgroundColor: color,\r\n          borderWidth: 1,\r\n          fill: false,\r\n        },\r\n      ],\r\n    };\r\n  }, []);\r\n\r\n  // 메모이제이션된 차트 데이터 (함수로 생성)\r\n  const speedChartData = useMemo(() => \r\n    createChartData(\r\n      chartData.labels,\r\n      chartData.speedData,\r\n      '평균 타이핑 속도 (타/분)',\r\n      isDarkMode ? 'rgb(3, 218, 198)' : 'rgb(75, 192, 192)',\r\n      isDarkMode ? 'rgba(3, 218, 198, 0.5)' : 'rgba(75, 192, 192, 0.5)'\r\n    ),\r\n  [chartData.labels, chartData.speedData, isDarkMode, createChartData]);\r\n\r\n  // 더 효율적인 렌더링을 위한 지연 로딩 상태\r\n  const [shouldRenderCharts, setShouldRenderCharts] = useState(false);\r\n\r\n  // 지연 로딩 설정\r\n  useEffect(() => {\r\n    if (!shouldRenderCharts && filteredLogs.length > 0) {\r\n      // 약간의 지연 후 차트 렌더링 시작\r\n      const timer = setTimeout(() => {\r\n        if (isMountedRef.current) {\r\n          setShouldRenderCharts(true);\r\n        }\r\n      }, 100);\r\n      \r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [filteredLogs.length, shouldRenderCharts]);\r\n\r\n  // 차트 참조 설정 콜백\r\n  const setChartRef = useCallback((instance: any) => {\r\n    if (instance) {\r\n      chartRefs.current.push(instance);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.chartContainer}>\r\n      <h2>타이핑 통계 차트</h2>\r\n      \r\n      {filteredLogs.length > 0 ? (\r\n        <div className={styles.charts}>\r\n          {/* 차트 렌더링에 지연 로딩 및 조건부 렌더링 적용 */}\r\n          {shouldRenderCharts && chartData.labels.length > 0 && (\r\n            <div className={styles.chartItem}>\r\n              <h3>일별 평균 타이핑 속도</h3>\r\n              <div className={styles.chartWrapper}>\r\n                <Line \r\n                  data={speedChartData} \r\n                  options={getChartOptions('일별 평균 속도 (타/분)')}\r\n                  redraw={false}\r\n                  ref={setChartRef}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {/* 다른 차트들은 사용자가 탭을 전환할 때만 렌더링하도록 지연 로딩 처리 */}\r\n          {shouldRenderCharts && (\r\n            <>\r\n              <div className={styles.chartItem}>\r\n                <h3>일별 총 타자 수</h3>\r\n                <div className={styles.chartWrapper}>\r\n                  <Bar \r\n                    data={{\r\n                      labels: chartData.labels,\r\n                      datasets: [{\r\n                        label: '총 타자 수',\r\n                        data: chartData.keyCountData,\r\n                        backgroundColor: isDarkMode ? 'rgba(30, 136, 229, 0.7)' : 'rgba(54, 162, 235, 0.5)',\r\n                      }]\r\n                    }}\r\n                    options={getChartOptions('일별 총 타자 수')}\r\n                    redraw={false}\r\n                    ref={setChartRef}\r\n                  />\r\n                </div>\r\n              </div>\r\n              \r\n              <div className={styles.chartItem}>\r\n                <h3>일별 총 타이핑 시간</h3>\r\n                <div className={styles.chartWrapper}>\r\n                  <Bar \r\n                    data={{\r\n                      labels: chartData.labels,\r\n                      datasets: [{\r\n                        label: '총 타이핑 시간 (분)',\r\n                        data: chartData.timeData,\r\n                        backgroundColor: isDarkMode ? 'rgba(207, 102, 121, 0.7)' : 'rgba(255, 99, 132, 0.5)',\r\n                      }]\r\n                    }}\r\n                    options={getChartOptions('일별 총 타이핑 시간 (분)')}\r\n                    redraw={false}\r\n                    ref={setChartRef}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <p className={styles.noData}>저장된 타이핑 데이터가 없습니다.</p>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\TypingHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\TypingMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\TypingStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\WindowControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\dialogs\\ConfirmDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\dialogs\\SaveConfirmDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\components\\dynamic-components.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\dashboard\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\hooks\\useAutoHideHeader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\hooks\\useElectronApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\hooks\\useInterval.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\hooks\\useMemoryManagement.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MemoryInfo' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":126,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":155,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":155,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef, useCallback } from 'react';\r\n\r\n// Define MemoryInfo interface locally\r\ninterface MemoryInfo {\r\n  usedJSHeapSize: number;\r\n  totalJSHeapSize: number;\r\n  jsHeapSizeLimit: number;\r\n}\r\n\r\nexport interface MemoryManagementOptions {\r\n  debugMode?: boolean;\r\n  checkInterval?: number;\r\n  memoryThreshold?: number;\r\n  activeTab?: string;\r\n  onClearLogs?: () => void;\r\n}\r\n\r\n/**\r\n * 메모리 관리를 위한 커스텀 훅\r\n * 주기적으로 메모리 상태를 확인하고 필요시 정리 작업을 수행합니다.\r\n */\r\nexport function useMemoryManagement({ \r\n  debugMode = false,\r\n  checkInterval = 30000, // 기본 30초\r\n  memoryThreshold = 100, // 기본 100MB\r\n  activeTab = 'monitor',\r\n  onClearLogs = () => {}\r\n}: MemoryManagementOptions = {}) {\r\n  const intervalsRef = useRef<NodeJS.Timeout[]>([]);\r\n  const memoryWarningShownRef = useRef<boolean>(false);\r\n  const lastCleanupTimeRef = useRef<number>(0);\r\n  const CLEANUP_COOLDOWN = 60000; // 정리 작업 간 최소 시간 간격 (1분)\r\n  \r\n  // 메모리 사용량 확인 및 정리 함수\r\n  const checkMemoryUsage = useCallback(() => {\r\n    // 브라우저에서 실행 중인지 확인\r\n    if (typeof window === 'undefined') return;\r\n\r\n    // 성능 API를 통한 메모리 정보 수집\r\n    if (window.performance && (window.performance as any).memory) {\r\n      const memoryInfo = (window.performance as any).memory;\r\n      const usedHeapSize = memoryInfo.usedJSHeapSize / (1024 * 1024);\r\n      const totalHeapSize = memoryInfo.totalJSHeapSize / (1024 * 1024);\r\n      const percentUsed = (usedHeapSize / totalHeapSize) * 100;\r\n      \r\n      if (debugMode) {\r\n        console.log(`메모리 사용량: ${Math.round(usedHeapSize)}MB (${Math.round(percentUsed)}%)`);\r\n      }\r\n      \r\n      // 임계치 이상이면 불필요한 데이터 해제 (쿨다운 시간 체크)\r\n      const now = Date.now();\r\n      if (usedHeapSize > memoryThreshold && (now - lastCleanupTimeRef.current > CLEANUP_COOLDOWN)) {\r\n        lastCleanupTimeRef.current = now;\r\n        \r\n        // 경고 로그 (한 번만 표시)\r\n        if (!memoryWarningShownRef.current && debugMode) {\r\n          console.warn(`메모리 사용량 경고: ${Math.round(usedHeapSize)}MB (임계치: ${memoryThreshold}MB)`);\r\n          memoryWarningShownRef.current = true;\r\n        }\r\n        \r\n        // 필요하지 않은 큰 객체 참조 해제\r\n        if (activeTab !== 'history' && activeTab !== 'stats' && activeTab !== 'chart') {\r\n          // 로그 데이터가 필요 없는 탭에서는 메모리에서 해제\r\n          onClearLogs();\r\n          \r\n          // 자동 최적화 수행\r\n          if (typeof window.__memoryOptimizer?.optimizeMemory === 'function') {\r\n            window.__memoryOptimizer.optimizeMemory(usedHeapSize > memoryThreshold * 1.5);\r\n            if (debugMode) {\r\n              console.log('메모리 자동 최적화 수행됨');\r\n            }\r\n          }\r\n          \r\n          // GC 힌트 제공\r\n          if (window.gc) {\r\n            window.gc();\r\n            if (debugMode) {\r\n              console.log('GC 호출됨');\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      // 메모리 사용량이 임계치 아래로 내려가면 경고 상태 초기화\r\n      if (usedHeapSize < memoryThreshold * 0.8) {\r\n        memoryWarningShownRef.current = false;\r\n      }\r\n    }\r\n  }, [activeTab, debugMode, memoryThreshold, onClearLogs]);\r\n  \r\n  // 컴포넌트 마운트 시 타이머 설정\r\n  useEffect(() => {\r\n    // 초기 메모리 체크\r\n    checkMemoryUsage();\r\n    \r\n    // 주기적으로 메모리 사용량 체크\r\n    const memoryCheckInterval = setInterval(checkMemoryUsage, checkInterval);\r\n    intervalsRef.current.push(memoryCheckInterval);\r\n    \r\n    // 페이지 가시성 변경 이벤트 핸들러\r\n    const handleVisibilityChange = () => {\r\n      if (document.visibilityState === 'visible') {\r\n        // 탭이 다시 보이게 되면 메모리 체크 실행\r\n        checkMemoryUsage();\r\n      }\r\n    };\r\n    \r\n    // 이벤트 리스너 등록\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    \r\n    // 페이지 언마운트 시 정리\r\n    return () => {\r\n      clearInterval(memoryCheckInterval);\r\n      \r\n      // 등록된 모든 인터벌 제거\r\n      intervalsRef.current.forEach(clearInterval);\r\n      intervalsRef.current = [];\r\n      \r\n      // 이벤트 리스너 제거\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n      \r\n      // 메모리 해제 요청\r\n      if (window.gc) {\r\n        try {\r\n          window.gc();\r\n        } catch (e) {\r\n          console.warn('GC 호출 실패');\r\n        }\r\n      }\r\n    };\r\n  }, [checkMemoryUsage, checkInterval]);\r\n  \r\n  // 수동으로 메모리 정리 실행 함수\r\n  const cleanupMemory = useCallback(() => {\r\n    // 브라우저 환경 확인\r\n    if (typeof window === 'undefined') return false;\r\n    \r\n    // 최적화 유틸리티 사용 시도\r\n    if (typeof window.__memoryOptimizer?.optimizeMemory === 'function') {\r\n      window.__memoryOptimizer.optimizeMemory(true);\r\n      if (debugMode) {\r\n        console.log('수동 메모리 최적화 실행됨');\r\n      }\r\n      return true;\r\n    }\r\n    \r\n    // 브라우저에 GC 권장\r\n    if (window.gc) {\r\n      try {\r\n        window.gc();\r\n        if (debugMode) {\r\n          console.log('GC 호출 성공');\r\n        }\r\n        return true;\r\n      } catch (e) {\r\n        console.warn('GC 호출 실패');\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }, [debugMode]);\r\n\r\n  // 인터벌 관리를 위한 추가 함수\r\n  const addInterval = useCallback((interval: NodeJS.Timeout) => {\r\n    intervalsRef.current.push(interval);\r\n  }, []);\r\n  \r\n  const clearIntervals = useCallback(() => {\r\n    intervalsRef.current.forEach(clearInterval);\r\n    intervalsRef.current = [];\r\n  }, []);\r\n\r\n  return {\r\n    cleanupMemory,\r\n    addInterval,\r\n    clearIntervals,\r\n    checkMemoryUsage\r\n  };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\hooks\\useMemoryOptimizer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MemoryOptimizer' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { useToast } from '../components/ToastContext';\r\n\r\n// MemoryOptimizer 인터페이스 추가\r\ninterface MemoryOptimizer {\r\n  suggestGarbageCollection: () => void;\r\n  requestGC: (emergency?: boolean) => Promise<any>;\r\n  clearBrowserCaches: () => Promise<boolean>;\r\n  clearStorageCaches: () => boolean;\r\n  checkMemoryUsage: () => Record<string, any> | null;\r\n  forceGC: () => boolean;\r\n  getMemoryInfo?: () => any;\r\n  optimizeMemory?: (aggressive?: boolean) => Promise<any>;\r\n  optimizeImageResources?: () => Promise<any>;\r\n}\r\n\r\n// Window 인터페이스 확장\r\ndeclare global {\r\n  interface Window {\r\n    gc?: () => void;\r\n  }\r\n}\r\n\r\ninterface MemoryOptimizationOptions {\r\n  /**\r\n   * 메모리 사용량 임계치 (MB)\r\n   * 이 값을 초과하면 자동 최적화가 실행됩니다.\r\n   */\r\n  threshold?: number;\r\n  \r\n  /**\r\n   * 메모리 확인 주기 (ms)\r\n   */\r\n  checkInterval?: number;\r\n  \r\n  /**\r\n   * 경고 메시지 표시 여부\r\n   */\r\n  showWarnings?: boolean;\r\n  \r\n  /**\r\n   * 자동 최적화 활성화 여부\r\n   */\r\n  autoOptimize?: boolean;\r\n  \r\n  /**\r\n   * 디버그 모드 활성화 여부\r\n   */\r\n  debug?: boolean;\r\n}\r\n\r\n/**\r\n * 메모리 최적화 훅 \r\n * \r\n * 앱의 메모리 사용량을 모니터링하고 최적화하는 훅입니다.\r\n * \r\n * @param options 메모리 최적화 옵션\r\n * @returns 메모리 정보 및 최적화 관련 함수\r\n */\r\nexport function useMemoryOptimizer(options: MemoryOptimizationOptions = {}) {\r\n  const {\r\n    threshold = 100, // 기본 100MB\r\n    checkInterval = 30000, // 기본 30초\r\n    showWarnings = true,\r\n    autoOptimize = false,\r\n    debug = false\r\n  } = options;\r\n  \r\n  const { showToast } = useToast();\r\n  const [memoryInfo, setMemoryInfo] = useState<any>(null);\r\n  const [isOptimizing, setIsOptimizing] = useState(false);\r\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\r\n  const optimizeMemoryRef = useRef<(() => void) | null>(null);\r\n  \r\n  // updateMemoryInfo 함수 선언을 먼저 수행\r\n  const updateMemoryInfo = useCallback(() => {\r\n    try {\r\n      if (typeof window === 'undefined') return null;\r\n      \r\n      if (window.__memoryOptimizer?.getMemoryInfo) {\r\n        const info = window.__memoryOptimizer.getMemoryInfo();\r\n        setMemoryInfo(info);\r\n\r\n        // 임계치 초과 시 처리\r\n        if (info && info.heapUsedMB > threshold) {\r\n          if (debug) {\r\n            console.warn(`메모s리 사용량 경고: ${info.heapUsedMB}MB (임계치: ${threshold}MB)`);\r\n          }\r\n          \r\n          if (showWarnings) {\r\n            showToast(`메모리 사용량이 높습니다: ${Math.round(info.heapUsedMB)}MB`, 'warning');\r\n          }\r\n          \r\n          if (autoOptimize && optimizeMemoryRef.current) {\r\n            optimizeMemoryRef.current();\r\n          }\r\n        }\r\n        \r\n        return info;\r\n      }\r\n      \r\n      return null;\r\n    } catch (error) {\r\n      console.error('메모리 정보 가져오기 오류:', error);\r\n      return null;\r\n    }\r\n  }, [threshold, debug, showWarnings, autoOptimize, showToast]);\r\n  \r\n  // 메모리 최적화 함수를 updateMemoryInfo 선언 이후에 정의\r\n  const optimizeMemory = useCallback(async () => {\r\n    if (isOptimizing) return;\r\n    \r\n    try {\r\n      setIsOptimizing(true);\r\n      \r\n      if (typeof window !== 'undefined' && window.__memoryOptimizer?.optimizeMemory) {\r\n        await window.__memoryOptimizer.optimizeMemory(true); // aggressive 모드로 최적화\r\n      } else {\r\n        // 기본 최적화 구현\r\n        if (typeof window !== 'undefined' && window.gc) {\r\n          window.gc();\r\n        }\r\n      }\r\n      \r\n      // 잠시 후 GC 요청 (브라우저에서 GC가 실행될 시간 제공)\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      // 최적화 후 메모리 정보 갱신\r\n      updateMemoryInfo();\r\n    } catch (error) {\r\n      console.error('메모리 최적화 중 오류:', error);\r\n    } finally {\r\n      setIsOptimizing(false);\r\n    }\r\n  }, [isOptimizing, updateMemoryInfo]);\r\n  \r\n  // ref에 최신 함수 유지\r\n  optimizeMemoryRef.current = optimizeMemory;\r\n  \r\n  // 이미지 리소스 최적화\r\n  const optimizeImageResources = useCallback(async () => {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.__memoryOptimizer?.optimizeImageResources) {\r\n        return await window.__memoryOptimizer.optimizeImageResources();\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('이미지 리소스 최적화 오류:', error);\r\n      return false;\r\n    }\r\n  }, []);\r\n  \r\n  // 주기적 메모리 체크 설정\r\n  useEffect(() => {\r\n    // 초기 메모리 정보 가져오기\r\n    updateMemoryInfo();\r\n    \r\n    // 주기적 체크 설정\r\n    if (checkInterval > 0) {\r\n      intervalRef.current = setInterval(updateMemoryInfo, checkInterval);\r\n    }\r\n    \r\n    return () => {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n        intervalRef.current = null;\r\n      }\r\n    };\r\n  }, [checkInterval, updateMemoryInfo]);\r\n  \r\n  return {\r\n    memoryInfo,\r\n    isOptimizing,\r\n    optimizeMemory,\r\n    optimizeImageResources,\r\n    updateMemoryInfo\r\n  };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\hooks\\useNativeGpu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\hooks\\useNativeMemory.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'fetchMemoryInfo'. Either include it or remove the dependency array.","line":67,"column":6,"nodeType":"ArrayExpression","endLine":67,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [optimizing, onOptimizationDone, fetchMemoryInfo]","fix":{"range":[2066,2098],"text":"[optimizing, onOptimizationDone, fetchMemoryInfo]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { MemoryInfo, OptimizationResult, OptimizationLevel } from '../types';\r\nimport { useInterval } from './useInterval';\r\n\r\ninterface UseNativeMemoryOptions {\r\n  interval?: number;\r\n  autoFetch?: boolean;\r\n  autoOptimize?: boolean;\r\n  optimizationThreshold?: number;\r\n  onMemoryInfo?: (info: MemoryInfo) => void;\r\n  onOptimizationDone?: (result: OptimizationResult) => void;\r\n}\r\n\r\nexport function useNativeMemory({\r\n  interval = 10000,\r\n  autoFetch = true,\r\n  autoOptimize = false,\r\n  optimizationThreshold = 80,\r\n  onMemoryInfo,\r\n  onOptimizationDone\r\n}: UseNativeMemoryOptions = {}) {\r\n  const [memoryInfo, setMemoryInfo] = useState<MemoryInfo | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [optimizing, setOptimizing] = useState(false);\r\n  const [lastOptimized, setLastOptimized] = useState<number | null>(null);\r\n\r\n  // fetchMemoryInfo 함수를 선언 전에 선언\r\n  const optimizeMemory = useCallback(async (level: OptimizationLevel = OptimizationLevel.MEDIUM) => {\r\n    if (optimizing) return;\r\n\r\n    setOptimizing(true);\r\n\r\n    try {\r\n      const response = await fetch('/api/memory/optimize', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ level })\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        setLastOptimized(Date.now());\r\n        if (onOptimizationDone) {\r\n          onOptimizationDone(result);\r\n        }\r\n      } else {\r\n        console.error('메모리 최적화 실패:', result.error);\r\n      }\r\n\r\n      // 최적화 후 메모리 정보 업데이트\r\n      // fetchMemoryInfo 참조 오류 방지를 위해 setTimeout 내에서 호출\r\n      setTimeout(() => {\r\n        fetchMemoryInfo();\r\n      }, 500);\r\n\r\n      return result;\r\n    } catch (err) {\r\n      console.error('메모리 최적화 오류:', err);\r\n      return { success: false, error: err instanceof Error ? err.message : '알 수 없는 오류' };\r\n    } finally {\r\n      setOptimizing(false);\r\n    }\r\n  }, [optimizing, onOptimizationDone]);\r\n\r\n  // 메모리 정보 가져오기\r\n  const fetchMemoryInfo = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('/api/native/test');\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`서버 오류: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.success && data.memoryInfo) {\r\n        setMemoryInfo(data.memoryInfo);\r\n\r\n        if (onMemoryInfo) {\r\n          onMemoryInfo(data.memoryInfo);\r\n        }\r\n\r\n        // 자동 최적화 확인\r\n        if (autoOptimize &&\r\n          data.memoryInfo.percentUsed !== undefined &&\r\n          data.memoryInfo.percentUsed > optimizationThreshold &&\r\n          (!lastOptimized || Date.now() - lastOptimized > 60000)) {\r\n          optimizeMemory(OptimizationLevel.MEDIUM);\r\n        }\r\n      } else {\r\n        setError(data.error || '메모리 정보 없음');\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : '알 수 없는 오류');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [autoOptimize, optimizationThreshold, lastOptimized, onMemoryInfo, optimizeMemory]);\r\n\r\n  // 메모리 사용량 문자열 계산\r\n  const getMemoryUsageString = useCallback(() => {\r\n    if (!memoryInfo) return 'N/A';\r\n\r\n    const usedMB = memoryInfo.heapUsed !== undefined\r\n      ? Math.round(memoryInfo.heapUsed / (1024 * 1024) * 10) / 10\r\n      : 0;\r\n\r\n    const totalMB = memoryInfo.heapTotal !== undefined\r\n      ? Math.round(memoryInfo.heapTotal / (1024 * 1024) * 10) / 10\r\n      : 0;\r\n\r\n    const percent = memoryInfo.percentUsed !== undefined\r\n      ? Math.round(memoryInfo.percentUsed * 10) / 10\r\n      : 0;\r\n\r\n    return `${usedMB}MB / ${totalMB}MB (${percent}%)`;\r\n  }, [memoryInfo]);\r\n\r\n  // 자동 fetch 간격 설정\r\n  useInterval(fetchMemoryInfo, autoFetch ? interval : null);\r\n\r\n  // 초기 로드\r\n  useEffect(() => {\r\n    fetchMemoryInfo();\r\n  }, [fetchMemoryInfo]);\r\n\r\n  return {\r\n    memoryInfo,\r\n    loading,\r\n    error,\r\n    optimizing,\r\n    lastOptimized,\r\n    fetchMemoryInfo,\r\n    optimizeMemory,\r\n    getMemoryUsageString\r\n  };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\hooks\\usePerformanceOptimization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\hooks\\useSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\hooks\\useTabNavigation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'electronAPI' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":59}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useEffect } from 'react';\r\nimport { ElectronAPI } from '../types/electron';\r\n\r\n// API 인터페이스 정의 수정 - ElectronAPI와 호환되도록 변경\r\ninterface TabNavigationAPI extends Partial<ElectronAPI> {\r\n  // ElectronAPI의 모든 속성을 선택적으로 상속\r\n}\r\n\r\ninterface UseTabNavigationProps {\r\n  initialTab: string;\r\n  electronAPI?: TabNavigationAPI | null; // 옵셔널로 변경\r\n}\r\n\r\nexport function useTabNavigation({ initialTab, electronAPI }: UseTabNavigationProps) {\r\n  const [activeTab, setActiveTab] = useState(initialTab);\r\n  const [debugMode, setDebugMode] = useState(false);\r\n\r\n  // 탭 변경 핸들러\r\n  const handleTabChange = useCallback((tab: string) => {\r\n    setActiveTab(tab);\r\n  }, []);\r\n\r\n  // 디버그 모드 토글\r\n  const toggleDebugMode = useCallback(() => {\r\n    setDebugMode(prev => !prev);\r\n  }, []);\r\n\r\n  // 컴포넌트 마운트 시 실행할 코드\r\n  useEffect(() => {\r\n    // 여기에 필요한 초기화 로직 추가\r\n  }, []);\r\n\r\n  return {\r\n    activeTab,\r\n    debugMode,\r\n    handleTabChange,\r\n    toggleDebugMode\r\n  };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\hooks\\useToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\hooks\\useTypingStats.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":331,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":331,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useCallback, useEffect } from 'react';\r\nimport { useToast } from '../components/ToastContext';\r\nimport { ElectronAPI } from '../types/electron';\r\n\r\nconst MAX_LOGS_TO_LOAD = 100; // 최대 로그 수 제한\r\n\r\n// 타입 정의 추가\r\ninterface LogEntry {\r\n  id: number;\r\n  content: string;\r\n  key_count: number;\r\n  typing_time: number;\r\n  timestamp: string;\r\n  created_at: string;\r\n  is_saved?: boolean;\r\n  window_title?: string;\r\n  browser_name?: string;\r\n  total_chars?: number;\r\n  total_chars_no_space?: number;\r\n  total_words?: number;\r\n  pages?: number;\r\n  accuracy?: number;\r\n}\r\n\r\n// 통계 업데이트 인터페이스 정의 추가\r\ninterface TypingStatsUpdate {\r\n  keyCount: number;\r\n  typingTime: number;\r\n  windowTitle?: string;\r\n  browserName?: string;\r\n  totalChars?: number;\r\n  totalCharsNoSpace?: number;\r\n  totalWords?: number;\r\n  pages?: number;\r\n  accuracy?: number;\r\n}\r\n\r\n// 저장 데이터 인터페이스 정의 추가\r\ninterface RecordData {\r\n  content: string;\r\n  keyCount: number;\r\n  typingTime: string;\r\n  timestamp: string;\r\n  windowTitle?: string;\r\n  browserName?: string;\r\n  totalChars?: number;\r\n  totalWords?: number;\r\n  pages?: number;\r\n  accuracy?: number;\r\n}\r\n\r\nexport interface TypingStatsState {\r\n  keyCount: number;\r\n  typingTime: number;\r\n  windowTitle: string;\r\n  browserName: string;\r\n  totalChars: number;\r\n  totalCharsNoSpace: number;\r\n  totalWords: number;\r\n  pages: number;\r\n  accuracy: number;\r\n}\r\n\r\nexport function useTypingStats(electronAPI: ElectronAPI | null) {\r\n  // API에서 가져온 로그 데이터\r\n  const [logs, setLogs] = useState<LogEntry[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isTracking, setIsTracking] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // 메모리 관리를 위한 ref 사용\r\n  const eventsCleanupRef = useRef<(() => void)[]>([]);\r\n  const intervalsRef = useRef<NodeJS.Timeout[]>([]);\r\n  \r\n  // 현재 통계 상태 - useRef로 관리하여 불필요한 렌더링 방지\r\n  const currentStatsRef = useRef<TypingStatsState>({\r\n    keyCount: 0,\r\n    typingTime: 0,\r\n    windowTitle: '',\r\n    browserName: '',\r\n    totalChars: 0,\r\n    totalCharsNoSpace: 0,\r\n    totalWords: 0,\r\n    pages: 0,\r\n    accuracy: 100\r\n  });\r\n  \r\n  // 화면에 표시할 통계만 useState로 관리\r\n  const [displayStats, setDisplayStats] = useState({...currentStatsRef.current});\r\n  const { showToast } = useToast();\r\n  \r\n  // 주기적으로 표시 통계 업데이트 (불필요한 렌더링 방지)\r\n  useEffect(() => {\r\n    const updateInterval = setInterval(() => {\r\n      // 변경사항이 있는 경우에만 상태 업데이트\r\n      if (JSON.stringify(currentStatsRef.current) !== JSON.stringify(displayStats)) {\r\n        setDisplayStats({...currentStatsRef.current});\r\n      }\r\n    }, 2000); // 2초마다 업데이트\r\n    \r\n    intervalsRef.current.push(updateInterval);\r\n    \r\n    return () => clearInterval(updateInterval);\r\n  }, [displayStats]);\r\n\r\n  // 통계 시작 핸들러\r\n  const handleStartTracking = useCallback(() => {\r\n    try {\r\n      if (electronAPI) {\r\n        electronAPI.startTracking?.();\r\n        setIsTracking(true);\r\n      } else {\r\n        console.warn('electronAPI가 없습니다.');\r\n        setIsTracking(true); // API가 없어도 UI는 tracking 상태 표시\r\n      }\r\n    } catch (error) {\r\n      console.error('startTracking 호출 오류:', error);\r\n      setIsTracking(true);\r\n    }\r\n  }, [electronAPI]);\r\n\r\n  // 통계 중지 핸들러\r\n  const handleStopTracking = useCallback(() => {\r\n    try {\r\n      if (electronAPI) {\r\n        electronAPI.stopTracking?.();\r\n        setIsTracking(false);\r\n      } else {\r\n        console.warn('electronAPI가 없습니다.');\r\n        setIsTracking(false);\r\n      }\r\n    } catch (error) {\r\n      console.error('stopTracking 호출 오류:', error);\r\n      setIsTracking(false);\r\n    }\r\n  }, [electronAPI]);\r\n\r\n  // 로그 데이터 로드 함수\r\n  const fetchLogs = useCallback(async (limit = MAX_LOGS_TO_LOAD) => {\r\n    if (isLoading) return; // 이미 로딩 중이면 중복 호출 방지\r\n    \r\n    try {\r\n      setIsLoading(true);\r\n      const endpoint = `/api/getLogs?limit=${limit}`;\r\n      const response = await fetch(endpoint);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`API 요청 실패: ${response.status} ${response.statusText}`);\r\n      }\r\n      \r\n      const contentType = response.headers.get('content-type');\r\n      if (!contentType || !contentType.includes('application/json')) {\r\n        throw new Error('서버에서 잘못된 응답 형식 반환');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        // 필요한 필드만 추출하여 메모리 최적화\r\n        const optimizedLogs = data.logs.map((log: any) => ({\r\n          id: log.id,\r\n          content: log.content,\r\n          key_count: log.key_count,\r\n          typing_time: log.typing_time,\r\n          timestamp: log.timestamp,\r\n          created_at: log.created_at,\r\n          window_title: log.window_title,\r\n          browser_name: log.browser_name,\r\n          total_chars: log.total_chars,\r\n          total_words: log.total_words,\r\n          pages: log.pages,\r\n          accuracy: log.accuracy\r\n        }));\r\n        \r\n        // 상태 업데이트 조건부로 수행\r\n        if (JSON.stringify(logs) !== JSON.stringify(optimizedLogs)) {\r\n          setLogs(optimizedLogs);\r\n        }\r\n      } else {\r\n        console.error('로그 불러오기 실패:', data.error);\r\n        setLogs([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('로그 API 요청 오류:', error);\r\n      setLogs([]);\r\n      setError('로그를 불러오는 중 문제가 발생했습니다.');\r\n      showToast?.('데이터 로드 중 오류가 발생했습니다', 'error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [logs, showToast, isLoading]);\r\n\r\n  // 데이터베이스 저장 함수\r\n  const saveToDatabase = useCallback(async (record: RecordData) => {\r\n    try {\r\n      const response = await fetch('/api/saveLogs', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(record)\r\n      });\r\n\r\n      const result = await response.json();\r\n      \r\n      if (response.ok) {\r\n        await fetchLogs(); // 로그 다시 불러오기\r\n      } else {\r\n        console.error('저장 실패:', result.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('저장 API 요청 오류:', error);\r\n    }\r\n  }, [fetchLogs]);\r\n\r\n  // 통계 저장 핸들러\r\n  const handleSaveStats = useCallback((content: string) => {\r\n    try {\r\n      if (electronAPI) {\r\n        electronAPI.saveStats?.(content);\r\n      }\r\n      \r\n      // DB에도 저장\r\n      const recordData: RecordData = {\r\n        content,\r\n        keyCount: currentStatsRef.current.keyCount,\r\n        typingTime: currentStatsRef.current.typingTime.toString(), // number를 string으로 변환\r\n        timestamp: new Date().toISOString(),\r\n        windowTitle: currentStatsRef.current.windowTitle,\r\n        browserName: currentStatsRef.current.browserName,\r\n        totalChars: currentStatsRef.current.totalChars,\r\n        totalWords: currentStatsRef.current.totalWords,\r\n        pages: currentStatsRef.current.pages,\r\n        accuracy: currentStatsRef.current.accuracy\r\n      };\r\n      \r\n      saveToDatabase(recordData);\r\n    } catch (error) {\r\n      console.error('saveStats 호출 오류:', error);\r\n      // API 호출 실패해도 데이터베이스에는 저장 시도\r\n      const recordData: RecordData = {\r\n        content,\r\n        keyCount: currentStatsRef.current.keyCount,\r\n        typingTime: currentStatsRef.current.typingTime.toString(), // number를 string으로 변환\r\n        timestamp: new Date().toISOString(),\r\n        windowTitle: currentStatsRef.current.windowTitle,\r\n        browserName: currentStatsRef.current.browserName || 'Unknown'\r\n      };\r\n      \r\n      saveToDatabase(recordData);\r\n    }\r\n  }, [electronAPI, saveToDatabase]);\r\n\r\n  // 초기화 함수\r\n  const initializeEventListeners = useCallback(() => {\r\n    if (!electronAPI) return;\r\n    \r\n    // 이벤트 리스너 설정 및 정리 함수 모음\r\n    const cleanupFunctions: (() => void)[] = [];\r\n    \r\n    // 타이핑 통계 업데이트 이벤트 리스너\r\n    if (electronAPI.onTypingStatsUpdate) {\r\n      const cleanup = electronAPI.onTypingStatsUpdate((data: TypingStatsUpdate) => {\r\n        // 통계 상태 업데이트 로직\r\n        currentStatsRef.current = {\r\n          ...currentStatsRef.current,\r\n          ...data\r\n        };\r\n      });\r\n      \r\n      cleanupFunctions.push(cleanup);\r\n    }\r\n    \r\n    // 저장된 통계 이벤트 리스너\r\n    if (electronAPI.onStatsSaved) {\r\n      const cleanup = electronAPI.onStatsSaved(() => {\r\n        // 저장 완료 후 로직\r\n        fetchLogs();\r\n      });\r\n      \r\n      cleanupFunctions.push(cleanup);\r\n    }\r\n    \r\n    // 정리 함수를 ref에 저장\r\n    eventsCleanupRef.current = cleanupFunctions;\r\n  }, [electronAPI, fetchLogs]);\r\n\r\n  // 컴포넌트 마운트 시 이벤트 리스너 설정\r\n  useEffect(() => {\r\n    initializeEventListeners();\r\n    \r\n    // 컴포넌트 언마운트 시 이벤트 리스너 정리\r\n    return () => {\r\n      eventsCleanupRef.current.forEach(cleanup => {\r\n        try {\r\n          cleanup();\r\n        } catch (error) {\r\n          console.error('이벤트 리스너 정리 오류:', error);\r\n        }\r\n      });\r\n    };\r\n  }, [initializeEventListeners]);\r\n\r\n  // 메모리 관리를 위한 정리 함수\r\n  useEffect(() => {\r\n    return () => {\r\n      // 등록된 모든 이벤트 리스너 제거\r\n      eventsCleanupRef.current.forEach(cleanup => cleanup());\r\n      eventsCleanupRef.current = [];\r\n      \r\n      // 등록된 모든 인터벌 제거\r\n      intervalsRef.current.forEach(clearInterval);\r\n      intervalsRef.current = [];\r\n      \r\n      // 대용량 객체 참조 끊기\r\n      setLogs([]);\r\n      currentStatsRef.current = {\r\n        keyCount: 0,\r\n        typingTime: 0,\r\n        windowTitle: '',\r\n        browserName: '',\r\n        totalChars: 0,\r\n        totalCharsNoSpace: 0,\r\n        totalWords: 0,\r\n        pages: 0,\r\n        accuracy: 100\r\n      };\r\n      \r\n      // 메모리 해제 요청\r\n      if (window.gc) {\r\n        try {\r\n          window.gc();\r\n        } catch (e) {\r\n          console.log('GC 호출 실패');\r\n        }\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // 초기 로딩시 로그 데이터 가져오기\r\n  useEffect(() => {\r\n    fetchLogs();\r\n  }, [fetchLogs]);\r\n\r\n  return {\r\n    logs,\r\n    isLoading, \r\n    isTracking,\r\n    displayStats,\r\n    handleStartTracking,\r\n    handleStopTracking,\r\n    handleSaveStats,\r\n    fetchLogs,\r\n    currentStatsRef,\r\n    error\r\n  };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\mini-view\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\pages\\analysis\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\pages\\debug.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\restart\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\settings\\memory-settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\types\\electron.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\TypingSpeedCalculator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\api-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\cache-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\common-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\darkModeUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\date-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\enum-converters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\file-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\format-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\gpu-acceleration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\gpu-detection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\gpu-settings-bridge.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\gpu-settings-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'settings' is defined but never used. Allowed unused args must match /^_/u.","line":235,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":235,"endColumn":63}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * GPU 설정 관리 유틸리티\r\n * \r\n * 다양한、GPU 유형(내장, 모바일, 디스크리트 GPU)에 대한 설정을 관리합니다.\r\n */\r\n\r\nimport { isGPUAccelerationEnabled, getGPUInfo } from './memory/gpu-accelerator';\r\n\r\n// GPU 설정 유형 정의\r\nexport interface GPUSettings {\r\n  useHardwareAcceleration: boolean;  // 하드웨어 가속 사용 여부\r\n  processingMode: string;            // 처리 모드\r\n  optimizeForBattery: boolean;       // 배터리 최적화 모드\r\n  memoryOptimization: 'low' | 'medium' | 'high'; // 메모리 최적화 레벨\r\n  threadCount: number;               // 사용할 스레드 수\r\n}\r\n\r\n// 디바이스 유형 기반 최적화 설정\r\nconst GPU_PROFILES = {\r\n  // 디스크리트 GPU (고성능)\r\n  'DiscreteGpu': {\r\n    useHardwareAcceleration: true,\r\n    processingMode: 'gpu-intensive',\r\n    optimizeForBattery: false,\r\n    memoryOptimization: 'low' as const,\r\n    threadCount: 16\r\n  },\r\n  \r\n  // 내장 GPU (중간 성능)\r\n  'IntegratedGpu': {\r\n    useHardwareAcceleration: true,\r\n    processingMode: 'normal',\r\n    optimizeForBattery: true,\r\n    memoryOptimization: 'medium' as const,\r\n    threadCount: 8\r\n  },\r\n  \r\n  // 저전력 GPU (모바일/시스템)\r\n  'LowPower': {\r\n    useHardwareAcceleration: false,\r\n    processingMode: 'cpu-intensive',\r\n    optimizeForBattery: true,\r\n    memoryOptimization: 'high' as const,\r\n    threadCount: 4\r\n  }\r\n};\r\n\r\n/**\r\n * 현재 GPU 타입 감지\r\n * @returns GPU 타입 문자열\r\n */\r\nexport async function detectGPUType(): Promise<string> {\r\n  try {\r\n    // GPU 가속 사용 가능 여부 확인\r\n    const isAccelerated = await isGPUAccelerationEnabled();\r\n    if (!isAccelerated) {\r\n      return 'LowPower';\r\n    }\r\n    \r\n    // GPU 정보 가져오기\r\n    const gpuInfo = getGPUInfo();\r\n    const { renderer } = gpuInfo;\r\n    \r\n    // 고성능 GPU 확인\r\n    if (renderer.includes('NVIDIA') || \r\n        renderer.includes('AMD') || \r\n        renderer.includes('Radeon') ||\r\n        renderer.includes('GeForce')) {\r\n      return 'DiscreteGpu';\r\n    }\r\n    \r\n    // 내장 GPU 확인\r\n    if (renderer.includes('Intel') ||\r\n        renderer.includes('UHD') ||\r\n        renderer.includes('Iris')) {\r\n      return 'IntegratedGpu';\r\n    }\r\n    \r\n    // 모바일 또는 저전력 GPU 확인\r\n    if (renderer.includes('Apple') || \r\n        renderer.includes('Mali') || \r\n        renderer.includes('PowerVR') ||\r\n        renderer.includes('Adreno')) {\r\n      // 대부분의 최신 모바일 GPU는 내장 GPU와 비슷한 성능 제공\r\n      return 'IntegratedGpu';\r\n    }\r\n    \r\n    // 기타 또는 미확인 GPU - 기본적으로 내장 GPU로 취급\r\n    return 'IntegratedGpu';\r\n  } catch (error) {\r\n    console.error('GPU 타입 감지 실패:', error);\r\n    return 'LowPower'; // 오류 시 저전력 모드로 폴백\r\n  }\r\n}\r\n\r\n/**\r\n * 배터리 상태 확인 (저전력 조건 판단용)\r\n */\r\nasync function checkBatteryStatus(): Promise<boolean> {\r\n  try {\r\n    // 배터리 API 지원 확인\r\n    if ('getBattery' in navigator) {\r\n      const battery = await (navigator as Navigator & {getBattery(): Promise<any>}).getBattery();\r\n      return !battery.charging && battery.level < 0.3; // 충전 중이 아니고 30% 미만일 때 저전력 모드\r\n    }\r\n    return false;\r\n  } catch (error) {\r\n    console.warn('배터리 상태 확인 실패:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * 시스템 메모리 확인\r\n */\r\nfunction checkSystemMemory(): number {\r\n  try {\r\n    // 메모리 API 지원 확인\r\n    if ('deviceMemory' in navigator) {\r\n      return (navigator as Navigator & {deviceMemory: number}).deviceMemory;\r\n    }\r\n    return 0; // 알 수 없음\r\n  } catch (error) {\r\n    console.warn('시스템 메모리 확인 실패:', error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * GPU 타입에 최적화된 설정 가져오기\r\n * @returns GPU 설정 객체\r\n */\r\nexport async function getOptimalGPUSettings(): Promise<GPUSettings> {\r\n  try {\r\n    const gpuType = await detectGPUType();\r\n    \r\n    // 배터리 상태 확인 (가능한 경우)\r\n    let isOnBattery = await checkBatteryStatus();\r\n    \r\n    // 기본 설정 가져오기\r\n    const settings = { ...GPU_PROFILES[gpuType as keyof typeof GPU_PROFILES] };\r\n    \r\n    // 배터리 상태에 따른 설정 조정 \r\n    if (isOnBattery && gpuType === 'DiscreteGpu') {\r\n      settings.processingMode = 'normal';\r\n      settings.threadCount = 8;\r\n    }\r\n    \r\n    // 디바이스 메모리에 따른 설정 조정\r\n    const deviceMemory = checkSystemMemory();\r\n    \r\n    if (deviceMemory <= 2) {\r\n      // 낮은 메모리 기기\r\n      settings.memoryOptimization = 'high';\r\n      settings.threadCount = Math.min(settings.threadCount, 4);\r\n    } else if (deviceMemory <= 4) {\r\n      // 중간 메모리 기기\r\n      settings.memoryOptimization = 'medium';\r\n    }\r\n    \r\n    return settings;\r\n  } catch (error) {\r\n    console.error('최적 GPU 설정 계산 실패:', error);\r\n    \r\n    // 오류 발생 시 안전한 기본값 반환\r\n    return {\r\n      useHardwareAcceleration: false,\r\n      processingMode: 'normal',\r\n      optimizeForBattery: true,\r\n      memoryOptimization: 'medium',\r\n      threadCount: 4\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 현재 설정에 따라 GPU 사용 최적화\r\n * @param settings GPU 설정 객체\r\n */\r\nexport async function applyGPUSettings(settings: GPUSettings): Promise<boolean> {\r\n  try {\r\n    // 하드웨어 가속 설정\r\n    // 실제 구현에서는 여기에 설정 적용 로직 추가\r\n    console.log('GPU 설정 적용:', settings);\r\n    \r\n    // Electron IPC를 통해 메인 프로세스에 설정 전달 (지원되는 경우)\r\n    if (window.electronAPI && window.electronAPI.saveSettings) {\r\n      await window.electronAPI.saveSettings({\r\n        // 다른 설정과 함께 GPU 설정 전달\r\n        useHardwareAcceleration: settings.useHardwareAcceleration,\r\n        processingMode: settings.processingMode\r\n      });\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('GPU 설정 적용 중 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * GPU 기능 확인 및 권장 설정 가져오기\r\n * @returns 권장 설정 및 GPU 정보\r\n */\r\nexport async function getGPURecommendations() {\r\n  try {\r\n    const gpuType = await detectGPUType();\r\n    const recommendedSettings = await getOptimalGPUSettings();\r\n    const gpuInfo = getGPUInfo();\r\n    \r\n    return {\r\n      gpuType,\r\n      gpuInfo,\r\n      recommendedSettings,\r\n      isAccelerationAvailable: await isGPUAccelerationEnabled(),\r\n      recommendation: getGPURecommendationMessage(gpuType, recommendedSettings)\r\n    };\r\n  } catch (error) {\r\n    console.error('GPU 권장 설정 가져오기 실패:', error);\r\n    \r\n    return {\r\n      gpuType: 'Unknown',\r\n      gpuInfo: { renderer: 'Unknown', vendor: 'Unknown', isAccelerated: false },\r\n      recommendedSettings: GPU_PROFILES.LowPower,\r\n      isAccelerationAvailable: false,\r\n      recommendation: 'GPU 정보를 가져올 수 없어 기본 CPU 처리 모드를 권장합니다.'\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * GPU 타입과 설정에 따른 권장 메시지 생성\r\n */\r\nfunction getGPURecommendationMessage(gpuType: string, settings: GPUSettings): string {\r\n  switch (gpuType) {\r\n    case 'DiscreteGpu':\r\n      return '고성능 디스크리트 GPU가 감지되었습니다. GPU 가속화를 활성화하면 최상의 성능을 얻을 수 있습니다.';\r\n    case 'IntegratedGpu':\r\n      return '내장 GPU가 감지되었습니다. 균형 잡힌 성능과 전력 효율성을 위해 표준 설정을 권장합니다.';\r\n    case 'LowPower':\r\n      return '저전력 GPU가 감지되었습니다. 메모리와 배터리 사용을 최적화하기 위해 CPU 중심 처리를 권장합니다.';\r\n    default:\r\n      return '시스템에 맞는 기본 설정이 적용되었습니다.';\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\gpu-settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\gpu\\functions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\interfaces\\memory-types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\localStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\log-learning.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":262,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":262,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 로그 학습 및 최적화 유틸리티\r\n * \r\n * 로그 데이터를 분석하여 학습하고 애플리케이션을 최적화하는 기능 제공\r\n */\r\n\r\nimport { LogType, searchLogs } from './log-utils';\r\nimport { logger } from './memory/logger';\r\n\r\n/**\r\n * 인터페이스 정의\r\n */\r\ninterface WordFrequency {\r\n  [key: string]: number;\r\n}\r\n\r\ninterface HourlyActivity {\r\n  [hour: number]: number;\r\n}\r\n\r\ninterface SessionConversations {\r\n  [sessionId: string]: number;\r\n}\r\n\r\ninterface ErrorGroups {\r\n  [errorType: string]: {\r\n    count: number;\r\n    examples: Array<{ message: string; timestamp: number }>;\r\n    sessionIds: Set<string>;\r\n  };\r\n}\r\n\r\n/**\r\n * 학습 모델 타입 정의\r\n */\r\nexport enum LearningModelType {\r\n  MEMORY_OPTIMIZATION = 'memory_optimization',\r\n  ERROR_PREDICTION = 'error_prediction',\r\n  PERFORMANCE_OPTIMIZATION = 'performance_optimization',\r\n  USER_BEHAVIOR = 'user_behavior'\r\n}\r\n\r\n/**\r\n * 학습 결과 인터페이스\r\n */\r\nexport interface LearningResult {\r\n  modelType: LearningModelType;\r\n  timestamp: number;\r\n  insights: any[];\r\n  recommendations: string[];\r\n  metrics: { [key: string]: number };\r\n}\r\n\r\n/**\r\n * 메모리 최적화 학습 옵션\r\n */\r\nexport interface MemoryOptimizationOptions {\r\n  timeRange?: {\r\n    startTime?: number;\r\n    endTime?: number;\r\n  };\r\n  minSampleSize?: number;\r\n  sessionLimit?: number;\r\n}\r\n\r\n/**\r\n * 로그 데이터로부터 메모리 사용 패턴을 학습합니다.\r\n * \r\n * @param options - 메모리 최적화 학습 옵션\r\n * @returns 학습 결과\r\n */\r\nexport async function learnMemoryUsagePatterns(\r\n  options: MemoryOptimizationOptions = {}\r\n): Promise<LearningResult> {\r\n  try {\r\n    logger.info('메모리 사용 패턴 학습 시작');\r\n    \r\n    // 기본값 설정\r\n    const minSampleSize = options.minSampleSize || 50;\r\n    const now = Date.now();\r\n    const startTime = options.timeRange?.startTime || now - 7 * 24 * 60 * 60 * 1000; // 기본 1주일\r\n    const endTime = options.timeRange?.endTime || now;\r\n    \r\n    // 메모리 관련 로그 검색\r\n    const memoryLogs = await searchLogs({\r\n      type: LogType.MEMORY,\r\n      startTime,\r\n      endTime,\r\n      limit: 1000 // 최대 1000개까지만 가져옴\r\n    });\r\n    \r\n    if (memoryLogs.length < minSampleSize) {\r\n      logger.warn(`충분한 메모리 로그 샘플이 없습니다. 필요: ${minSampleSize}, 현재: ${memoryLogs.length}`);\r\n    }\r\n    \r\n    // 메모리 사용량 분석\r\n    const memoryUsages = memoryLogs.map(log => {\r\n      const metadata = log.metadata || {};\r\n      return {\r\n        timestamp: log.timestamp,\r\n        heapUsed: metadata.heapUsed || 0,\r\n        heapTotal: metadata.heapTotal || 0,\r\n        percentUsed: metadata.percentUsed || 0\r\n      };\r\n    });\r\n    \r\n    // 시간대별 메모리 사용량 집계\r\n    const hourlyUsage: { [hour: number]: number[] } = {};\r\n    memoryUsages.forEach(usage => {\r\n      const date = new Date(usage.timestamp);\r\n      const hour = date.getHours();\r\n      \r\n      if (!hourlyUsage[hour]) hourlyUsage[hour] = [];\r\n      hourlyUsage[hour].push(usage.percentUsed);\r\n    });\r\n    \r\n    // 평균 시간대별 사용량 계산\r\n    const hourlyAverages = Object.entries(hourlyUsage).map(([hour, values]) => ({\r\n      hour: parseInt(hour),\r\n      avgUsage: values.reduce((sum, val) => sum + val, 0) / values.length,\r\n      count: values.length\r\n    }));\r\n    \r\n    // 최대 메모리 사용 시간대 식별\r\n    hourlyAverages.sort((a, b) => b.avgUsage - a.avgUsage);\r\n    const peakHours = hourlyAverages.slice(0, 3);\r\n    \r\n    // 메모리 누수 가능성이 있는 세션 식별\r\n    const sessionData: { [sessionId: string]: number[] } = {};\r\n    memoryLogs.forEach(log => {\r\n      if (!log.sessionId) return;\r\n      \r\n      const metadata = log.metadata || {};\r\n      if (!sessionData[log.sessionId]) sessionData[log.sessionId] = [];\r\n      sessionData[log.sessionId].push(metadata.percentUsed || 0);\r\n    });\r\n    \r\n    // 세션별로 메모리 증가 추세 분석\r\n    const sessionTrends = Object.entries(sessionData).map(([sessionId, usages]) => {\r\n      if (usages.length < 5) return null; // 너무 짧은 세션은 제외\r\n      \r\n      const firstHalf = usages.slice(0, Math.floor(usages.length / 2));\r\n      const secondHalf = usages.slice(Math.floor(usages.length / 2));\r\n      \r\n      const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length;\r\n      const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length;\r\n      \r\n      const increaseTrend = secondAvg - firstAvg;\r\n      \r\n      return {\r\n        sessionId,\r\n        samplesCount: usages.length,\r\n        increaseTrend,\r\n        percentIncrease: (increaseTrend / firstAvg) * 100\r\n      };\r\n    }).filter(Boolean);\r\n    \r\n    // 메모리 증가 추세가 높은 세션 정렬\r\n    sessionTrends.sort((a, b) => (b?.increaseTrend || 0) - (a?.increaseTrend || 0));\r\n    const problematicSessions = sessionTrends.filter(session => session && session.percentIncrease > 15);\r\n    \r\n    // 최적화 추천사항 생성\r\n    const recommendations = [];\r\n    \r\n    if (peakHours.length > 0) {\r\n      const formattedHours = peakHours.map(h => `${h.hour}시`).join(', ');\r\n      recommendations.push(`메모리 사용량이 높은 시간대(${formattedHours})에 자동 메모리 최적화를 예약하세요.`);\r\n    }\r\n    \r\n    if (problematicSessions.length > 0) {\r\n      recommendations.push(`메모리 누수 가능성이 있는 ${problematicSessions.length}개의 패턴이 발견되었습니다.`);\r\n      \r\n      if (problematicSessions.length > 2) {\r\n        recommendations.push('장기간 사용 시 주기적인 앱 재시작 일정을 설정하세요.');\r\n      }\r\n    }\r\n    \r\n    // 메모리 GC 최적 주기 추천\r\n    const gcSuggestion = calculateOptimalGCInterval(memoryUsages);\r\n    if (gcSuggestion) {\r\n      recommendations.push(`최적의 가비지 컬렉션 주기: ${gcSuggestion}ms`);\r\n    }\r\n    \r\n    // 학습 결과 반환\r\n    const result: LearningResult = {\r\n      modelType: LearningModelType.MEMORY_OPTIMIZATION,\r\n      timestamp: Date.now(),\r\n      insights: [\r\n        { type: 'peakHours', data: peakHours },\r\n        { type: 'problematicSessions', data: problematicSessions.slice(0, 5) },\r\n        { type: 'hourlyUsage', data: hourlyAverages },\r\n      ],\r\n      recommendations,\r\n      metrics: {\r\n        sampleSize: memoryLogs.length,\r\n        avgMemoryUsage: memoryUsages.reduce((sum, u) => sum + u.percentUsed, 0) / memoryUsages.length,\r\n        peakMemoryUsage: Math.max(...memoryUsages.map(u => u.percentUsed)),\r\n        problematicSessionsCount: problematicSessions.length\r\n      }\r\n    };\r\n    \r\n    logger.info('메모리 사용 패턴 학습 완료', { \r\n      sampleSize: memoryLogs.length, \r\n      recommendations: recommendations.length \r\n    });\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    logger.error('메모리 사용 패턴 학습 중 오류:', error as Record<string, unknown>);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 사용자 행동 패턴 학습 옵션\r\n */\r\nexport interface UserBehaviorOptions {\r\n  timeRange?: {\r\n    startTime?: number;\r\n    endTime?: number;\r\n  };\r\n  minSampleSize?: number;\r\n}\r\n\r\n/**\r\n * 로그 데이터로부터 사용자 행동 패턴을 학습합니다.\r\n * \r\n * @param options - 사용자 행동 학습 옵션\r\n * @returns 학습 결과\r\n */\r\nexport async function learnUserBehaviorPatterns(\r\n  options: UserBehaviorOptions = {}\r\n): Promise<LearningResult> {\r\n  try {\r\n    logger.info('사용자 행동 패턴 학습 시작');\r\n    \r\n    // 기본값 설정\r\n    const minSampleSize = options.minSampleSize || 20;\r\n    const now = Date.now();\r\n    const startTime = options.timeRange?.startTime || now - 30 * 24 * 60 * 60 * 1000; // 기본 30일\r\n    const endTime = options.timeRange?.endTime || now;\r\n    \r\n    // 대화 로그 검색\r\n    const conversationLogs = await searchLogs({\r\n      type: LogType.CONVERSATION,\r\n      startTime,\r\n      endTime,\r\n      limit: 1000 // 최대 1000개까지만 가져옴\r\n    });\r\n    \r\n    if (conversationLogs.length < minSampleSize) {\r\n      logger.warn(`충분한 대화 로그 샘플이 없습니다. 필요: ${minSampleSize}, 현재: ${conversationLogs.length}`);\r\n    }\r\n    \r\n    // 대화 데이터 추출\r\n    const conversations = conversationLogs.map(log => {\r\n      try {\r\n        return {\r\n          ...log,\r\n          parsedContent: JSON.parse(log.content)\r\n        };\r\n      } catch (_) {  // 사용하지 않는 변수는 _ 로만 표시\r\n        return {\r\n          ...log,\r\n          parsedContent: {\r\n            userMessage: '',\r\n            aiResponse: '',\r\n            timestamp: log.timestamp\r\n          }\r\n        };\r\n      }\r\n    });\r\n    \r\n    // 자주 사용되는 단어/구문 분석\r\n    const wordFrequency: WordFrequency = {};\r\n    conversations.forEach(conv => {\r\n      const userMessage = conv.parsedContent?.userMessage || '';\r\n      if (!userMessage) return;\r\n      \r\n      const words = userMessage\r\n        .toLowerCase()\r\n        .replace(/[^\\w\\s가-힣]/g, ' ')\r\n        .split(/\\s+/)\r\n        .filter((word: string) => word.length > 1);\r\n      \r\n      words.forEach((word: string) => {\r\n        wordFrequency[word] = (wordFrequency[word] || 0) + 1;\r\n      });\r\n    });\r\n    \r\n    // 시간대별 활동 패턴 분석\r\n    const hourlyActivity: HourlyActivity = {};\r\n    conversations.forEach(conv => {\r\n      const timestamp = conv.timestamp || conv.parsedContent?.timestamp;\r\n      if (!timestamp) return;\r\n      \r\n      const date = new Date(timestamp);\r\n      const hour = date.getHours();\r\n      \r\n      hourlyActivity[hour] = (hourlyActivity[hour] || 0) + 1;\r\n    });\r\n    \r\n    // 메시지 길이 분석\r\n    const messageLengths = conversations.map(conv => {\r\n      const userMessage = conv.parsedContent?.userMessage || '';\r\n      return userMessage.length;\r\n    });\r\n    \r\n    const avgMessageLength = messageLengths.length > 0 ? \r\n      messageLengths.reduce((sum, len) => sum + len, 0) / messageLengths.length : 0;\r\n    \r\n    // 세션별 대화 수 분석\r\n    const sessionConversations: SessionConversations = {};\r\n    conversations.forEach(conv => {\r\n      if (!conv.sessionId) return;\r\n      sessionConversations[conv.sessionId] = (sessionConversations[conv.sessionId] || 0) + 1;\r\n    });\r\n    \r\n    const sessionsArray = Object.entries(sessionConversations)\r\n      .map(([id, count]) => ({ id, count: count as number }));\r\n    \r\n    const avgConversationsPerSession = sessionsArray.length > 0 ?\r\n      sessionsArray.reduce((sum, session) => {\r\n        return sum + (session && session.count ? session.count : 0);\r\n      }, 0) / sessionsArray.length : 0;\r\n    \r\n    // 활동이 가장 많은 시간대 식별: null 체크 추가\r\n    const activeHours = Object.entries(hourlyActivity)\r\n      .sort((a, b) => {\r\n        if (a === null || b === null || a[1] === null || b[1] === null) return 0;\r\n        return (b[1] as number) - (a[1] as number);\r\n      })\r\n      .slice(0, 3)\r\n      .map(([hour, count]) => ({ \r\n        hour: parseInt(hour), \r\n        count: count as number \r\n      }));\r\n    \r\n    // 추천사항 생성\r\n    const recommendations = [];\r\n    \r\n    if (activeHours.length > 0) {\r\n      const formattedHours = activeHours.map(h => `${h.hour}시`).join(', ');\r\n      recommendations.push(`사용자는 ${formattedHours}에 가장 활발하게 활동합니다. 이 시간대에 성능을 최적화하세요.`);\r\n    }\r\n    \r\n    if (avgMessageLength > 100) {\r\n      recommendations.push(`사용자는 평균 ${Math.round(avgMessageLength)}자의 긴 메시지를 보냅니다. 대용량 텍스트 처리를 최적화하세요.`);\r\n    } else {\r\n      recommendations.push(`사용자는 평균 ${Math.round(avgMessageLength)}자의 짧은 메시지를 보냅니다. 빠른 응답에 집중하세요.`);\r\n    }\r\n    \r\n    if (avgConversationsPerSession > 10) {\r\n      recommendations.push(`사용자는 세션당 평균 ${Math.round(avgConversationsPerSession)}개의 대화를 나눕니다. 장기 세션 메모리 관리를 최적화하세요.`);\r\n    }\r\n    \r\n    if (Object.keys(wordFrequency).length > 0) {\r\n      const topWords = Object.entries(wordFrequency)\r\n        .sort((a, b) => b[1] - a[1])\r\n        .slice(0, 20)\r\n        .map(([word, count]) => ({ word, count }));\r\n      const topThreeWords = topWords.slice(0, 3).map(w => w.word).join(', ');\r\n      recommendations.push(`가장 자주 사용된 키워드는 \"${topThreeWords}\"입니다. 이와 관련된 응답을 최적화하세요.`);\r\n    }\r\n    \r\n    // 학습 결과 반환 코드에서 타입 단언 안전하게 처리\r\n    const result: LearningResult = {\r\n      modelType: LearningModelType.USER_BEHAVIOR,\r\n      timestamp: Date.now(),\r\n      insights: [\r\n        { type: 'topWords', data: Object.entries(wordFrequency)\r\n          .sort((a, b) => b[1] - a[1])\r\n          .slice(0, 20)\r\n          .map(([word, count]) => ({ word, count })) },\r\n        { type: 'activeHours', data: activeHours },\r\n        { type: 'messageLengths', data: { average: avgMessageLength, max: Math.max(...messageLengths) } },\r\n        { type: 'sessionsActivity', data: { \r\n          average: avgConversationsPerSession, \r\n          maxCount: Math.max(...Object.values(sessionConversations).map(v => v as number)) \r\n        } },\r\n      ],\r\n      recommendations: recommendations || [], // null 체크 추가\r\n      metrics: {\r\n        sampleSize: conversations.length,\r\n        uniqueWords: Object.keys(wordFrequency).length,\r\n        avgMessageLength,\r\n        avgConversationsPerSession\r\n      }\r\n    };\r\n    \r\n    // 타입 안전한 로깅\r\n    logger.info('사용자 행동 패턴 학습 완료', { \r\n      sampleSize: conversations.length, \r\n      recommendations: recommendations ? recommendations.length : 0 \r\n    } as Record<string, unknown>);  // 타입 단언 추가\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    logger.error('사용자 행동 패턴 학습 중 오류:', error as Record<string, unknown>);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 오류 예측 학습 옵션\r\n */\r\nexport interface ErrorPredictionOptions {\r\n  timeRange?: {\r\n    startTime?: number;\r\n    endTime?: number;\r\n  };\r\n  minSampleSize?: number;\r\n}\r\n\r\n/**\r\n * 로그 데이터로부터 오류 패턴을 학습하여 예측 모델을 생성합니다.\r\n * \r\n * @param options - 오류 예측 학습 옵션\r\n * @returns 학습 결과\r\n */\r\nexport async function learnErrorPatterns(\r\n  options: ErrorPredictionOptions = {}\r\n): Promise<LearningResult> {\r\n  try {\r\n    logger.info('오류 패턴 학습 시작');\r\n    \r\n    // 기본값 설정\r\n    const minSampleSize = options.minSampleSize || 10;\r\n    const now = Date.now();\r\n    const startTime = options.timeRange?.startTime || now - 30 * 24 * 60 * 60 * 1000; // 기본 30일\r\n    const endTime = options.timeRange?.endTime || now;\r\n    \r\n    // 오류 로그 검색\r\n    const errorLogs = await searchLogs({\r\n      type: LogType.ERROR,\r\n      startTime,\r\n      endTime,\r\n      limit: 1000\r\n    });\r\n    \r\n    if (errorLogs.length < minSampleSize) {\r\n      logger.warn(`충분한 오류 로그 샘플이 없습니다. 필요: ${minSampleSize}, 현재: ${errorLogs.length}`);\r\n    }\r\n    \r\n    // 오류 메시지 분류\r\n    const errorGroups: ErrorGroups = {};\r\n    errorLogs.forEach(log => {\r\n      // 오류 메시지에서 핵심 부분만 추출\r\n      const errorMessage = log.content || '';\r\n      const errorType = getErrorType(errorMessage);\r\n      \r\n      if (!errorGroups[errorType]) {\r\n        errorGroups[errorType] = {\r\n          count: 0,\r\n          examples: [],\r\n          sessionIds: new Set()\r\n        };\r\n      }\r\n      \r\n      errorGroups[errorType].count++;\r\n      \r\n      // 최대 5개까지만 예시 저장\r\n      if (errorGroups[errorType].examples.length < 5) {\r\n        errorGroups[errorType].examples.push({\r\n          message: errorMessage,\r\n          timestamp: log.timestamp\r\n        });\r\n      }\r\n      \r\n      // 세션 ID가 있는 경우 추가\r\n      if (log.sessionId) {\r\n        errorGroups[errorType].sessionIds.add(log.sessionId);\r\n      }\r\n    });\r\n    \r\n    // 가장 빈번한 오류 추출\r\n    const topErrors = Object.entries(errorGroups)\r\n      .map(([type, data]) => ({\r\n        type,\r\n        count: data.count,\r\n        examples: data.examples,\r\n        uniqueSessions: data.sessionIds.size\r\n      }))\r\n      .sort((a, b) => b.count - a.count);\r\n    \r\n    // 시간대별 오류 발생 패턴\r\n    const hourlyErrors: Record<number, number> = {};\r\n    errorLogs.forEach(log => {\r\n      const date = new Date(log.timestamp);\r\n      const hour = date.getHours();\r\n      \r\n      hourlyErrors[hour] = (hourlyErrors[hour] || 0) + 1;\r\n    });\r\n    \r\n    // 가장 오류가 많은 시간대\r\n    const errorPeakHours = Object.entries(hourlyErrors)\r\n      .sort((a, b) => b[1] - a[1])\r\n      .slice(0, 3)\r\n      .map(([hour, count]) => ({ hour: parseInt(hour), count }));\r\n    \r\n    // 추천사항 생성\r\n    const recommendations = [];\r\n    \r\n    if (topErrors.length > 0) {\r\n      const topError = topErrors[0];\r\n      recommendations.push(`가장 빈번한 오류 \"${topError.type}\"에 대한 예외 처리를 강화하세요. (${topError.count}회 발생)`);\r\n      \r\n      if (topError.uniqueSessions > 3) {\r\n        recommendations.push(`\"${topError.type}\" 오류가 ${topError.uniqueSessions}개의 다른 세션에서 발생했습니다. 시스템적 문제일 가능성이 있습니다.`);\r\n      }\r\n    }\r\n    \r\n    if (errorPeakHours.length > 0) {\r\n      const formattedHours = errorPeakHours.map(h => `${h.hour}시`).join(', ');\r\n      recommendations.push(`${formattedHours}에 오류 발생률이 높습니다. 이 시간대에 추가 모니터링을 설정하세요.`);\r\n    }\r\n    \r\n    if (errorLogs.length > 50) {\r\n      const errorRate = (errorLogs.length / ((endTime - startTime) / (24 * 60 * 60 * 1000))).toFixed(2);\r\n      recommendations.push(`일평균 ${errorRate}개의 오류가 발생합니다. 오류 처리 로직을 검토하세요.`);\r\n    }\r\n    \r\n    // 학습 결과 반환\r\n    const result: LearningResult = {\r\n      modelType: LearningModelType.ERROR_PREDICTION,\r\n      timestamp: Date.now(),\r\n      insights: [\r\n        { type: 'topErrors', data: topErrors.slice(0, 5) },\r\n        { type: 'errorPeakHours', data: errorPeakHours },\r\n        { type: 'errorDistribution', data: Object.fromEntries(topErrors.slice(0, 10).map(e => [e.type, e.count])) }\r\n      ],\r\n      recommendations,\r\n      metrics: {\r\n        sampleSize: errorLogs.length,\r\n        uniqueErrorTypes: Object.keys(errorGroups).length,\r\n        mostFrequentErrorCount: topErrors.length > 0 ? topErrors[0].count : 0,\r\n        errorVarietyIndex: Object.keys(errorGroups).length / errorLogs.length\r\n      }\r\n    };\r\n    \r\n    logger.info('오류 패턴 학습 완료', { \r\n      sampleSize: errorLogs.length, \r\n      errorTypes: Object.keys(errorGroups).length \r\n    });\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    logger.error('오류 패턴 학습 중 오류:', error as Record<string, unknown>);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 여러 학습 결과를 통합하여 종합적인 최적화 추천을 생성합니다.\r\n * \r\n * @param results - 학습 결과 배열\r\n * @returns 통합된 추천사항 배열\r\n */\r\nexport function combineRecommendations(results: LearningResult[]): string[] {\r\n  // 모든 추천사항 수집\r\n  const allRecommendations = results.flatMap(result => result.recommendations);\r\n  \r\n  // 중복 제거 (유사한 추천사항 병합)\r\n  const uniqueRecommendations = [];\r\n  const addedKeywords = new Set();\r\n  \r\n  for (const rec of allRecommendations) {\r\n    // 문장에서 핵심 키워드 추출 (간단한 구현)\r\n    const keywords = rec.toLowerCase().replace(/[^\\w\\s가-힣]/g, ' ').split(/\\s+/).filter(w => w.length > 4);\r\n    \r\n    // 이미 유사한 키워드가 있는지 확인\r\n    let isDuplicate = false;\r\n    for (const keyword of keywords) {\r\n      if (addedKeywords.has(keyword)) {\r\n        isDuplicate = true;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (!isDuplicate) {\r\n      uniqueRecommendations.push(rec);\r\n      keywords.forEach(keyword => addedKeywords.add(keyword));\r\n    }\r\n  }\r\n  \r\n  return uniqueRecommendations;\r\n}\r\n\r\n/**\r\n * 에러 메시지에서 에러 타입을 추출합니다.\r\n * \r\n * @param errorMessage - 에러 메시지\r\n * @returns 추출된 에러 타입\r\n */\r\nfunction getErrorType(errorMessage: string): string {\r\n  // 일반적인 JavaScript 오류 패턴 확인\r\n  if (errorMessage.includes('TypeError:')) return 'TypeError';\r\n  if (errorMessage.includes('ReferenceError:')) return 'ReferenceError';\r\n  if (errorMessage.includes('SyntaxError:')) return 'SyntaxError';\r\n  if (errorMessage.includes('RangeError:')) return 'RangeError';\r\n  if (errorMessage.includes('NetworkError:') || errorMessage.includes('네트워크')) return 'NetworkError';\r\n  if (errorMessage.includes('API 요청 실패') || errorMessage.includes('API request failed')) return 'APIError';\r\n  if (errorMessage.includes('Permission denied') || errorMessage.includes('권한')) return 'PermissionError';\r\n  if (errorMessage.includes('not found') || errorMessage.includes('찾을 수 없음')) return 'NotFoundError';\r\n  if (errorMessage.includes('메모리') || errorMessage.includes('memory')) return 'MemoryError';\r\n  \r\n  // 특정 키워드로 분류\r\n  if (errorMessage.includes('undefined') || errorMessage.includes('null')) return 'NullError';\r\n  if (errorMessage.includes('promise') || errorMessage.includes('async')) return 'AsyncError';\r\n  if (errorMessage.includes('초과') || errorMessage.includes('limit') || errorMessage.includes('threshold')) return 'LimitExceededError';\r\n  \r\n  // 기본값 반환\r\n  return 'UnknownError';\r\n}\r\n\r\n/**\r\n * 최적의 가비지 컬렉션 간격을 계산합니다.\r\n * \r\n * @param memoryUsages - 메모리 사용량 데이터\r\n * @returns 최적의 GC 간격(ms) 또는 null\r\n */\r\nfunction calculateOptimalGCInterval(memoryUsages: any[]): number | null {\r\n  if (memoryUsages.length < 10) return null;\r\n  \r\n  // 메모리 사용량 증가 패턴 분석\r\n  const _timestamps = memoryUsages.map(u => u.timestamp);  // 사용하지 않는 변수에 _ 접두사 추가\r\n  const _memoryValues = memoryUsages.map(u => u.percentUsed);  // 사용하지 않는 변수에 _ 접두사 추가\r\n  \r\n  // 정렬\r\n  const sortedData = memoryUsages\r\n    .map((u, _i) => ({ timestamp: u.timestamp, value: u.percentUsed }))\r\n    .sort((a, b) => a.timestamp - b.timestamp);\r\n  \r\n  // 증가율 계산\r\n  const increases = [];\r\n  for (let i = 1; i < sortedData.length; i++) {\r\n    const timeDiff = sortedData[i].timestamp - sortedData[i-1].timestamp;\r\n    const valueDiff = sortedData[i].value - sortedData[i-1].value;\r\n    \r\n    if (valueDiff > 0 && timeDiff > 0) {\r\n      increases.push({\r\n        rate: valueDiff / timeDiff * 1000, // ms당 증가율을 초당 증가율로 변환\r\n        timeDiff\r\n      });\r\n    }\r\n  }\r\n  \r\n  if (increases.length < 5) return null;\r\n  \r\n  // 중앙값 계산\r\n  increases.sort((a, b) => a.rate - b.rate);\r\n  const medianRate = increases[Math.floor(increases.length / 2)].rate;\r\n  \r\n  // 메모리 사용량이 5% 증가하는데 걸리는 평균 시간 (밀리초)\r\n  const timeToIncrease5Percent = 5 / medianRate * 1000;\r\n  \r\n  // 적절한 GC 간격 = 메모리가 5% 증가하는 시간의 80%\r\n  // 이 값은 경험적으로 결정된 것이며, 상황에 따라 조정 가능\r\n  const suggestedInterval = Math.round(timeToIncrease5Percent * 0.8);\r\n  \r\n  // 합리적인 범위 내에 있는지 검증 (최소 10초, 최대 5분)\r\n  const minInterval = 10 * 1000;\r\n  const maxInterval = 5 * 60 * 1000;\r\n  \r\n  if (suggestedInterval < minInterval) return minInterval;\r\n  if (suggestedInterval > maxInterval) return maxInterval;\r\n  \r\n  return suggestedInterval;\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\log-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\math-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\media-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory-management.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory-optimizer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory-settings-bridge.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory-settings-manager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\cache-optimizer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\cache-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\constants\\memory-thresholds.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\dom-cleanup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\dom-optimizer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\emergency-recovery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\event-optimizer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\format-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\gc-types.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OptimizationResult' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 가비지 컬렉션 관련 타입 정의\r\n */\r\n\r\nimport { GCResult, OptimizationResult, OptimizationLevel } from '@/types';\r\n\r\n/**\r\n * GC 수행 옵션\r\n */\r\nexport interface GCOptions {\r\n  emergency?: boolean;\r\n  timeout?: number;\r\n  forceNative?: boolean;\r\n}\r\n\r\n/**\r\n * GC 확장 결과 타입\r\n */\r\nexport interface ExtendedGCResult extends GCResult {\r\n  source?: 'native' | 'js';\r\n  heapBefore?: number;\r\n  heapAfter?: number;\r\n  details?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * 이벤트 최적화 설정\r\n */\r\nexport interface EventOptimizationOptions {\r\n  cleanupDetachedEvents?: boolean;\r\n  cleanupDuplicateEvents?: boolean;\r\n  throttleFrequentEvents?: boolean;\r\n}\r\n\r\n/**\r\n * 리소스 최적화 설정\r\n */\r\nexport interface ResourceOptimizationOptions {\r\n  cleanupImages?: boolean;\r\n  cleanupDomElements?: boolean;\r\n  cleanupCaches?: boolean;\r\n  cleanupTimers?: boolean;\r\n}\r\n\r\n/**\r\n * 메모리 최적화 요청 옵션\r\n */\r\nexport interface MemoryOptimizationRequest {\r\n  level: OptimizationLevel;\r\n  emergency?: boolean;\r\n  componentId?: string;\r\n  source?: string;\r\n  eventOptions?: EventOptimizationOptions;\r\n  resourceOptions?: ResourceOptimizationOptions;\r\n}\r\n\r\n/**\r\n * 메모리 최적화 응답\r\n */\r\nexport interface MemoryOptimizationResponse {\r\n  success: boolean;\r\n  freedMemory?: number;\r\n  freedMB?: number;\r\n  duration?: number;\r\n  error?: string;\r\n  level: OptimizationLevel;\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * GC 결과 확장 인터페이스\r\n */\r\nexport interface DetailedGCResult extends GCResult {\r\n  optimizationLevel?: OptimizationLevel;\r\n  totalFreed?: number; // 총 해제된 메모리 (바이트)\r\n  durationMs?: number; // 소요된 시간 (밀리초)\r\n  actions?: string[]; // 수행된 작업 목록\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\gc-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'emergency' is defined but never used. Allowed unused args must match /^_/u.","line":360,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":360,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 가비지 컬렉션 유틸리티\r\n * \r\n * 메모리 정리 관련 기능을 제공합니다.\r\n */\r\n\r\nimport { GCResult } from '@/types';\r\nimport { requestNativeGarbageCollection } from '../native-memory-bridge';\r\n\r\n// 변수 및 상수 선언 추가\r\nlet lastGCTime = 0;\r\nconst MIN_GC_INTERVAL = 3000; // 3초\r\n\r\n/**\r\n * 브라우저 환경인지 확인하는 함수\r\n */\r\nexport const isBrowser = typeof window !== 'undefined';\r\n\r\n/**\r\n * 가비지 컬렉션 요청\r\n * 네이티브 모듈을 통해 GC를 수행합니다.\r\n * @returns GC 결과\r\n */\r\nexport async function requestGC(_emergency: boolean = false): Promise<GCResult | null> {\r\n  try {\r\n    return await requestNativeGarbageCollection();\r\n  } catch (error) {\r\n    console.error('가비지 컬렉션 요청 오류:', error);\r\n    return {\r\n      success: false,\r\n      freedMemory: 0,\r\n      freedMB: 0,\r\n      timestamp: Date.now(),\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류'\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 수동 메모리 정리 수행\r\n * JS 환경에서 가능한 메모리 정리 작업을 수행합니다.\r\n */\r\nexport async function cleanupMemory(): Promise<boolean> {\r\n  try {\r\n    // 브라우저 환경에서만 실행\r\n    if (!isBrowser) return false;\r\n\r\n    // 가능한 경우 global.gc 호출\r\n    if (typeof window.gc === 'function') {\r\n      window.gc();\r\n    }\r\n\r\n    // 미사용 이미지 캐시 정리\r\n    if (window.__imageResizeCache) {\r\n      window.__imageResizeCache.clear();\r\n    }\r\n\r\n    // 오브젝트 URL 정리\r\n    if (window.__objectUrls) {\r\n      for (const [_key, url] of window.__objectUrls) {\r\n        URL.revokeObjectURL(url);\r\n      }\r\n      window.__objectUrls.clear();\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('메모리 정리 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * 주기적인 메모리 정리 설정\r\n * @param interval 실행 간격(ms)\r\n * @returns 정리 함수\r\n */\r\nexport function setupPeriodicGC(interval: number = 60000): () => void {\r\n  const timerId = setInterval(async () => {\r\n    await requestGC(false);\r\n  }, interval);\r\n\r\n  return () => {\r\n    clearInterval(timerId);\r\n  };\r\n}\r\n\r\n/**\r\n * 가비지 컬렉션 제안 함수\r\n * \r\n * 브라우저 환경에서 가비지 컬렉션을 제안합니다.\r\n * window.gc가 있는 환경(크롬 --js-flags=\"--expose-gc\")에서만 작동합니다.\r\n */\r\nexport function suggestGarbageCollection(): void {\r\n  if (isBrowser) {\r\n    if (window.gc) {\r\n      window.gc();\r\n    } else {\r\n      // GC를 직접 호출할 수 없는 경우 간접적으로 메모리 압박을 가함\r\n      const now = Date.now();\r\n\r\n      // 너무 자주 호출되지 않도록 조절\r\n      if (now - lastGCTime < MIN_GC_INTERVAL) {\r\n        return;\r\n      }\r\n\r\n      lastGCTime = now;\r\n\r\n      // 메모리 할당 후 해제하여 GC 유도\r\n      try {\r\n        const arr = new Array(10000).fill({});\r\n        arr.length = 0;\r\n      } catch (e) {\r\n        console.warn('GC 간접 호출 중 오류:', e);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 브라우저 캐시 정리\r\n */\r\nexport async function clearBrowserCaches(): Promise<boolean> {\r\n  try {\r\n    if (!isBrowser) return false;\r\n\r\n    // 사용 가능한 캐시 API가 있으면 정리\r\n    if ('caches' in window) {\r\n      const cacheNames = await window.caches.keys();\r\n      await Promise.all(\r\n        cacheNames.map(cacheName => window.caches.delete(cacheName))\r\n      );\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('브라우저 캐시 정리 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * 브라우저 스토리지 정리\r\n */\r\nexport function clearStorageCaches(): boolean {\r\n  try {\r\n    if (!isBrowser) return false;\r\n\r\n    // 세션 스토리지는 완전히 정리\r\n    if (window.sessionStorage) {\r\n      window.sessionStorage.clear();\r\n    }\r\n\r\n    // 로컬 스토리지는 임시 데이터만 정리\r\n    if (window.localStorage) {\r\n      const keysToDelete: string[] = [];\r\n\r\n      for (let i = 0; i < window.localStorage.length; i++) {\r\n        const key = window.localStorage.key(i);\r\n        // null 체크 추가\r\n        if (key && (key.startsWith('temp_') || key.startsWith('cache_'))) {\r\n          keysToDelete.push(key);\r\n        }\r\n      }\r\n\r\n      keysToDelete.forEach(key => window.localStorage.removeItem(key));\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('스토리지 캐시 정리 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * 캐시 정리 유틸리티\r\n */\r\nexport function cleanCache(cacheType: string): boolean {\r\n  try {\r\n    if (!isBrowser) return false;\r\n\r\n    switch (cacheType) {\r\n      case 'local':\r\n        return cleanLocalStorageCache();\r\n      case 'session':\r\n        sessionStorage.clear();\r\n        return true;\r\n      case 'browser':\r\n        clearBrowserCaches();\r\n        return true;\r\n      case 'memory':\r\n        return cleanMemoryCache();\r\n      case 'all':\r\n        cleanLocalStorageCache();\r\n        sessionStorage.clear();\r\n        clearBrowserCaches();\r\n        cleanMemoryCache();\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  } catch (error) {\r\n    console.error(`캐시 정리 오류 (${cacheType}):`, error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * 로컬 스토리지 캐시 정리\r\n */\r\nfunction cleanLocalStorageCache(): boolean {\r\n  try {\r\n    // 임시 데이터만 정리\r\n    const keysToRemove: string[] = [];\r\n\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && (key.startsWith('cache_') || key.startsWith('temp_'))) {\r\n        keysToRemove.push(key);\r\n      }\r\n    }\r\n\r\n    keysToRemove.forEach(key => localStorage.removeItem(key));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('로컬 스토리지 캐시 정리 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * 메모리 캐시 정리\r\n */\r\nfunction cleanMemoryCache(): boolean {\r\n  try {\r\n    // 이미지 캐시 정리\r\n    if (window.__imageResizeCache) {\r\n      window.__imageResizeCache.clear();\r\n    }\r\n\r\n    // 오브젝트 URL 정리\r\n    if (window.__objectUrls) {\r\n      for (const [_key, url] of window.__objectUrls) {\r\n        URL.revokeObjectURL(url);\r\n      }\r\n      window.__objectUrls.clear();\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('메모리 캐시 정리 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * 비활성 캐시 정리\r\n */\r\nexport function cleanInactiveCaches(): boolean {\r\n  try {\r\n    if (!isBrowser) return false;\r\n\r\n    // 접근 시간 추적을 위한 메타데이터 키\r\n    const CACHE_ACCESS_KEY = 'cache_last_access';\r\n\r\n    // 현재 시간\r\n    const now = Date.now();\r\n\r\n    // 마지막 접근 시간 정보 로드\r\n    let accessInfo: Record<string, number> = {};\r\n    try {\r\n      const accessInfoJson = localStorage.getItem(CACHE_ACCESS_KEY);\r\n      if (accessInfoJson) {\r\n        accessInfo = JSON.parse(accessInfoJson);\r\n      }\r\n    } catch {\r\n      // 파싱 오류 무시, 빈 객체 사용\r\n    }\r\n\r\n    // 캐시 항목 스캔\r\n    const keysToCheck: string[] = [];\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && key.startsWith('cache_')) {\r\n        keysToCheck.push(key);\r\n      }\r\n    }\r\n\r\n    // 일정 시간 접근되지 않은 캐시 정리 (7일 이상)\r\n    const expiryTime = 7 * 24 * 60 * 60 * 1000; // 7일\r\n    const expiredKeys = keysToCheck.filter(key => {\r\n      const lastAccess = accessInfo[key] || 0;\r\n      return now - lastAccess > expiryTime;\r\n    });\r\n\r\n    // 만료된 키 제거\r\n    expiredKeys.forEach(key => {\r\n      localStorage.removeItem(key);\r\n      delete accessInfo[key];\r\n    });\r\n\r\n    // 접근 정보 업데이트\r\n    localStorage.setItem(CACHE_ACCESS_KEY, JSON.stringify(accessInfo));\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('비활성 캐시 정리 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * 모든 캐시 정리\r\n */\r\nexport function cleanAllCaches(): boolean {\r\n  try {\r\n    if (!isBrowser) return false;\r\n\r\n    // 세션 스토리지 정리\r\n    sessionStorage.clear();\r\n\r\n    // 로컬 스토리지에서 캐시 키 찾기\r\n    const cacheKeys: string[] = [];\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && (\r\n        key.startsWith('cache_') ||\r\n        key.startsWith('temp_') ||\r\n        key.includes('cache')\r\n      )) {\r\n        cacheKeys.push(key);\r\n      }\r\n    }\r\n\r\n    // 캐시 키 제거\r\n    cacheKeys.forEach(key => localStorage.removeItem(key));\r\n\r\n    // 메모리 내 캐시 정리\r\n    cleanMemoryCache();\r\n\r\n    // 브라우저 캐시 정리\r\n    clearBrowserCaches();\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('모든 캐시 정리 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// 윈도우 메모리 옵티마이저 초기화 부분 수정\r\nif (typeof window !== 'undefined') {\r\n  // 타입 안전한 방식으로 속성 초기화\r\n  if (!window.__memoryOptimizer) {\r\n    (window as any).__memoryOptimizer = {\r\n      suggestGarbageCollection: () => {\r\n        // 기존 구현\r\n      },\r\n      requestGC: async (emergency?: boolean) => {\r\n        // 기존 구현\r\n        return {};\r\n      },\r\n      clearBrowserCaches: async () => {\r\n        // 기존 구현\r\n        return true;\r\n      },\r\n      clearStorageCaches: () => {\r\n        // 기존 구현\r\n        return true;\r\n      },\r\n      checkMemoryUsage: () => {\r\n        // 기존 구현\r\n        return null;\r\n      },\r\n      forceGC: () => {\r\n        // 기존 구현\r\n        return true;\r\n      },\r\n      // cleanAllCaches 메서드 추가\r\n      cleanAllCaches: () => {\r\n        // 캐시 정리 로직 구현\r\n        return true;\r\n      }\r\n    };\r\n  }\r\n\r\n  // 옵셔널 체이닝 사용 + cleanAllCaches 대신 clearStorageCaches 사용\r\n  window.__memoryOptimizer?.clearStorageCaches?.();\r\n  window.__memoryOptimizer?.suggestGarbageCollection?.();\r\n  window.__memoryOptimizer?.requestGC?.();\r\n}\r\n\r\n// 매개변수 사용되지 않음 경고 수정 (이름 앞에 _ 추가)\r\nasync function _defaultRequestGC(_emergency?: boolean): Promise<any> {\r\n  return Promise.resolve();\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\gc\\cache-optimizer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":120,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":175,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":175,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 캐시 관련 최적화 모듈\r\n */\r\nimport { clearLargeObjectsAndCaches } from '../storage-cleaner';\r\n\r\n/**\r\n * 비활성 캐시 정리\r\n */\r\nexport function clearInactiveCache(): void {\r\n  // 캐시 정리 작업 구현\r\n  // 웹 애플리케이션에서 사용하는 임시 데이터 정리\r\n  if (window.caches) {\r\n    // 오래된 캐시 삭제 (선택적)\r\n    caches.keys().then(cacheNames => {\r\n      cacheNames.forEach(cacheName => {\r\n        if (cacheName.includes('temp') || cacheName.includes('nonessential')) {\r\n          caches.delete(cacheName);\r\n        }\r\n      });\r\n    }).catch(err => {\r\n      console.warn('캐시 정리 중 오류:', err);\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * 모든 낮은 우선순위 캐시 정리\r\n */\r\nexport function clearAllLowPriorityCache(): void {\r\n  // 낮은 우선순위 캐시 정리 작업 구현\r\n  try {\r\n    // 로컬 스토리지의 임시 항목 정리\r\n    if (window.localStorage) {\r\n      Object.keys(localStorage).forEach(key => {\r\n        if (key.startsWith('temp_') || key.startsWith('cache_')) {\r\n          localStorage.removeItem(key);\r\n        }\r\n      });\r\n    }\r\n\r\n    // 세션 스토리지의 임시 항목 정리\r\n    if (window.sessionStorage) {\r\n      Object.keys(sessionStorage).forEach(key => {\r\n        if (key.startsWith('temp_') || key.includes('cache')) {\r\n          sessionStorage.removeItem(key);\r\n        }\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.warn('우선순위가 낮은 캐시 정리 중 오류:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * 모든 캐시 정리\r\n */\r\nexport function clearAllCache(): void {\r\n  try {\r\n    // 브라우저 캐시 정리\r\n    clearBrowserCache();\r\n\r\n    // 애플리케이션 캐시 정리\r\n    clearAppCache();\r\n\r\n    console.log('모든 캐시 정리 완료');\r\n  } catch (error) {\r\n    console.error('캐시 정리 중 오류:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * 브라우저 캐시 정리 (가능한 경우)\r\n */\r\nfunction clearBrowserCache(): void {\r\n  try {\r\n    // sessionStorage 초기화 (이 세션 전용)\r\n    if (window.sessionStorage) {\r\n      sessionStorage.clear();\r\n    }\r\n\r\n    // Cache API를 사용하는 경우 (Service Worker 캐시 등)\r\n    if ('caches' in window) {\r\n      caches.keys().then(cacheNames => {\r\n        cacheNames.forEach(cacheName => {\r\n          // 앱 전용 캐시만 정리 (다른 웹사이트 캐시는 건드리지 않음)\r\n          if (cacheName.includes('typing-stats-app')) {\r\n            caches.delete(cacheName);\r\n          }\r\n        });\r\n      }).catch(e => console.warn('캐시 API 접근 오류:', e));\r\n    }\r\n  } catch (error) {\r\n    console.warn('브라우저 캐시 정리 중 오류:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * 애플리케이션 캐시 정리\r\n */\r\nfunction clearAppCache(): void {\r\n  try {\r\n    // 앱 정의 캐시 객체 정리\r\n\r\n    // 1. 이미지 변환 캐시\r\n    if (!window.__imageResizeCache) {\r\n      // 타입 캐스팅을 사용하여 타입 오류 해결\r\n      window.__imageResizeCache = new Map<string, any>();\r\n    } else {\r\n      // 기존 Map을 적절한 타입으로 다시 설정\r\n      const existingCache = window.__imageResizeCache;\r\n      window.__imageResizeCache = existingCache;\r\n    }\r\n\r\n    // 2. 객체 URL 캐시\r\n    if (window.__objectUrls) {\r\n      if (window.__objectUrls instanceof Map) {\r\n        window.__objectUrls.forEach(url => {\r\n          try {\r\n            URL.revokeObjectURL(url);\r\n          } catch (_e) {\r\n            // 무시 (사용하지 않는 변수 경고 수정)\r\n          }\r\n        });\r\n        window.__objectUrls.clear();\r\n      } else {\r\n        window.__objectUrls = new Map<string, string>();\r\n      }\r\n    }\r\n\r\n    // 3. 일반 메모리 캐시\r\n    if (window.__memoryCache) {\r\n      if (window.__memoryCache instanceof Map) {\r\n        window.__memoryCache.clear();\r\n      } else {\r\n        window.__memoryCache = new Map<string, any>();\r\n      }\r\n    }\r\n\r\n    // 4. 스타일 캐시\r\n    if (window.__styleCache) {\r\n      if (window.__styleCache instanceof Map) {\r\n        window.__styleCache.clear();\r\n      } else {\r\n        window.__styleCache = new Map<string, any>();\r\n      }\r\n    }\r\n\r\n    // 5. 위젯 캐시\r\n    if (window.__widgetCache) {\r\n      if (window.__widgetCache instanceof Map) {\r\n        window.__widgetCache.clear();\r\n      } else {\r\n        window.__widgetCache = new Map<string, any>();\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.warn('앱 캐시 정리 중 오류:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * 모든 캐시 해제 (가장 극단적인 조치)\r\n */\r\nexport function releaseAllCaches(): void {\r\n  // 모든 캐시 해제 작업 구현\r\n  try {\r\n    // IndexedDB 캐시 정리\r\n    if (window.indexedDB) {\r\n      window.indexedDB.databases().then(databases => {\r\n        databases.forEach(db => {\r\n          try {\r\n            if (db.name) { // null 체크 추가\r\n              window.indexedDB.deleteDatabase(db.name);\r\n            }\r\n          } catch (e) {\r\n            // 개별 DB 삭제 실패 처리\r\n          }\r\n        });\r\n      }).catch(err => {\r\n        console.warn('IndexedDB 정리 중 오류:', err);\r\n      });\r\n    }\r\n\r\n    // Storage API 정리\r\n    if (navigator.storage && navigator.storage.estimate) {\r\n      // 사용량 확인 후 필요시 정리\r\n      navigator.storage.estimate().then(estimate => {\r\n        if (estimate.usage && estimate.usage > 10 * 1024 * 1024) {\r\n          // 10MB 이상 사용 중인 경우 캐시 정리 시도\r\n          if (navigator.serviceWorker && navigator.serviceWorker.controller) {\r\n            // 서비스 워커에 캐시 정리 요청\r\n            navigator.serviceWorker.controller.postMessage({\r\n              type: 'CLEAR_ALL_CACHES'\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  } catch (_e) {\r\n    console.warn('모든 캐시 해제 중 오류:', _e);\r\n  }\r\n}\r\n\r\n/**\r\n * 스토리지 캐시 정리\r\n * localStorage, sessionStorage 등의 캐시 정리\r\n */\r\nexport function clearStorageCaches(): void {\r\n  try {\r\n    // 로컬 스토리지와 대형 객체 캐시 정리\r\n    clearLargeObjectsAndCaches();\r\n\r\n    // 추가 스토리지 캐시 정리 작업\r\n    if (window.sessionStorage) {\r\n      // 세션 스토리지 정리 (temp_ 또는 cache_ 시작하는 항목)\r\n      Object.keys(sessionStorage).forEach(key => {\r\n        if (key.startsWith('temp_') || key.startsWith('cache_')) {\r\n          sessionStorage.removeItem(key);\r\n        }\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.warn('스토리지 캐시 정리 중 오류:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * 오래된 캐시 항목만 정리\r\n */\r\nexport function clearOldCache(): void {\r\n  try {\r\n    // 일정 기간 이상 지난 캐시만 정리\r\n    const now = Date.now();\r\n    const CACHE_EXPIRY = 24 * 60 * 60 * 1000; // 24시간\r\n\r\n    // 메모리 캐시에서 오래된 항목 제거 - WeakMap은 forEach를 지원하지 않음\r\n    if (window.__memoryCache && window.__memoryCache instanceof Map) {\r\n      const keysToDelete: any[] = [];\r\n\r\n      window.__memoryCache.forEach((value, key) => {\r\n        if (value && typeof value === 'object' && value.timestamp) {\r\n          if (now - value.timestamp > CACHE_EXPIRY) {\r\n            keysToDelete.push(key);\r\n          }\r\n        }\r\n      });\r\n\r\n      keysToDelete.forEach(key => {\r\n        window.__memoryCache?.delete(key);\r\n      });\r\n    }\r\n\r\n    console.log('오래된 캐시 정리 완료');\r\n  } catch (error) {\r\n    console.warn('오래된 캐시 정리 중 오류:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * 캐시 최적화 기능\r\n * \r\n * 브라우저 환경에서 발생하는 다양한 캐시를 관리하고 최적화합니다.\r\n */\r\n\r\n// 브라우저 환경 확인\r\nconst isBrowser = typeof window !== 'undefined';\r\n\r\n// Window 인터페이스 확장\r\ndeclare global {\r\n  interface Window {\r\n    __imageResizeCache?: Map<string, string>;\r\n  }\r\n}\r\n\r\n/**\r\n * 글로벌 이미지 리사이징 캐시\r\n */\r\nif (isBrowser && !window.__imageResizeCache) {\r\n  window.__imageResizeCache = new Map<string, string>();\r\n}\r\n\r\n/**\r\n * 이미지 리사이즈 캐시 정리\r\n */\r\nexport function clearImageResizeCache(): number {\r\n  if (!isBrowser) return 0;\r\n\r\n  try {\r\n    const cacheSize = window.__imageResizeCache?.size || 0;\r\n    window.__imageResizeCache?.clear();\r\n    return cacheSize;\r\n  } catch (error) {\r\n    console.error('이미지 캐시 정리 중 오류:', error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * 미사용 폰트 정리\r\n */\r\nexport function cleanupUnusedFonts(): number {\r\n  if (!isBrowser) return 0;\r\n\r\n  let count = 0;\r\n  try {\r\n    // 문서에서 사용 중인 폰트 패밀리 수집\r\n    const usedFonts = new Set<string>();\r\n    document.querySelectorAll('*').forEach(el => {\r\n      const computedStyle = window.getComputedStyle(el);\r\n      const fontFamily = computedStyle.getPropertyValue('font-family');\r\n      if (fontFamily) {\r\n        fontFamily.split(',').forEach(font => {\r\n          usedFonts.add(font.trim().replace(/[\"']/g, ''));\r\n        });\r\n      }\r\n    });\r\n\r\n    // TODO: 불필요한 폰트 언로드 로직 추가\r\n\r\n    return count;\r\n  } catch (error) {\r\n    console.error('폰트 정리 중 오류:', error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * 테마 캐시 정리\r\n */\r\nexport function cleanupThemeCache(): number {\r\n  if (!isBrowser) return 0;\r\n\r\n  // 스타일시트 캐싱 관련 특정 구현을 제거\r\n  return 0;\r\n}\r\n\r\n/**\r\n * 서비스 워커 캐시 정리 요청\r\n */\r\nexport async function clearServiceWorkerCache(): Promise<number> {\r\n  if (!isBrowser) return 0;\r\n\r\n  try {\r\n    if (navigator.serviceWorker && navigator.serviceWorker.controller) {\r\n      navigator.serviceWorker.controller.postMessage({ type: 'CLEAR_CACHES' });\r\n      return 1;\r\n    }\r\n    return 0;\r\n  } catch (error) {\r\n    console.error('서비스 워커 캐시 정리 중 오류:', error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * 모든 캐시 정리\r\n * 모든 종류의 캐시를 정리하고 항목 수 반환\r\n */\r\nexport function cleanupCache(aggressive: boolean = false): number {\r\n  let count = 0;\r\n\r\n  // 이미지 리사이징 캐시 정리\r\n  count += clearImageResizeCache();\r\n\r\n  // 테마 캐시 정리\r\n  count += cleanupThemeCache();\r\n\r\n  // 공격적 모드일 때만 수행할 작업\r\n  if (aggressive) {\r\n    count += cleanupUnusedFonts();\r\n    clearServiceWorkerCache().catch(err =>\r\n      console.warn('서비스 워커 캐시 정리 실패:', err)\r\n    );\r\n  }\r\n\r\n  return count;\r\n}\r\n\r\n/**\r\n * 낮은 우선순위 캐시 정리\r\n */\r\nexport function cleanupLowPriorityCache(): number {\r\n  return cleanupCache(false);\r\n}\r\n\r\n/**\r\n * 긴급 상황용 모든 캐시 정리\r\n */\r\nexport function cleanupAllCache(): number {\r\n  return cleanupCache(true);\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\gc\\dom-cleanup-util.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\gc\\dom-cleanup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\gc\\dom-optimizer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\gc\\emergency-recovery.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_err' is defined but never used.","line":243,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":243,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'force' is assigned a value but never used. Allowed unused args must match /^_/u.","line":340,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":340,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 응급 메모리 복구 기능\r\n * \r\n * 메모리 부족 상황에서 사용 가능한 비상 복구 기능을 제공합니다.\r\n */\r\n\r\n/**\r\n * 응급 메모리 복구 수행\r\n * \r\n * 위험한 수준의 메모리 사용량이 감지될 때 호출되어 메모리를 확보합니다.\r\n * \r\n * @returns {boolean} 복구 성공 여부\r\n */\r\nexport function performEmergencyRecovery(): boolean {\r\n  console.warn('[메모리 비상] 응급 메모리 복구 기능 실행');\r\n\r\n  try {\r\n    // 1. 이벤트 리스너 정리\r\n    cleanupEventListeners();\r\n\r\n    // 2. DOM 리소스 정리\r\n    cleanupDomResources();\r\n\r\n    // 3. 캐시 정리\r\n    clearAllCaches();\r\n\r\n    // 4. 타이머 정리\r\n    clearTimers();\r\n\r\n    // 5. 가비지 컬렉션 유도\r\n    if (typeof window !== 'undefined' && window.gc) {\r\n      window.gc();\r\n    } else {\r\n      forceGarbageCollection();\r\n    }\r\n\r\n    // 진단 정보 수집\r\n    const diagnostics = collectMemoryDiagnostics();\r\n    console.log('[메모리 비상] 진단 정보:', diagnostics);\r\n\r\n    // 앱 복구 유틸리티에 진단 정보 등록\r\n    if (typeof window !== 'undefined' && window.__appRecovery) {\r\n      (window.__appRecovery as any).diagnostics = () => collectMemoryDiagnostics();\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('[메모리 비상] 응급 복구 중 오류 발생:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * DOM 리소스 정리\r\n * \r\n * 불필요한 DOM 요소를 제거하여 메모리를 확보합니다.\r\n */\r\nfunction cleanupDomResources(): void {\r\n  if (typeof document === 'undefined') return;\r\n\r\n  try {\r\n    // 숨겨진 이미지 및 미사용 요소 제거\r\n    const hiddenElements = document.querySelectorAll('.hidden, [aria-hidden=\"true\"], [style*=\"display: none\"]');\r\n    hiddenElements.forEach((el) => {\r\n      // 중요하지 않은 요소만 제거\r\n      if (!el.classList.contains('critical') && !el.hasAttribute('data-preserve')) {\r\n        el.parentNode?.removeChild(el);\r\n      }\r\n    });\r\n\r\n    // 이미지 src 정리\r\n    const unusedImages = document.querySelectorAll('img:not(:visible)');\r\n    unusedImages.forEach((img) => {\r\n      if (img instanceof HTMLImageElement && !img.hasAttribute('data-preserve')) {\r\n        // 참조를 임시 data-src에 저장하고 원본 src 제거\r\n        img.setAttribute('data-src', img.src);\r\n        img.removeAttribute('src');\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.warn('[메모리 비상] DOM 정리 중 오류:', e);\r\n  }\r\n}\r\n\r\n/**\r\n * 모든 캐시 정리\r\n * \r\n * 브라우저 캐시 및 애플리케이션 캐시를 정리합니다.\r\n */\r\nfunction clearAllCaches(): void {\r\n  if (typeof window === 'undefined') return;\r\n\r\n  try {\r\n    // 브라우저 캐시 API가 있으면 정리\r\n    if ('caches' in window) {\r\n      caches.keys().then(cacheNames => {\r\n        cacheNames.forEach(name => {\r\n          caches.delete(name);\r\n        });\r\n      });\r\n    }\r\n\r\n    // 애플리케이션 캐시 정리\r\n    if (window.__imageResizeCache) {\r\n      // 타입 단언을 사용하여 충돌 해결\r\n      (window.__imageResizeCache as Map<string, any>).clear();\r\n    }\r\n\r\n    if (window.__objectUrls) {\r\n      for (const [_key, url] of window.__objectUrls) {\r\n        URL.revokeObjectURL(url);\r\n      }\r\n      window.__objectUrls.clear();\r\n    }\r\n\r\n    // LocalStorage 임시 데이터 정리\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && (key.startsWith('temp_') || key.startsWith('cache_'))) {\r\n        localStorage.removeItem(key);\r\n      }\r\n    }\r\n\r\n    // SessionStorage 정리\r\n    sessionStorage.clear();\r\n  } catch (e) {\r\n    console.warn('[메모리 비상] 캐시 정리 중 오류:', e);\r\n  }\r\n}\r\n\r\n/**\r\n * 불필요한 이벤트 리스너 정리\r\n * \r\n * 불필요한 이벤트 리스너를 제거하여 메모리 누수를 방지합니다.\r\n */\r\nfunction cleanupEventListeners(): void {\r\n  if (typeof window === 'undefined') return;\r\n\r\n  try {\r\n    // 낮은 우선순위 이벤트 리스너 정리\r\n    const lowPriorityEvents = ['mousemove', 'resize', 'scroll'];\r\n\r\n    lowPriorityEvents.forEach(eventType => {\r\n      // 전역 이벤트 리스너 래핑 (직접적인 제거는 위험함)\r\n      const originalAddEventListener = window.addEventListener;\r\n      window.addEventListener = function (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) {\r\n        if (type === eventType) {\r\n          console.log(`[메모리 비상] ${eventType} 이벤트 리스너 추가 차단됨`);\r\n          return;\r\n        }\r\n        return originalAddEventListener.call(this, type, listener, options);\r\n      };\r\n    });\r\n\r\n    // 이벤트 리스너 최적화 모듈 사용 (있는 경우)\r\n    // 타입 확장을 위한 인터페이스 사용\r\n    const memOptimizer = window.__memoryOptimizer as any;\r\n    if (memOptimizer && typeof memOptimizer.optimizeEventListeners === 'function') {\r\n      memOptimizer.optimizeEventListeners();\r\n    }\r\n  } catch (e) {\r\n    console.warn('[메모리 비상] 이벤트 리스너 정리 중 오류:', e);\r\n  }\r\n}\r\n\r\n/**\r\n * 불필요한 타이머를 정리하여 메모리와 CPU 사용량을 줄입니다.\r\n */\r\nfunction clearTimers(): void {\r\n  if (typeof window === 'undefined') return;\r\n\r\n  try {\r\n    // 알려진 타이머 ID 정리\r\n    const memOptimizer = window.__memoryOptimizer as any;\r\n    const timerIds = memOptimizer?.timerIds;\r\n\r\n    if (timerIds && Array.isArray(timerIds)) {\r\n      timerIds.forEach((id: number) => {\r\n        clearTimeout(id);\r\n        clearInterval(id);\r\n      });\r\n      timerIds.length = 0;\r\n    }\r\n  } catch (e) {\r\n    console.warn('[메모리 비상] 타이머 정리 중 오류:', e);\r\n  }\r\n}\r\n\r\n/**\r\n * 메모리 진단 정보 수집\r\n * \r\n * 현재 메모리 사용 상태에 대한 진단 정보를 수집합니다.\r\n * \r\n * @returns {Record<string, unknown>} 진단 정보\r\n */\r\nexport function collectMemoryDiagnostics(): Record<string, unknown> {\r\n  if (typeof window === 'undefined') return {};\r\n\r\n  try {\r\n    // 메모리 정보 수집\r\n    const memoryInfo: Record<string, unknown> = {};\r\n\r\n    // 브라우저 메모리 API (Chrome 전용)\r\n    if ((performance as any).memory) {\r\n      const { totalJSHeapSize, usedJSHeapSize, jsHeapSizeLimit } = (performance as any).memory;\r\n      memoryInfo.browser = {\r\n        totalHeap: totalJSHeapSize,\r\n        usedHeap: usedJSHeapSize,\r\n        heapLimit: jsHeapSizeLimit,\r\n        percentUsed: (usedJSHeapSize / totalJSHeapSize) * 100\r\n      };\r\n    }\r\n\r\n    // DOM 크기\r\n    memoryInfo.dom = {\r\n      elements: document.querySelectorAll('*').length,\r\n      images: document.querySelectorAll('img').length,\r\n      scripts: document.querySelectorAll('script').length,\r\n      styleSheets: document.styleSheets.length\r\n    };\r\n\r\n    // 스토리지 사용량\r\n    memoryInfo.storage = {\r\n      localStorage: localStorage.length,\r\n      sessionStorage: sessionStorage.length\r\n    };\r\n\r\n    // 이벤트 리스너 수 (추정)\r\n    const allElements = document.querySelectorAll('*');\r\n    let listenerCount = 0;\r\n\r\n    if ((window as any).getEventListeners) {\r\n      // Chrome 개발자 도구에서 제공하는 getEventListeners 사용\r\n      try {\r\n        // 타입 안전하게 수정\r\n        const windowListeners = (window as any).getEventListeners(window) || {};\r\n        const documentListeners = (window as any).getEventListeners(document) || {};\r\n        const bodyListeners = (window as any).getEventListeners(document.body) || {};\r\n\r\n        listenerCount += Object.values(windowListeners).length;\r\n        listenerCount += Object.values(documentListeners).length;\r\n        listenerCount += Object.values(bodyListeners).length;\r\n      } catch (_err) {\r\n        // getEventListeners 호출 실패 시 무시\r\n      }\r\n    } else {\r\n      // 추정: 요소당 평균 0.5개 리스너로 계산\r\n      listenerCount = Math.round(allElements.length * 0.5);\r\n    }\r\n\r\n    memoryInfo.listeners = {\r\n      estimated: listenerCount,\r\n      window: window.onresize || window.onload ? 'has listeners' : 'no direct listeners',\r\n      document: document.onclick || document.onkeydown ? 'has listeners' : 'no direct listeners',\r\n      body: document.body.onclick ? 'has listeners' : 'no direct listeners'\r\n    };\r\n\r\n    return {\r\n      timestamp: Date.now(),\r\n      ...memoryInfo\r\n    };\r\n  } catch (error) {\r\n    console.error('[메모리 비상] 진단 정보 수집 중 오류:', error);\r\n    return {\r\n      error: String(error),\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 강제 가비지 컬렉션 유도\r\n * \r\n * gc 함수가 노출되지 않은 환경에서 간접적으로 GC를 유도합니다.\r\n */\r\nfunction forceGarbageCollection(): void {\r\n  try {\r\n    // 대량 객체 생성 후 해제하여 GC 유도\r\n    const objects: Record<string, unknown>[] = [];\r\n    for (let i = 0; i < 10000; i++) {\r\n      objects.push({ index: i, data: new Array(100).fill('x') });\r\n    }\r\n    // 참조 제거\r\n    objects.length = 0;\r\n\r\n    // 대량 배열 생성 후 해제\r\n    const arr = new Array(1000000).fill(0);\r\n    // 참조 제거\r\n    arr.length = 0;\r\n\r\n    // 추가 메모리 압박\r\n    setTimeout(() => {\r\n      // 임시 대량 객체\r\n      const tempObjects: unknown[] = [];\r\n      for (let i = 0; i < 1000; i++) {\r\n        tempObjects.push({ data: new Array(1000).fill('temp') });\r\n      }\r\n      // 10ms 후 참조 해제\r\n      setTimeout(() => {\r\n        tempObjects.length = 0;\r\n      }, 10);\r\n    }, 0);\r\n  } catch (e) {\r\n    console.warn('[메모리 비상] GC 유도 중 오류:', e);\r\n  }\r\n}\r\n\r\n// 애플리케이션 복구 유틸리티를 전역 객체에 노출\r\nif (typeof window !== 'undefined') {\r\n  // 타입 안전한 방식으로 속성 초기화\r\n  if (!window.__appRecovery) {\r\n    (window as any).__appRecovery = {};\r\n  }\r\n\r\n  // 타입 단언을 사용하여 충돌 해결\r\n  const appRecovery = window.__appRecovery as any;\r\n\r\n  appRecovery.emergencyCleanup = performEmergencyRecovery;\r\n  appRecovery.diagnostics = collectMemoryDiagnostics;\r\n  appRecovery.optimizeMemory = (level: number): boolean => {\r\n    try {\r\n      if (level >= 3) {\r\n        performEmergencyRecovery();\r\n      } else {\r\n        clearAllCaches();\r\n        clearTimers();\r\n      }\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * 긴급 메모리 복구 함수\r\n * @param force 강제 실행 여부\r\n * @returns 복구 결과\r\n */\r\nexport function emergencyRecovery(force: boolean = false): {\r\n  success: boolean;\r\n  freedMB: number;\r\n  actions: string[];\r\n} {\r\n  try {\r\n    const actions: string[] = [];\r\n    let freedMB = 0;\r\n\r\n    // 1. 가비지 컬렉션 요청\r\n    if (typeof window !== 'undefined' && window.gc) {\r\n      window.gc();\r\n      actions.push('garbage_collection');\r\n      freedMB += 10;\r\n    }\r\n\r\n    // 2. 로컬 스토리지 정리\r\n    if (typeof localStorage !== 'undefined') {\r\n      try {\r\n        const tempItems = [];\r\n        for (let i = 0; i < localStorage.length; i++) {\r\n          const key = localStorage.key(i);\r\n          if (key && key.startsWith('temp_')) {\r\n            tempItems.push(key);\r\n          }\r\n        }\r\n\r\n        tempItems.forEach(key => localStorage.removeItem(key));\r\n\r\n        if (tempItems.length > 0) {\r\n          actions.push('localStorage_cleanup');\r\n          freedMB += 0.5;\r\n        }\r\n      } catch (e) {\r\n        console.error('로컬 스토리지 정리 오류:', e);\r\n      }\r\n    }\r\n\r\n    // 3. 세션 스토리지 정리\r\n    if (typeof sessionStorage !== 'undefined') {\r\n      try {\r\n        const tempItems = [];\r\n        for (let i = 0; i < sessionStorage.length; i++) {\r\n          const key = sessionStorage.key(i);\r\n          if (key && key.startsWith('temp_')) {\r\n            tempItems.push(key);\r\n          }\r\n        }\r\n\r\n        tempItems.forEach(key => sessionStorage.removeItem(key));\r\n\r\n        if (tempItems.length > 0) {\r\n          actions.push('sessionStorage_cleanup');\r\n          freedMB += 0.3;\r\n        }\r\n      } catch (e) {\r\n        console.error('세션 스토리지 정리 오류:', e);\r\n      }\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      freedMB,\r\n      actions\r\n    };\r\n  } catch (error) {\r\n    console.error('긴급 복구 오류:', error);\r\n    return {\r\n      success: false,\r\n      freedMB: 0,\r\n      actions: ['recovery_failed']\r\n    };\r\n  }\r\n}\r\n\r\nexport default {\r\n  emergencyRecovery\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\gc\\event-optimizer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":189,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":189,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 이벤트 관련 메모리 최적화\r\n * 과도한 이벤트 리스너와 관련된 메모리 누수 방지\r\n */\r\n\r\nimport { debounce } from 'lodash';\r\n\r\ntype _EventHandler = () => void; // 사용되지 않는 타입에 _ 접두사 추가\r\ntype EventCleanupHandler = () => void;\r\ntype EventCleanupRegistry = Map<string, EventCleanupHandler[]>;\r\n\r\n// 이벤트 핸들러 등록 관리\r\nconst eventCleanupRegistry: EventCleanupRegistry = new Map();\r\n// 사용되지 않는 변수 제거: const globalHandlers = {};\r\n\r\n/**\r\n * 최적화된 이벤트 리스너 등록\r\n * @param element DOM 엘리먼트\r\n * @param eventType 이벤트 타입\r\n * @param handler 이벤트 핸들러\r\n * @param options 이벤트 리스너 옵션\r\n * @returns 정리 함수\r\n */\r\nexport function registerOptimizedEventListener(\r\n  element: HTMLElement | Window | Document,\r\n  eventType: string,\r\n  handler: EventListenerOrEventListenerObject,\r\n  options?: AddEventListenerOptions | boolean\r\n): EventCleanupHandler {\r\n  // 요소와 핸들러가 있는지 확인\r\n  if (!element || !handler) {\r\n    console.warn('Invalid element or handler for event registration');\r\n    return () => { }; // No-op cleanup function\r\n  }\r\n\r\n  // 이벤트 리스너 등록\r\n  element.addEventListener(eventType, handler, options);\r\n\r\n  // 정리 함수 생성\r\n  const cleanup = () => {\r\n    element.removeEventListener(eventType, handler, options);\r\n  };\r\n\r\n  // 등록된 정리 함수를 등록\r\n  const key = getElementKey(element);\r\n\r\n  if (!eventCleanupRegistry.has(key)) {\r\n    eventCleanupRegistry.set(key, []);\r\n  }\r\n\r\n  const cleanupHandlers = eventCleanupRegistry.get(key)!;\r\n  cleanupHandlers.push(cleanup);\r\n\r\n  return cleanup;\r\n}\r\n\r\n/**\r\n * 디바운스된 이벤트 핸들러 생성\r\n * @param handler 원본 핸들러\r\n * @param wait 대기 시간\r\n * @returns 디바운스된 핸들러\r\n */\r\nexport function createDebouncedEventHandler<T extends (...args: any[]) => void>(\r\n  handler: T,\r\n  wait: number\r\n): T {\r\n  return debounce(handler, wait) as unknown as T;\r\n}\r\n\r\n/**\r\n * 특정 요소의 모든 이벤트 리스너 정리\r\n * @param element DOM 엘리먼트\r\n */\r\nexport function cleanupAllEventListeners(element: HTMLElement | Window | Document): void {\r\n  const key = getElementKey(element);\r\n  const cleanupHandlers = eventCleanupRegistry.get(key);\r\n\r\n  if (cleanupHandlers && cleanupHandlers.length > 0) {\r\n    // 모든 정리 함수 실행\r\n    cleanupHandlers.forEach(cleanup => cleanup());\r\n\r\n    // 정리 함수 목록 비우기\r\n    eventCleanupRegistry.set(key, []);\r\n  }\r\n}\r\n\r\n/**\r\n * 요소에 대한 고유 키 생성\r\n */\r\nfunction getElementKey(element: HTMLElement | Window | Document): string {\r\n  if (element === window) {\r\n    return 'window';\r\n  } else if (element === document) {\r\n    return 'document';\r\n  } else if (element instanceof HTMLElement) {\r\n    // ID가 있으면 사용, 없으면 태그명과 클래스 사용\r\n    const id = element.id || '';\r\n    const tagName = element.tagName || '';\r\n    const classes = element.className || '';\r\n\r\n    return `${tagName}#${id}.${classes}`;\r\n  } else {\r\n    return String(Math.random()); // 폴백\r\n  }\r\n}\r\n\r\n/**\r\n * 메모리 누수 방지를 위한 이벤트 최적화\r\n */\r\nexport function optimizeEvents(): void {\r\n  // 현재 등록된 모든 이벤트 정리 핸들러 수 확인\r\n  let totalHandlers = 0;\r\n  for (const handlers of eventCleanupRegistry.values()) {\r\n    totalHandlers += handlers.length;\r\n  }\r\n\r\n  console.log(`Current event handlers registered: ${totalHandlers}`);\r\n\r\n  // 지나치게 많은 핸들러가 등록되어 있다면 경고\r\n  if (totalHandlers > 100) {\r\n    console.warn('High number of event handlers detected. Consider cleaning up unused listeners.');\r\n  }\r\n}\r\n\r\n/**\r\n * 스크롤 이벤트 최적화\r\n * @param handler 스크롤 이벤트 핸들러\r\n * @param wait 디바운스 대기 시간\r\n * @returns 정리 함수\r\n */\r\nexport function registerOptimizedScrollListener(\r\n  handler: (event: Event) => void,\r\n  wait = 100\r\n): EventCleanupHandler {\r\n  // 디바운스된 핸들러 생성\r\n  const debouncedHandler = createDebouncedEventHandler(handler, wait);\r\n\r\n  // 스크롤 이벤트 리스너 등록 (passive true로 성능 최적화)\r\n  return registerOptimizedEventListener(\r\n    window,\r\n    'scroll',\r\n    debouncedHandler,\r\n    { passive: true }\r\n  );\r\n}\r\n\r\n/**\r\n * 리사이즈 이벤트 최적화\r\n * @param handler 리사이즈 이벤트 핸들러\r\n * @param wait 디바운스 대기 시간\r\n * @returns 정리 함수\r\n */\r\nexport function registerOptimizedResizeListener(\r\n  handler: (event: Event) => void, // Event 타입으로 변경\r\n  wait = 200\r\n): EventCleanupHandler {\r\n  // 디바운스된 핸들러 생성\r\n  const debouncedHandler = createDebouncedEventHandler(handler, wait);\r\n\r\n  // 리사이즈 이벤트 리스너 등록\r\n  return registerOptimizedEventListener(window, 'resize', debouncedHandler);\r\n}\r\n\r\n/**\r\n * 이벤트 최적화 모듈 - ES 모듈 방식으로 내보내기\r\n */\r\nexport default {\r\n  registerOptimizedEventListener,\r\n  createDebouncedEventHandler,\r\n  cleanupAllEventListeners,\r\n  optimizeEvents,\r\n  registerOptimizedScrollListener,\r\n  registerOptimizedResizeListener\r\n};\r\n\r\n/**\r\n * 페이지 언로드 시 남아있는 모든 핸들러 정리\r\n */\r\nif (typeof window !== 'undefined') {\r\n  window.addEventListener('beforeunload', () => {\r\n    try {\r\n      // 모든 등록된 정리 함수 실행\r\n      for (const [_key, handlers] of eventCleanupRegistry.entries()) {\r\n        handlers.forEach(cleanup => cleanup());\r\n      }\r\n\r\n      // 등록 정보 초기화\r\n      eventCleanupRegistry.clear();\r\n    } catch (_e) {  // 변수명에 _ 접두사 추가\r\n      // 언로드 중 오류는 무시\r\n    }\r\n  });\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\gc\\garbage-collector.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":275,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":275,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 가비지 컬렉션 유틸리티\r\n * \r\n * 메모리 GC 및 최적화 기능을 제공합니다.\r\n */\r\n\r\nimport { OptimizationLevel, GCResult } from '@/types';\r\nimport { MemoryInfo } from '@/types';\r\nimport { MEMORY_THRESHOLDS } from '../constants/memory-thresholds';\r\nimport { getMemoryUsage } from '../memory-info';\r\nimport { logInfo, logError } from '../../log-utils';\r\n\r\n// 마지막 GC 시간 추적\r\nlet lastGCTime = 0;\r\nconst MIN_GC_INTERVAL = MEMORY_THRESHOLDS.MIN_GC_INTERVAL; // 30초\r\n\r\n/**\r\n * 메모리 정보 확인 또는 생성\r\n */\r\nexport async function ensureMemoryInfo(): Promise<MemoryInfo> {\r\n  try {\r\n    const info = await getMemoryUsage();\r\n    if (info) {\r\n      return info;\r\n    }\r\n  } catch (error) {\r\n    console.error('메모리 정보 가져오기 실패:', error);\r\n  }\r\n\r\n  // 오류 발생 시 기본값 반환\r\n  return {\r\n    heap_used: 0,\r\n    heapUsed: 0,\r\n    heap_total: 0,\r\n    heapTotal: 0,\r\n    heap_used_mb: 0,\r\n    heapUsedMB: 0,\r\n    rss: 0,\r\n    rss_mb: 0,\r\n    rssMB: 0,\r\n    percent_used: 0,\r\n    percentUsed: 0,\r\n    heap_limit: 0,\r\n    timestamp: Date.now()\r\n  };\r\n}\r\n\r\n/**\r\n * 최적화 레벨 결정\r\n */\r\nexport function determineOptimizationLevel(info: MemoryInfo): OptimizationLevel {\r\n  const usedMB = info.heap_used_mb;\r\n\r\n  if (usedMB < MEMORY_THRESHOLDS.LOW) {\r\n    return OptimizationLevel.NONE;\r\n  } else if (usedMB < MEMORY_THRESHOLDS.MEDIUM) {\r\n    return OptimizationLevel.LOW;\r\n  } else if (usedMB < MEMORY_THRESHOLDS.HIGH) {\r\n    return OptimizationLevel.MEDIUM;\r\n  } else if (usedMB < MEMORY_THRESHOLDS.CRITICAL) {\r\n    return OptimizationLevel.HIGH;\r\n  } else {\r\n    return OptimizationLevel.CRITICAL;\r\n  }\r\n}\r\n\r\n/**\r\n * 기본 GC 수행\r\n */\r\nexport async function performGC(emergency: boolean = false): Promise<GCResult> {\r\n  console.log(`[GC] ${emergency ? '긴급' : '기본'} 가비지 컬렉션 요청`);\r\n\r\n  // 네이티브 GC 함수 호출 시도\r\n  if (window.gc) {\r\n    try {\r\n      console.log('[GC] 네이티브 GC 함수 호출 시도');\r\n      window.gc();\r\n      console.log('[GC] 네이티브 GC 성공');\r\n\r\n      return {\r\n        success: true,\r\n        freedMemory: 0, // 실제 해제된 메모리는 알 수 없음\r\n        freedMB: 0,\r\n        duration: 0,\r\n        timestamp: Date.now()\r\n      };\r\n    } catch (error) {\r\n      console.error('[GC] 네이티브 GC 함수 호출 실패:', error);\r\n    }\r\n  }\r\n\r\n  // GC를 유도하기 위한 대안 방법\r\n  try {\r\n    const memoryBefore = await ensureMemoryInfo();\r\n\r\n    // 마지막 GC 이후 최소 간격 확인\r\n    const now = Date.now();\r\n    if (now - lastGCTime < MIN_GC_INTERVAL && !emergency) {\r\n      console.warn(`[GC] 최소 간격(${MIN_GC_INTERVAL}ms) 내에 GC 요청, 생략됨`);\r\n      return {\r\n        success: false,\r\n        freedMemory: 0,\r\n        freedMB: 0,\r\n        duration: 0,\r\n        timestamp: now,\r\n        error: '최소 GC 간격 내에 요청됨'\r\n      };\r\n    }\r\n\r\n    console.log('[GC] 대체 GC 전략 시도');\r\n    const startTime = performance.now();\r\n\r\n    // 대규모 임시 메모리 할당 후 해제 (GC 유도)\r\n    const size = emergency ? 100 * 1024 * 1024 : 10 * 1024 * 1024; // 100MB or 10MB\r\n    const tempArrays = [];\r\n\r\n    // 여러 개의 큰 배열 생성\r\n    const arrayCount = emergency ? 5 : 2;\r\n    for (let i = 0; i < arrayCount; i++) {\r\n      tempArrays.push(new Array(size).fill(0));\r\n    }\r\n\r\n    // 배열 해제\r\n    tempArrays.length = 0;\r\n\r\n    // 추가 GC 유도\r\n    if (emergency) {\r\n      // 추가 임시 객체 생성 및 해제\r\n      for (let i = 0; i < 10; i++) {\r\n        const tempObj = {};\r\n        for (let j = 0; j < 1000; j++) {\r\n          (tempObj as any)[`key_${j}`] = new Array(1000).fill(j);\r\n        }\r\n      }\r\n    }\r\n\r\n    const endTime = performance.now();\r\n    const duration = endTime - startTime;\r\n\r\n    // 메모리 상태 다시 확인\r\n    const memoryAfter = await ensureMemoryInfo();\r\n\r\n    // 해제된 메모리 계산\r\n    const freedMemory = Math.max(0, memoryBefore.heap_used - memoryAfter.heap_used);\r\n    const freedMB = freedMemory / (1024 * 1024);\r\n\r\n    // GC 시간 업데이트\r\n    lastGCTime = now;\r\n\r\n    console.log(`[GC] 메모리 해제됨: ${freedMB.toFixed(2)}MB, 소요시간: ${duration.toFixed(2)}ms`);\r\n\r\n    return {\r\n      success: true,\r\n      freedMemory: freedMemory,\r\n      freedMB: freedMB,\r\n      duration,\r\n      timestamp: now\r\n    };\r\n  } catch (error) {\r\n    console.error('[GC] 대체 GC 전략 실패:', error);\r\n    return {\r\n      success: false,\r\n      freedMemory: 0,\r\n      freedMB: 0,\r\n      duration: 0,\r\n      timestamp: Date.now(),\r\n      error: error instanceof Error ? error.message : String(error)\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * GC 수행 횟수 및 마지막 GC 시간 조회 함수\r\n */\r\nexport function getGCStats() {\r\n  return {\r\n    lastGCTime,\r\n    totalGCCalls: 0 // 실제 구현에서는 카운터 추가\r\n  };\r\n}\r\n\r\n/**\r\n * 마지막 GC 시간 조회\r\n */\r\nexport function getLastGCTime(): number {\r\n  return lastGCTime;\r\n}\r\n\r\n/**\r\n * 총 GC 수행 횟수 조회\r\n */\r\nexport function getTotalGCCount(): number {\r\n  return 0; // 실제 구현에서는 카운터 추가\r\n}\r\n\r\n/**\r\n * 가비지 컬렉션 제안\r\n * @param emergency 긴급 모드 여부\r\n */\r\nexport async function suggestGC(emergency: boolean = false): Promise<GCResult> {\r\n  const startTime = performance.now();\r\n  const startMemory = getMemoryInfo();\r\n\r\n  try {\r\n    logInfo(`[GC] 가비지 컬렉션 제안${emergency ? ' (긴급)' : ''}`);\r\n\r\n    // Chrome 디버깅 모드에서 gc() 함수 사용\r\n    if (typeof window !== 'undefined' && (window as any).gc) {\r\n      (window as any).gc();\r\n    }\r\n\r\n    // 대체 방법: 메모리 압력 생성\r\n    else {\r\n      // 메모리 압력 생성 (JS 엔진에 GC 힌트 제공)\r\n      if (emergency) {\r\n        createMemoryPressure();\r\n      }\r\n    }\r\n\r\n    const endTime = performance.now();\r\n    const endMemory = getMemoryInfo();\r\n\r\n    const freedMemory = Math.max(0, startMemory.jsHeapSize - endMemory.jsHeapSize);\r\n    const freedMB = freedMemory / (1024 * 1024);\r\n\r\n    return {\r\n      success: true,\r\n      freedMemory,\r\n      freedMB,\r\n      duration: endTime - startTime,\r\n      timestamp: Date.now()\r\n    };\r\n  } catch (error) {\r\n    logError('[GC] 가비지 컬렉션 오류', error);\r\n\r\n    return {\r\n      success: false,\r\n      freedMemory: 0,\r\n      freedMB: 0,\r\n      duration: performance.now() - startTime,\r\n      timestamp: Date.now(),\r\n      error: error instanceof Error ? error.message : String(error)\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 메모리 정보 가져오기\r\n */\r\nfunction getMemoryInfo(): { jsHeapSize: number; totalJSHeapSize: number; jsHeapSizeLimit: number; } {\r\n  if (typeof window !== 'undefined' && (window.performance as any).memory) {\r\n    const memory = (window.performance as any).memory;\r\n    return {\r\n      jsHeapSize: memory.usedJSHeapSize || 0,\r\n      totalJSHeapSize: memory.totalJSHeapSize || 0,\r\n      jsHeapSizeLimit: memory.jsHeapSizeLimit || 0\r\n    };\r\n  }\r\n\r\n  return {\r\n    jsHeapSize: 0,\r\n    totalJSHeapSize: 0,\r\n    jsHeapSizeLimit: 0\r\n  };\r\n}\r\n\r\n/**\r\n * 메모리 압력 생성 (GC 유도)\r\n */\r\nfunction createMemoryPressure(): void {\r\n  // 임시로 큰 배열 생성 후 삭제\r\n  let _arr = null;\r\n  try {\r\n    _arr = new Array(1000000).fill(0).map(() => new Object());\r\n  } catch (_) {\r\n    // 오류 무시 (메모리 부족으로 인한 예외 가능성)\r\n  }\r\n\r\n  // 변수 참조 해제\r\n  _arr = null;\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\gc\\gc-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\gc\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\gc\\optimization-controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'emergency' is assigned a value but never used. Allowed unused args must match /^_/u.","line":115,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 메모리 최적화 컨트롤러\r\n * \r\n * 이 모듈은 네이티브 모듈을 통해 다양한 수준의 메모리 최적화를 제공합니다.\r\n * 모든 실제 최적화 로직은 Rust 네이티브 모듈에서 처리됩니다.\r\n */\r\n\r\nimport { OptimizationLevel } from '@/types';\r\nimport { OptimizationResult } from '@/types';\r\nimport { requestNativeMemoryOptimization, requestNativeGarbageCollection } from '../../native-memory-bridge';\r\nimport { cleanLocalStorage, cleanSessionStorage, clearLargeObjectsAndCaches } from '../storage-cleaner';\r\n\r\n// 네이티브 모듈을 사용하여 기본 최적화 수행\r\nexport async function performBasicOptimization(): Promise<OptimizationResult> {\r\n  return requestNativeMemoryOptimization(0, false) as Promise<OptimizationResult>;\r\n}\r\n\r\n// 네이티브 모듈을 사용하여 중간 수준 최적화 수행\r\nexport async function performMediumOptimization(): Promise<OptimizationResult> {\r\n  return requestNativeMemoryOptimization(OptimizationLevel.MEDIUM, false) as Promise<OptimizationResult>;\r\n}\r\n\r\n// 네이티브 모듈을 사용하여 높은 수준 최적화 수행\r\nexport async function performHighOptimization(): Promise<OptimizationResult> {\r\n  return requestNativeMemoryOptimization(OptimizationLevel.HIGH, false) as Promise<OptimizationResult>;\r\n}\r\n\r\n// 네이티브 모듈을 사용하여 위험 수준 최적화 수행\r\nexport async function performCriticalOptimization(): Promise<OptimizationResult> {\r\n  return requestNativeMemoryOptimization(OptimizationLevel.CRITICAL, true) as Promise<OptimizationResult>;\r\n}\r\n\r\n// 최적화 수준별 작업\r\nexport async function performOptimizationByLevel(level: OptimizationLevel): Promise<OptimizationResult> {\r\n  return requestNativeMemoryOptimization(level, level === OptimizationLevel.CRITICAL) as Promise<OptimizationResult>;\r\n}\r\n\r\n// 메모리 최적화 단계를 간략화한 버전\r\nexport async function optimizeMemoryByLevel(level: 0 | 1 | 2 | 3 | 4): Promise<boolean> {\r\n  try {\r\n    // 최적화 수준에 따라 다른 동작 수행\r\n    // 숫자 타입을 OptimizationLevel로 안전하게 변환\r\n    const optimizationLevel = level as unknown as OptimizationLevel;\r\n    await requestNativeMemoryOptimization(Number(optimizationLevel), level === 4);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(`메모리 최적화 실패 (레벨 ${level}):`, error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// 이미지 및 미디어 캐시 정리\r\nexport async function clearImageCaches(): Promise<boolean> {\r\n  try {\r\n    if (window.caches) {\r\n      const cacheNames = await caches.keys();\r\n      const mediaRegex = /\\.(jpg|jpeg|png|gif|webp|mp4|webm|ogg|mp3|wav)$/i;\r\n\r\n      for (const cacheName of cacheNames) {\r\n        const cache = await caches.open(cacheName);\r\n        const requests = await cache.keys();\r\n\r\n        for (const request of requests) {\r\n          if (mediaRegex.test(request.url)) {\r\n            await cache.delete(request);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // 로컬 스토리지에서 이미지 캐시 정리\r\n    cleanLocalStorage();\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('이미지 캐시 정리 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// 로컬 스토리지 캐시 정리\r\nexport function clearStorageCaches(): boolean {\r\n  try {\r\n    cleanLocalStorage();\r\n    cleanSessionStorage();\r\n    clearLargeObjectsAndCaches();\r\n    return true;\r\n  } catch (error) {\r\n    console.error('스토리지 캐시 정리 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// 브라우저 캐시 정리\r\nexport async function clearBrowserCaches(): Promise<boolean> {\r\n  try {\r\n    if (window.caches) {\r\n      const cacheNames = await caches.keys();\r\n\r\n      for (const cacheName of cacheNames) {\r\n        if (cacheName.includes('temp') || cacheName.includes('nonessential')) {\r\n          await caches.delete(cacheName);\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('브라우저 캐시 정리 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// 가비지 컬렉션 요청\r\nexport async function requestGC(emergency = false): Promise<any> {\r\n  try {\r\n    // emergency 매개변수를 올바르게 전달\r\n    return await requestNativeGarbageCollection();\r\n  } catch (error) {\r\n    console.error('가비지 컬렉션 요청 오류:', error);\r\n    return { success: false, error: String(error) };\r\n  }\r\n}\r\n\r\n// 가비지 컬렉션 제안\r\nexport function suggestGarbageCollection(): void {\r\n  if (typeof window !== 'undefined' && (window as any).gc) {\r\n    (window as any).gc();\r\n  }\r\n}\r\n\r\n// 최적화 컨트롤러 객체\r\ninterface OptimizationController {\r\n  suggestGarbageCollection: () => void;\r\n  requestGC: (emergency?: boolean) => Promise<any>;\r\n  clearBrowserCaches: () => Promise<boolean>;\r\n  clearStorageCaches: () => boolean;\r\n  clearImageCaches: () => Promise<boolean>;\r\n  performBasicOptimization: () => Promise<OptimizationResult>;\r\n  performMediumOptimization: () => Promise<OptimizationResult>;\r\n  performHighOptimization: () => Promise<OptimizationResult>;\r\n  performCriticalOptimization: () => Promise<OptimizationResult>;\r\n  optimizeMemoryByLevel: (level: 0 | 1 | 2 | 3 | 4) => Promise<boolean>;\r\n  settings?: Record<string, any>;\r\n}\r\n\r\n// 최적화 컨트롤러 인스턴스 생성 및 내보내기\r\nexport const optimizationController: OptimizationController = {\r\n  suggestGarbageCollection,\r\n  requestGC,\r\n  clearBrowserCaches,\r\n  clearStorageCaches,\r\n  clearImageCaches,\r\n  performBasicOptimization,\r\n  performMediumOptimization,\r\n  performHighOptimization,\r\n  performCriticalOptimization,\r\n  optimizeMemoryByLevel,\r\n  settings: {\r\n    // 기본 설정\r\n    preferNative: true,\r\n    aggressiveMode: false,\r\n    threshold: 80\r\n  }\r\n};\r\n\r\nexport default optimizationController;\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\gc\\optimization-levels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\gc\\optimization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\gc\\resource-optimizer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":100,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":127,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":440,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":440,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_unused' is defined but never used.","line":736,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":736,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_unused' is defined but never used.","line":748,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":748,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_unused2' is defined but never used.","line":784,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":784,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_error2' is defined but never used.","line":824,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":824,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 리소스 최적화 유틸리티\r\n * 메모리를 많이 사용하는 리소스들을 최적화하고 해제하는 함수들을 제공합니다.\r\n */\r\n\r\nimport { WindowWithCache } from '../types-extended';\r\n\r\n/**\r\n * 화면에 보이지 않는 리소스 언로드\r\n * 뷰포트 밖에 있는 이미지, 비디오 등의 리소스 메모리 해제\r\n */\r\nexport function unloadNonVisibleResources(): boolean {\r\n  try {\r\n    // 화면에 보이지 않는 이미지 리소스 언로드\r\n    const images = document.querySelectorAll('img:not([data-keep-loaded=\"true\"])');\r\n    let count = 0;\r\n\r\n    images.forEach(img => {\r\n      if (!isElementInViewport(img)) {\r\n        // 원본 src 저장\r\n        const imgElement = img as HTMLImageElement;\r\n        const originalSrc = imgElement.getAttribute('src');\r\n        if (originalSrc && originalSrc !== '') {\r\n          // 데이터 속성에 원본 src 저장\r\n          imgElement.setAttribute('data-original-src', originalSrc);\r\n          // src 속성 비우기\r\n          imgElement.src = '';\r\n          count++;\r\n        }\r\n      }\r\n    });\r\n\r\n    // 화면에 보이지 않는 비디오 일시 중지\r\n    const videos = document.querySelectorAll('video:not([data-keep-playing=\"true\"])');\r\n    videos.forEach(video => {\r\n      if (!isElementInViewport(video)) {\r\n        const videoElement = video as HTMLVideoElement;\r\n        if (!videoElement.paused) {\r\n          videoElement.pause();\r\n          count++;\r\n        }\r\n      }\r\n    });\r\n\r\n    // 화면에 보이지 않는 iframe 비활성화\r\n    const iframes = document.querySelectorAll('iframe:not([data-keep-loaded=\"true\"])');\r\n    iframes.forEach(iframe => {\r\n      if (!isElementInViewport(iframe)) {\r\n        const iframeElement = iframe as HTMLIFrameElement;\r\n        const originalSrc = iframeElement.getAttribute('src');\r\n        if (originalSrc && originalSrc !== 'about:blank') {\r\n          iframeElement.setAttribute('data-original-src', originalSrc);\r\n          iframeElement.src = 'about:blank';\r\n          count++;\r\n        }\r\n      }\r\n    });\r\n\r\n    if (count > 0) {\r\n      console.log(`화면에 보이지 않는 리소스 ${count}개 언로드됨`);\r\n    }\r\n\r\n    return count > 0;\r\n  } catch {\r\n    console.error('비표시 리소스 언로드 중 오류:');\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * 미사용 리소스 해제\r\n * 메모리 내 사용되지 않는 리소스 해제\r\n */\r\nexport function releaseUnusedResources(): boolean {\r\n  try {\r\n    let count = 0;\r\n\r\n    // 캔버스 컨텍스트 정리\r\n    const canvases = document.querySelectorAll('canvas:not([data-keep-context=\"true\"])');\r\n    canvases.forEach(canvas => {\r\n      try {\r\n        // WebGL 컨텍스트 정리\r\n        const canvasElement = canvas as HTMLCanvasElement;\r\n        const gl = canvasElement.getContext('webgl') || canvasElement.getContext('webgl2');\r\n        if (gl) {\r\n          const ext = gl.getExtension('WEBGL_lose_context');\r\n          if (ext) {\r\n            ext.loseContext();\r\n            count++;\r\n          }\r\n        }\r\n\r\n        // 2D 컨텍스트도 정리 (지원 가능한 브라우저에서)\r\n        const ctx = canvasElement.getContext('2d');\r\n        if (ctx && typeof ctx.reset === 'function') {\r\n          // @ts-ignore - 일부 최신 브라우저에서만 지원\r\n          ctx.reset();\r\n          count++;\r\n        }\r\n      } catch (_) {\r\n        // 무시\r\n      }\r\n    });\r\n\r\n    // 오디오 컨텍스트 정리\r\n    const audioElements = document.querySelectorAll('audio:not([data-keep-loaded=\"true\"])');\r\n    audioElements.forEach(audio => {\r\n      const audioElement = audio as HTMLAudioElement;\r\n      if (audioElement.paused) {\r\n        audioElement.src = '';\r\n        audioElement.load();\r\n        count++;\r\n      }\r\n    });\r\n\r\n    // 객체 URL 정리\r\n    if (window.URL && typeof URL.revokeObjectURL === 'function') {\r\n      // 객체 URL 맵 처리\r\n      const win = window as Window;\r\n      const objectUrls = win.__objectUrls;\r\n\r\n      if (objectUrls instanceof Map) {\r\n        objectUrls.forEach((_, url) => {\r\n          try {\r\n            URL.revokeObjectURL(url);\r\n            count++;\r\n          } catch (_) {\r\n            // 아무 작업도 수행하지 않음\r\n          }\r\n        });\r\n        objectUrls.clear();\r\n      }\r\n    }\r\n\r\n    if (count > 0) {\r\n      console.log(`사용하지 않는 리소스 ${count}개 해제됨`);\r\n    }\r\n\r\n    return count > 0;\r\n  } catch {\r\n    console.error('미사용 리소스 해제 중 오류:');\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * 사용하지 않는 메모리 해제\r\n * 임시 변수 및 캐시 정리\r\n */\r\nexport function freeUnusedMemory(): boolean {\r\n  try {\r\n    let clearedItems = 0;\r\n\r\n    // 위젯 캐시 정리\r\n    if (!window.__widgetCache) {\r\n      window.__widgetCache = new Map<string, any>();\r\n    }\r\n    const widgetCache = window.__widgetCache as Record<string, any>;\r\n    let itemsToRemove: string[] = [];\r\n\r\n    for (const key in widgetCache) {\r\n      // 비활성 상태인 위젯만 정리\r\n      if (widgetCache[key]?.state === 'inactive') {\r\n        itemsToRemove.push(key);\r\n      }\r\n    }\r\n\r\n    // 삭제 작업 분리 (객체 순회 중 수정 방지)\r\n    itemsToRemove.forEach(key => {\r\n      delete widgetCache[key];\r\n      clearedItems++;\r\n    });\r\n\r\n    // 계산된 스타일 캐시 정리\r\n    if (!window.__styleCache) {\r\n      window.__styleCache = createEmptyMap<string, unknown>();\r\n    }\r\n    if (Object.keys(window.__styleCache).length > 1000) {\r\n      // 캐시가 너무 큰 경우 전체 삭제\r\n      window.__styleCache = createEmptyMap<string, unknown>();\r\n      clearedItems += 1000; // 대략적인 추정값\r\n    }\r\n\r\n    // 이미지 자동 크기 조정 캐시 정리\r\n    if (!window.__imageResizeCache) {\r\n      window.__imageResizeCache = createEmptyMap<string, any>();\r\n    }\r\n    const count = Object.keys(window.__imageResizeCache).length;\r\n    // 타입에 맞게 초기화 (Record<string, any>로 정의되어 있음)\r\n    window.__imageResizeCache = new Map<string, string>();\r\n    clearedItems += count;\r\n\r\n    if (clearedItems > 0) {\r\n      console.log(`사용하지 않는 메모리 해제: ${clearedItems}개 항목 정리됨`);\r\n    }\r\n\r\n    // 브라우저에 메모리 해제 힌트 제공\r\n    if (window.requestIdleCallback) {\r\n      window.requestIdleCallback(() => {\r\n        // 사용 가능한 경우 GC 실행\r\n        if (typeof window.gc === 'function') {\r\n          window.gc();\r\n        }\r\n      });\r\n    }\r\n\r\n    return clearedItems > 0;\r\n  } catch {\r\n    console.error('미사용 메모리 해제 중 오류:');\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * DOM 최적화\r\n * DOM 구조 최적화 및 메모리 누수 방지\r\n */\r\nexport function optimizeDOM(): boolean {\r\n  try {\r\n    let optimizedCount = 0;\r\n\r\n    // 과도하게 깊은 DOM 깊이를 가진 요소 검사\r\n    const deepElements = findDeepDOMElements();\r\n    if (deepElements.length > 0) {\r\n      console.warn(`과도하게 깊은 DOM 구조 발견: ${deepElements.length}개`);\r\n    }\r\n\r\n    // 큰 DOM 노드 최적화\r\n    const largeTextNodes = findLargeTextNodes();\r\n    largeTextNodes.forEach(node => {\r\n      // 텍스트 노드가 너무 큰 경우 잘라내기\r\n      if (node.textContent && node.textContent.length > 5000) {\r\n        node.textContent = node.textContent.substring(0, 5000) + '...';\r\n        optimizedCount++;\r\n      }\r\n    });\r\n\r\n    // 깊은 이벤트 리스너 정리\r\n    cleanupDuplicateEventListeners();\r\n\r\n    // 다양한 DOM 최적화 기법 적용\r\n    removeEmptyNodes();\r\n    mergeAdjacentTextNodes();\r\n\r\n    // CSS 클래스 최적화 (너무 많은 클래스를 가진 요소)\r\n    optimizeCSSClasses();\r\n\r\n    return optimizedCount > 0;\r\n  } catch {\r\n    console.error('DOM 최적화 중 오류:');\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Object URL 정리\r\n * 더 이상 사용되지 않는 Object URL을 해제하여 메모리를 절약합니다.\r\n */\r\nexport function revokeUnusedObjectURLs(): void {\r\n  try {\r\n    const win = window as Window;\r\n\r\n    // 객체 URL 맵이 없으면 생성\r\n    if (!win.__objectUrls) {\r\n      win.__objectUrls = new Map<string, string>();\r\n      return;\r\n    }\r\n\r\n    // 사용하지 않는 객체 URL 해제\r\n    const now = Date.now();\r\n    const expiryTime = 30000; // 30초\r\n    let revokedCount = 0;\r\n\r\n    win.__objectUrls.forEach((creationTime: string, url: string) => {\r\n      if (now - parseInt(creationTime) > expiryTime) {\r\n        URL.revokeObjectURL(url);\r\n        win.__objectUrls?.delete(url);\r\n        revokedCount++;\r\n      }\r\n    });\r\n\r\n    if (revokedCount > 0) {\r\n      console.log(`${revokedCount}개의 미사용 객체 URL 해제됨`);\r\n    }\r\n  } catch {\r\n    console.warn('객체 URL 정리 중 오류:');\r\n  }\r\n}\r\n\r\n/**\r\n * 위젯 캐시 정리\r\n * 커스텀 UI 위젯의 캐시를 정리합니다.\r\n */\r\nexport function clearWidgetCache(): void {\r\n  try {\r\n    const win = window as WindowWithCache;\r\n\r\n    // 위젯 캐시가 없으면 건너뜀\r\n    if (!win.__widgetCache) {\r\n      win.__widgetCache = createEmptyMap<string, unknown>();\r\n      return;\r\n    }\r\n\r\n    const size = win.__widgetCache.size;\r\n    win.__widgetCache.clear();\r\n\r\n    if (size > 0) {\r\n      console.log(`위젯 캐시 정리: ${size}개 항목 제거됨`);\r\n    }\r\n  } catch (_) {\r\n    console.warn('위젯 캐시 정리 중 오류:', _);\r\n  }\r\n}\r\n\r\n/**\r\n * 스타일 캐시 정리\r\n * 동적으로 생성된 스타일에 대한 참조를 정리합니다.\r\n */\r\nexport function clearStyleCache(): void {\r\n  try {\r\n    const win = window as WindowWithCache;\r\n\r\n    // 스타일 캐시가 없으면 생성\r\n    if (!win.__styleCache) {\r\n      win.__styleCache = createEmptyMap<string, unknown>();\r\n      return;\r\n    }\r\n\r\n    // 캐시 항목 수가 너무 많으면 모두 정리\r\n    const cacheSize = Object.keys(win.__styleCache).length;\r\n    win.__styleCache = createEmptyMap<string, unknown>();\r\n\r\n    if (cacheSize > 0) {\r\n      console.log(`스타일 캐시 정리: ${cacheSize}개 항목 제거됨`);\r\n    }\r\n  } catch {\r\n    console.warn('스타일 캐시 정리 중 오류 발생');\r\n  }\r\n}\r\n\r\n/**\r\n * 이미지 리사이즈 캐시 정리\r\n * 동적으로 리사이즈된 이미지에 대한 캐시를 정리합니다.\r\n */\r\nexport function clearImageResizeCache(): void {\r\n  try {\r\n    const win = window as WindowWithCache;\r\n\r\n    // 이미지 리사이즈 캐시가 없으면 생성\r\n    if (!win.__imageResizeCache) {\r\n      win.__imageResizeCache = createEmptyMap<string, string>();\r\n      return;\r\n    }\r\n\r\n    const cacheSize = Object.keys(win.__imageResizeCache).length;\r\n    win.__imageResizeCache = createEmptyMap<string, string>();\r\n\r\n    if (cacheSize > 0) {\r\n      console.log(`이미지 리사이즈 캐시 정리: ${cacheSize}개 항목 제거됨`);\r\n    }\r\n  } catch {\r\n    console.warn('이미지 캐시 정리 중 오류 발생');\r\n  }\r\n}\r\n\r\n/**\r\n * 텍스처 캐시 정리\r\n * 사용되지 않는 텍스처 캐시를 정리합니다.\r\n */\r\nexport function cleanupTextureCache(): number {\r\n  try {\r\n    // 텍스처 캐시가 없으면 생성\r\n    if (!window.hasOwnProperty('__textureCache')) {\r\n      // 빈 Map으로 초기화 (타입 지정)\r\n      (window as any).__textureCache = createEmptyMap<string, string>();\r\n      return 0;\r\n    }\r\n\r\n    // 이전 크기 기록\r\n    const cacheSize = (window as any).__textureCache.size || 0;\r\n\r\n    // 캐시 초기화\r\n    (window as any).__textureCache.clear();\r\n\r\n    return cacheSize;\r\n  } catch {\r\n    console.error('텍스처 캐시 정리 오류:');\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * 객체 캐시 정리\r\n * 사용되지 않는 객체 캐시를 정리합니다.\r\n */\r\nexport function cleanupObjectCache(): number {\r\n  try {\r\n    // 객체 캐시가 없으면 생성\r\n    if (!window.hasOwnProperty('__objectCache')) {\r\n      (window as any).__objectCache = createEmptyMap<string, any>();\r\n      return 0;\r\n    }\r\n\r\n    // 이전 크기 기록\r\n    const cacheSize = (window as any).__objectCache.size || 0;\r\n\r\n    // 캐시 초기화\r\n    (window as any).__objectCache.clear();\r\n\r\n    return cacheSize;\r\n  } catch {\r\n    console.error('객체 캐시 정리 오류:');\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * 리소스 최적화\r\n * 리소스를 최적화하는 기본 함수\r\n */\r\nexport function optimizeResources(): number {\r\n  // 기본 구현\r\n  return 0;\r\n}\r\n\r\n// 유틸리티 함수들\r\n\r\n/**\r\n * 요소가 뷰포트 내에 있는지 확인\r\n */\r\nfunction isElementInViewport(el: Element): boolean {\r\n  try {\r\n    const rect = el.getBoundingClientRect();\r\n    return (\r\n      rect.top >= -rect.height * 2 && // 위쪽으로 2배 확장\r\n      rect.left >= -rect.width * 2 && // 왼쪽으로 2배 확장\r\n      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) + rect.height * 2 && // 아래쪽으로 2배 확장\r\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth) + rect.width * 2 // 오른쪽으로 2배 확장\r\n    );\r\n  } catch (_error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * 과도하게 깊은 DOM 요소 찾기\r\n */\r\nfunction findDeepDOMElements(maxDepth: number = 15): Element[] {\r\n  const deepElements: Element[] = [];\r\n\r\n  function checkElementDepth(element: Element, depth: number) {\r\n    if (depth > maxDepth) {\r\n      deepElements.push(element);\r\n      return;\r\n    }\r\n\r\n    Array.from(element.children).forEach(child => {\r\n      checkElementDepth(child, depth + 1);\r\n    });\r\n  }\r\n\r\n  // 문서 바디부터 시작\r\n  if (document.body) {\r\n    Array.from(document.body.children).forEach(child => {\r\n      checkElementDepth(child, 1);\r\n    });\r\n  }\r\n\r\n  return deepElements;\r\n}\r\n\r\n/**\r\n * 큰 텍스트 노드 찾기\r\n */\r\nfunction findLargeTextNodes(): Text[] {\r\n  const largeNodes: Text[] = [];\r\n\r\n  function findTextNodes(element: Node) {\r\n    if (element.nodeType === Node.TEXT_NODE) {\r\n      const textNode = element as Text;\r\n      if (textNode.textContent && textNode.textContent.length > 5000) {\r\n        largeNodes.push(textNode);\r\n      }\r\n    } else {\r\n      Array.from(element.childNodes).forEach(findTextNodes);\r\n    }\r\n  }\r\n\r\n  if (document.body) {\r\n    findTextNodes(document.body);\r\n  }\r\n\r\n  return largeNodes;\r\n}\r\n\r\n/**\r\n * 중복된 이벤트 리스너 정리\r\n */\r\nfunction cleanupDuplicateEventListeners(): void {\r\n  // 이벤트 리스너 정리는 브라우저 API로 직접 접근할 수 없음\r\n  // 대신, 과도한 이벤트 리스너를 가진 요소를 복제하여 리스너 제거\r\n\r\n  try {\r\n    const elements = document.querySelectorAll('[data-event-heavy=\"true\"]');\r\n    elements.forEach(el => {\r\n      const clone = el.cloneNode(true);\r\n      if (el.parentNode) {\r\n        el.parentNode.replaceChild(clone, el);\r\n      }\r\n    });\r\n  } catch (_) {\r\n    console.warn('이벤트 리스너 정리 중 오류:', _);\r\n  }\r\n}\r\n\r\n/**\r\n * 빈 노드 제거\r\n */\r\nfunction removeEmptyNodes(): void {\r\n  try {\r\n    // 빈 텍스트 노드 및 의미 없는 노드 제거\r\n    const walker = document.createTreeWalker(\r\n      document.body,\r\n      NodeFilter.SHOW_TEXT,\r\n      {\r\n        acceptNode: function (node) {\r\n          // 공백만 있는 텍스트 노드 필터링\r\n          if (node.textContent?.trim() === '') {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n          }\r\n          return NodeFilter.FILTER_SKIP;\r\n        }\r\n      }\r\n    );\r\n\r\n    const nodesToRemove: Node[] = [];\r\n    let node;\r\n\r\n    // 최대 100개 노드만 처리 (성능 문제 방지)\r\n    let count = 0;\r\n    while ((node = walker.nextNode()) && count < 100) {\r\n      // 제거 대상인지 확인 (부모가 있고, 스크립트/스타일이 아닌 경우)\r\n      if (node.parentNode &&\r\n        !(node.parentNode.nodeName === 'SCRIPT' ||\r\n          node.parentNode.nodeName === 'STYLE')) {\r\n        nodesToRemove.push(node);\r\n        count++;\r\n      }\r\n    }\r\n\r\n    // 노드 제거\r\n    nodesToRemove.forEach(node => {\r\n      if (node.parentNode) {\r\n        node.parentNode.removeChild(node);\r\n      }\r\n    });\r\n  } catch {\r\n    console.warn('DOM 노드 정리 중 오류 발생');\r\n  }\r\n}\r\n\r\n/**\r\n * 인접한 텍스트 노드 병합\r\n */\r\nfunction mergeAdjacentTextNodes(): void {\r\n  try {\r\n    // 인접한 텍스트 노드 병합 (성능 향상)\r\n    const elements = document.querySelectorAll('p, div, span, h1, h2, h3, h4, h5, h6');\r\n\r\n    // 최대 100개 요소만 처리 (성능 문제 방지)\r\n    Array.from(elements).slice(0, 100).forEach(el => {\r\n      el.normalize();\r\n    });\r\n  } catch {\r\n    console.warn('텍스트 노드 병합 중 오류:');\r\n  }\r\n}\r\n\r\n/**\r\n * CSS 클래스 최적화\r\n */\r\nfunction optimizeCSSClasses(): void {\r\n  try {\r\n    const elements = document.querySelectorAll('*[class]');\r\n\r\n    // 최대 100개 요소만 처리 (성능 문제 방지)\r\n    Array.from(elements).slice(0, 100).forEach(el => {\r\n      const classesStr = el.getAttribute('class');\r\n      if (classesStr) {\r\n        const classes = classesStr.split(/\\s+/);\r\n\r\n        // 클래스가 30개 이상인 경우 최적화\r\n        if (classes.length > 30) {\r\n          // 중복 클래스 제거 및 클래스 수 제한\r\n          const uniqueClasses = Array.from(new Set(classes)).slice(0, 30);\r\n          el.setAttribute('class', uniqueClasses.join(' '));\r\n        }\r\n      }\r\n    });\r\n  } catch {\r\n    console.warn('CSS 클래스 최적화 중 오류:');\r\n  }\r\n}\r\n\r\n/**\r\n * 리소스 최적화 유틸리티\r\n * 메모리에서 사용하지 않는 리소스를 해제하는 함수\r\n */\r\n\r\n/**\r\n * 동적 리소스 정리\r\n * @returns {boolean} 성공 여부\r\n */\r\nexport function cleanupResources(): boolean {\r\n  try {\r\n    // 1. 사용하지 않는 캐시 지우기\r\n    clearUnusedCaches();\r\n\r\n    // 2. 사용하지 않는 객체 참조 제거\r\n    removeUnusedObjectReferences();\r\n\r\n    // 3. 대형 배열 및 버퍼 정리\r\n    cleanupLargeArrays();\r\n\r\n    return true;\r\n  } catch {\r\n    console.error('리소스 정리 중 오류:');\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * 사용하지 않는 캐시 정리\r\n */\r\nfunction clearUnusedCaches(): void {\r\n  try {\r\n    // 애플리케이션 전용 캐시 정리\r\n    const win = window as WindowWithCache;\r\n    if (!win.__memoryCache) {\r\n      win.__memoryCache = new Map<string, unknown>();\r\n    }\r\n    if (win.__memoryCache instanceof Map) {\r\n      // 일정 시간 이상 사용하지 않은 캐시 항목 제거\r\n      const now = Date.now();\r\n      const CACHE_TTL = 30 * 60 * 1000; // 30분\r\n\r\n      win.__memoryCache.forEach((value, key) => {\r\n        if (value && typeof value === 'object' && 'lastAccess' in value) {\r\n          if (now - (value.lastAccess as number) > CACHE_TTL) {\r\n            win.__memoryCache?.delete(key);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // 스타일 캐시 정리\r\n    if (!win.__styleCache) {\r\n      win.__styleCache = createEmptyMap<string, unknown>();\r\n    }\r\n    win.__styleCache = createEmptyMap<string, unknown>();\r\n  } catch (error) {\r\n    console.warn('캐시 정리 중 오류:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * 사용하지 않는 객체 참조 제거\r\n */\r\nfunction removeUnusedObjectReferences(): void {\r\n  try {\r\n    // 동적 모듈 관리자를 통한 참조 정리 (있는 경우)\r\n    const win = window as WindowWithCache;\r\n    if (win._dynamicModules instanceof Map) {\r\n      const modules = win._dynamicModules;\r\n      const now = Date.now();\r\n      const MODULE_UNUSED_THRESHOLD = 60 * 60 * 1000; // 1시간\r\n\r\n      modules.forEach((module, name) => {\r\n        if (module && typeof module === 'object' && 'lastUsed' in module) {\r\n          // 오랫동안 사용하지 않은 모듈은 언로드\r\n          if (now - (module.lastUsed as number) > MODULE_UNUSED_THRESHOLD) {\r\n            // 타입 안전하게 unload 메서드 호출\r\n            if (module && typeof module === 'object' && 'unload' in module &&\r\n              typeof module.unload === 'function') {\r\n              try {\r\n                module.unload();\r\n              } catch (_unused) {\r\n                console.warn(`모듈 '${name}' 언로드 중 오류:`, _unused);\r\n              }\r\n            }\r\n            modules.delete(name);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  } catch {\r\n    console.warn('객체 참조 정리 중 오류:');\r\n  }\r\n}\r\n\r\n/**\r\n * 대형 배열 및 버퍼 정리\r\n */\r\nfunction cleanupLargeArrays(): void {\r\n  try {\r\n    // 버퍼 캐시 정리\r\n    const win = window as WindowWithCache;\r\n    if (win.__bufferCache) {\r\n      // 각 버퍼에 대해 참조 제거 여부 결정\r\n      Object.keys(win.__bufferCache).forEach(key => {\r\n        if (win.__bufferCache && key in win.__bufferCache) {\r\n          // 참조만 제거 (GC가 처리하도록)\r\n          win.__bufferCache[key] = null;\r\n          delete win.__bufferCache[key];\r\n        }\r\n      });\r\n    }\r\n  } catch {\r\n    console.warn('배열 및 버퍼 정리 중 오류:');\r\n  }\r\n}\r\n\r\n// 함수 이름 변경 (사용하지 않는 함수이므로 _ 접두사 추가)\r\nfunction _cleanupMemoryPool(pool: Map<string, any>, ttl: number = 60000): number {\r\n  try {\r\n    const now = Date.now();\r\n    let count = 0;\r\n\r\n    for (const [key, entry] of pool.entries()) {\r\n      // 만료 시간 있고 만료되었는지 확인\r\n      if (entry && entry.lastAccess && (now - entry.lastAccess > ttl)) {\r\n        // 정리 전 콜백이 있으면 실행\r\n        if (typeof entry.cleanup === 'function') {\r\n          try {\r\n            entry.cleanup();\r\n          } catch (_unused) {\r\n            // 정리 함수 오류 무시\r\n          }\r\n        }\r\n\r\n        // 풀에서 제거\r\n        pool.delete(key);\r\n        count++;\r\n      }\r\n    }\r\n\r\n    return count;\r\n  } catch (_unused) {\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * 이미지 캐시 정리\r\n */\r\nexport function cleanupImageCache(): number {\r\n  if (typeof window === 'undefined') return 0;\r\n\r\n  try {\r\n    let count = 0;\r\n\r\n    // 이미지 캐시 맵 정리\r\n    if (window.__imageResizeCache) {\r\n      const sizeBefore = window.__imageResizeCache.size;\r\n\r\n      // 오래된 이미지만 정리\r\n      const now = Date.now();\r\n      for (const [key, cacheObj] of window.__imageResizeCache.entries()) {\r\n        // 안전하게 타입 체크\r\n        const entry = typeof cacheObj === 'object' && cacheObj !== null\r\n          ? cacheObj\r\n          : { timestamp: 0 };\r\n\r\n        // 30분 이상 된 항목 제거\r\n        if (entry.timestamp && (now - entry.timestamp > 30 * 60 * 1000)) {\r\n          window.__imageResizeCache.delete(key);\r\n        }\r\n      }\r\n\r\n      count = sizeBefore - (window.__imageResizeCache.size || 0);\r\n    }\r\n\r\n    return count;\r\n  } catch (_unused2) {\r\n    return 0;\r\n  }\r\n}\r\n\r\n// 함수 이름 변경 (사용하지 않는 함수이므로 _ 접두사 추가)\r\nfunction _cleanupIndexedDBStorage(): Promise<number> {\r\n  return new Promise((resolve) => {\r\n    try {\r\n      if (typeof window === 'undefined' || !window.indexedDB) {\r\n        resolve(0);\r\n        return;\r\n      }\r\n\r\n      // 캐시 관련 DB 목록\r\n      const cacheDBs = ['cache', 'temp-cache', 'image-cache', 'app-cache'];\r\n      let cleanedCount = 0;\r\n\r\n      // 각 DB 열어서 확인\r\n      cacheDBs.forEach(async (dbName) => {\r\n        try {\r\n          const request = window.indexedDB.open(dbName);\r\n\r\n          request.onsuccess = (_unused3) => {\r\n            // DB 정리 로직\r\n            // ...\r\n          };\r\n\r\n          request.onerror = () => {\r\n            // DB 접근 오류 무시\r\n          };\r\n        } catch {\r\n          // DB 열기 오류 무시\r\n        }\r\n      });\r\n\r\n      // 약간의 딜레이 후 결과 반환 (비동기 처리 완료 대기)\r\n      setTimeout(() => {\r\n        resolve(cleanedCount);\r\n      }, 500);\r\n    } catch (_error2) {\r\n      // 오류 발생 시 0 반환\r\n      resolve(0);\r\n    }\r\n  });\r\n}\r\n\r\n// 윈도우 타입 확장 부분 수정\r\n\r\n// 기존 Window 인터페이스 정의를 WindowWithResources로 이름 변경하여 충돌 방지\r\ninterface WindowWithResources {\r\n  __objectUrls?: Map<string, string>;\r\n  __widgetCache?: Record<string, any> | Map<string, any>;\r\n  __styleCache?: Record<string, any>;\r\n  __imageResizeCache?: Record<string, any>; // Map이 아닌 Record로 통일\r\n  __textureCache?: Map<string, string>;\r\n  __objectCache?: Map<string, any>;\r\n  __memoryCache?: Map<string, any>;\r\n  __bufferCache?: Record<string, any>;\r\n  _dynamicModules?: Map<string, any>;\r\n  gc?: () => void;\r\n}\r\n\r\n// Window 타입을 직접 확장하는 대신, 별도 타입으로 두고 필요시 타입 단언 사용\r\nexport type { WindowWithResources };\r\n\r\n/**\r\n * Map 초기화 함수\r\n */\r\nfunction createEmptyMap<K, V>(): Map<K, V> {\r\n  return new Map<K, V>();\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\gpu-accelerator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\hooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\image-optimizer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\memory-info.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\optimization-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\optimizer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NativeOptimizationLevel' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":54}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 메모리 최적화 코어 유틸리티\r\n * \r\n * 이 모듈은 네이티브 모듈 기반 최적화 함수를 제공합니다.\r\n * 모든 최적화 작업은 Rust로 구현된 네이티브 모듈을 통해 수행됩니다.\r\n */\r\n\r\nimport { requestNativeMemoryOptimization } from '../native-memory-bridge';\r\nimport { suggestGarbageCollection, requestGC } from './gc-utils';\r\nimport { OptimizationLevel as AppOptimizationLevel } from '@/types';\r\nimport { OptimizationLevel as NativeOptimizationLevel } from '@/types/native-module';\r\nimport { toNativeOptimizationLevel } from '../enum-converters';\r\n\r\n/**\r\n * 메모리 최적화 수행 함수 (내부 구현)\r\n * 네이티브 모듈을 통해 메모리 최적화를 수행합니다.\r\n * \r\n * @param {boolean} aggressive 적극적 최적화 여부\r\n * @returns {Promise<boolean>} 성공 여부\r\n */\r\nexport async function internalOptimizeMemory(aggressive: boolean = false): Promise<boolean> {\r\n  try {\r\n    // 적절한 최적화 레벨 선택\r\n    const appLevel = aggressive ? AppOptimizationLevel.HIGH : AppOptimizationLevel.MEDIUM;\r\n    // 명시적 변환 함수 사용\r\n    const nativeLevel = toNativeOptimizationLevel(appLevel);\r\n    \r\n    // 네이티브 모듈 최적화 호출\r\n    const result = await requestNativeMemoryOptimization(nativeLevel, aggressive);\r\n    \r\n    if (!result) {\r\n      console.warn('네이티브 메모리 최적화 실패');\r\n      return false;\r\n    }\r\n    \r\n    // 브라우저에 GC 힌트 제공\r\n    suggestGarbageCollection();\r\n    \r\n    // Electron 메인 프로세스에 메모리 최적화 요청 (지원되는 경우)\r\n    if (window.electronAPI && window.electronAPI.optimizeMemory) {\r\n      window.electronAPI.optimizeMemory(aggressive);\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('메모리 최적화 중 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * 메모리 최적화 수행 함수 (공개 API)\r\n * \r\n * @param {boolean} deepCleanup 심층 정리 여부\r\n * @returns {Promise<boolean>} 성공 여부\r\n */\r\nexport async function optimizeMemory(deepCleanup = false): Promise<boolean> {\r\n  try {\r\n    // 적극적인 플래그 설정\r\n    const aggressive = deepCleanup;\r\n    \r\n    // 내부 최적화 함수 호출\r\n    const result = await internalOptimizeMemory(aggressive);\r\n    \r\n    // GC 요청\r\n    await requestGC(deepCleanup);\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('메모리 최적화 오류:', error);\r\n    return false;\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\pool\\memory-pool.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\resource-optimizer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\storage-cleaner.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\types-extended.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\memory\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\module-checker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\module-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'moduleName' is defined but never used. Allowed unused args must match /^_/u.","line":35,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'moduleName' is defined but never used. Allowed unused args must match /^_/u.","line":44,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 동적 모듈 관리 유틸리티\r\n */\r\n\r\n/**\r\n * 동적으로 로드된 모듈 언로드\r\n * 메모리 최적화를 위해 사용하지 않는 동적 모듈 언로드\r\n */\r\nexport async function unloadDynamicModules(): Promise<void> {\r\n    if (typeof window === 'undefined') return;\r\n\r\n    try {\r\n        // 동적 로드된 스크립트 언로드\r\n        const dynamicScripts = document.querySelectorAll('script[data-dynamic=\"true\"]');\r\n        dynamicScripts.forEach(script => {\r\n            script.parentNode?.removeChild(script);\r\n        });\r\n\r\n        // 동적 로드된 스타일시트 언로드\r\n        const dynamicStyles = document.querySelectorAll('link[data-dynamic=\"true\"]');\r\n        dynamicStyles.forEach(style => {\r\n            style.parentNode?.removeChild(style);\r\n        });\r\n\r\n        console.log(`${dynamicScripts.length + dynamicStyles.length}개의 동적 모듈이 언로드되었습니다.`);\r\n    } catch (error) {\r\n        console.error('동적 모듈 언로드 중 오류 발생:', error);\r\n    }\r\n}\r\n\r\n/**\r\n * 모듈 사용 여부 확인\r\n * @param moduleName 모듈 이름\r\n */\r\nexport function isModuleInUse(moduleName: string): boolean {\r\n    // 구현은 애플리케이션에 맞게 조정 필요\r\n    return false;\r\n}\r\n\r\n/**\r\n * 모듈 메모리 사용량 추정\r\n * @param moduleName 모듈 이름\r\n */\r\nexport function estimateModuleMemoryUsage(moduleName: string): number {\r\n    // 구현은 애플리케이션에 맞게 조정 필요\r\n    return 0;\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\native-gpu-types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\native-memory-bridge.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\nativeModuleClient.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MemoryInfo' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OptimizationResult' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GCResult' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OptimizationLevel' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 네이티브 모듈 클라이언트 API\r\n * \r\n * 프론트엔드에서 네이티브 모듈 기능을 사용하기 위한 래퍼 함수들을 제공합니다.\r\n */\r\n\r\nimport type {\r\n  MemoryInfo,\r\n  OptimizationResult,\r\n  GCResult,\r\n  // GpuInfo,\r\n  // GpuComputationResult,\r\n  // TaskResult \r\n} from '@/types';\r\nimport { OptimizationLevel } from '@/types/native-module';\r\n\r\n// 상태 캐시\r\nlet moduleStatusCache: any = null;\r\nlet lastStatusCheck = 0;\r\nconst STATUS_CACHE_TTL = 10000; // 10초\r\n\r\n// 브라우저 환경인지 확인 - 상수로 변경\r\nconst isBrowser = typeof window !== 'undefined';\r\n\r\n/**\r\n * fetch 요청을 래핑하는 함수\r\n */\r\nasync function enhancedFetch(url: string, options: RequestInit = {}): Promise<Response> {\r\n  try {\r\n    const response = await fetch(url, {\r\n      ...options,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n    });\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error(`Fetch 요청 실패 (${url}):`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 메모리 정보 가져오기\r\n */\r\nexport async function getMemoryInfo() {\r\n  if (!isBrowser) {\r\n    return { success: false, error: 'Server environment', timestamp: Date.now() };\r\n  }\r\n\r\n  try {\r\n    const response = await enhancedFetch('/api/native/memory');\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('메모리 정보 가져오기 실패:', error);\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 메모리 최적화 수행\r\n */\r\nexport async function optimizeMemory(level = 2, emergency = false) {\r\n  try {\r\n    const response = await enhancedFetch('/api/native/memory', {\r\n      method: 'PUT',\r\n      body: JSON.stringify({\r\n        type: 'optimize',\r\n        level: level.toString(),\r\n        emergency\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('메모리 최적화 실패:', error);\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 가비지 컬렉션 강제 수행\r\n */\r\nexport async function forceGarbageCollection() {\r\n  try {\r\n    const response = await enhancedFetch('/api/native/memory', {\r\n      method: 'PUT',\r\n      body: JSON.stringify({\r\n        type: 'gc'\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('가비지 컬렉션 실패:', error);\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * GPU 정보 가져오기\r\n */\r\nexport async function getGpuInfo() {\r\n  try {\r\n    const response = await enhancedFetch('/api/native/gpu');\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`GPU 정보 요청 실패: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('GPU 정보 가져오기 오류:', error);\r\n    return {\r\n      success: false,\r\n      available: false,\r\n      gpuInfo: null,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * GPU 가속 활성화/비활성화\r\n * @param enable 활성화 여부\r\n */\r\nexport async function setGpuAcceleration(enable: boolean) {\r\n  try {\r\n    // 요청 데이터 준비\r\n    const requestBody = JSON.stringify({\r\n      enable\r\n    });\r\n\r\n    // 요청 보내기\r\n    const response = await enhancedFetch('/api/native/gpu/acceleration', {\r\n      method: 'PUT',\r\n      body: requestBody\r\n    });\r\n\r\n    // 응답 처리\r\n    if (!response.ok) {\r\n      throw new Error(`GPU 가속 설정 요청 실패: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('GPU 가속 설정 오류:', error);\r\n    return {\r\n      success: false,\r\n      enabled: false,\r\n      result: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * GPU 계산 수행\r\n * @param data 계산에 사용할 데이터\r\n * @param computationType 계산 유형\r\n */\r\nexport async function performGpuComputation<_T = unknown>(data: unknown, computationType: string) {\r\n  try {\r\n    // 요청 데이터 준비\r\n    const requestBody = JSON.stringify({\r\n      data,\r\n      computationType\r\n    });\r\n\r\n    // 요청 보내기\r\n    const response = await enhancedFetch('/api/native/gpu', {\r\n      method: 'POST',\r\n      body: requestBody\r\n    });\r\n\r\n    // 응답 처리\r\n    if (!response.ok) {\r\n      throw new Error(`GPU 계산 요청 실패: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('GPU 계산 오류:', error);\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 네이티브 모듈 상태 확인\r\n */\r\nexport async function getNativeModuleStatus() {\r\n  if (!isBrowser) {\r\n    return { success: false, error: 'Server environment', timestamp: Date.now() };\r\n  }\r\n\r\n  // 캐시된 상태가 있고 TTL 내라면 캐시된 값 반환\r\n  const now = Date.now();\r\n  if (moduleStatusCache && now - lastStatusCheck < STATUS_CACHE_TTL) {\r\n    return moduleStatusCache;\r\n  }\r\n\r\n  try {\r\n    const response = await enhancedFetch('/api/native/status');\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`네이티브 모듈 상태 요청 실패: ${response.status}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n\r\n    // 캐시 업데이트\r\n    moduleStatusCache = result;\r\n    lastStatusCheck = now;\r\n\r\n    return result;\r\n  } catch (error) {\r\n    console.error('네이티브 모듈 상태 확인 실패:', error);\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\r\n    };\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\number-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\path-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\performance-cache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\performance-metrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\performance-optimizer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\request-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":100,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 요청 관련 유틸리티 함수들\r\n */\r\n\r\n// 기본 요청 타임아웃 (30초)\r\nconst DEFAULT_TIMEOUT = 30000;\r\n\r\n// 요청 상태 유형\r\ntype RequestState = 'idle' | 'loading' | 'success' | 'error';\r\n\r\n/**\r\n * 요청 상태 클래스\r\n */\r\nexport class RequestStateManager<T> {\r\n  state: RequestState = 'idle';\r\n  data: T | null = null;\r\n  error: Error | null = null;\r\n  timestamp: number | null = null;\r\n  \r\n  constructor(initialData: T | null = null) {\r\n    this.data = initialData;\r\n  }\r\n  \r\n  setLoading(): void {\r\n    this.state = 'loading';\r\n    this.error = null;\r\n  }\r\n  \r\n  setSuccess(data: T): void {\r\n    this.state = 'success';\r\n    this.data = data;\r\n    this.error = null;\r\n    this.timestamp = Date.now();\r\n  }\r\n  \r\n  setError(error: Error): void {\r\n    this.state = 'error';\r\n    this.error = error;\r\n    this.timestamp = Date.now();\r\n  }\r\n  \r\n  isLoading(): boolean {\r\n    return this.state === 'loading';\r\n  }\r\n  \r\n  isSuccess(): boolean {\r\n    return this.state === 'success';\r\n  }\r\n  \r\n  isError(): boolean {\r\n    return this.state === 'error';\r\n  }\r\n  \r\n  reset(): void {\r\n    this.state = 'idle';\r\n    this.error = null;\r\n  }\r\n}\r\n\r\n/**\r\n * 타임아웃 프로미스 생성 함수\r\n * @param ms 타임아웃 시간(ms)\r\n */\r\nexport function timeoutPromise(ms: number): Promise<never> {\r\n  return new Promise((_, reject) => {\r\n    setTimeout(() => reject(new Error(`Request timed out after ${ms}ms`)), ms);\r\n  });\r\n}\r\n\r\n/**\r\n * 타임아웃이 있는 fetch 요청 함수\r\n * @param url 요청 URL\r\n * @param options fetch 옵션\r\n * @param timeout 타임아웃 시간(ms)\r\n */\r\nexport async function fetchWithTimeout(\r\n  url: string,\r\n  options: RequestInit = {},\r\n  timeout: number = DEFAULT_TIMEOUT\r\n): Promise<Response> {\r\n  return Promise.race([\r\n    fetch(url, options),\r\n    timeoutPromise(timeout)\r\n  ]);\r\n}\r\n\r\n/**\r\n * 에러 응답 처리 함수\r\n * @param response fetch 응답 객체\r\n */\r\nexport async function handleErrorResponse(response: Response): Promise<Response> {\r\n  if (!response.ok) {\r\n    let errorMessage = `HTTP error! status: ${response.status}`;\r\n    \r\n    try {\r\n      const data = await response.json();\r\n      if (data.message || data.error) {\r\n        errorMessage = data.message || data.error;\r\n      }\r\n    } catch (e) {\r\n      // JSON 파싱 오류 무시\r\n    }\r\n    \r\n    throw new Error(errorMessage);\r\n  }\r\n  \r\n  return response;\r\n}\r\n\r\n/**\r\n * JSON 데이터를 가져오는 함수\r\n * @param url 요청 URL\r\n * @param options fetch 옵션\r\n * @param timeout 타임아웃 시간(ms)\r\n */\r\nexport async function fetchJson<T = any>(\r\n  url: string,\r\n  options: RequestInit = {},\r\n  timeout: number = DEFAULT_TIMEOUT\r\n): Promise<T> {\r\n  const response = await fetchWithTimeout(url, {\r\n    ...options,\r\n    headers: {\r\n      ...options.headers,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json'\r\n    }\r\n  }, timeout);\r\n  \r\n  await handleErrorResponse(response);\r\n  return response.json();\r\n}\r\n\r\n/**\r\n * 요청 디바운스 함수\r\n * @param key 요청 식별자\r\n * @param callback 실행할 콜백 함수\r\n * @param delay 디바운스 지연 시간(ms)\r\n */\r\nexport function debounceRequest<T>(\r\n  key: string,\r\n  callback: () => Promise<T>,\r\n  delay: number = 300\r\n): Promise<T> {\r\n  const requestTimers: Record<string, NodeJS.Timeout> = {};\r\n  \r\n  return new Promise((resolve, reject) => {\r\n    if (requestTimers[key]) {\r\n      clearTimeout(requestTimers[key]);\r\n    }\r\n    \r\n    requestTimers[key] = setTimeout(async () => {\r\n      try {\r\n        const result = await callback();\r\n        resolve(result);\r\n      } catch (error) {\r\n        reject(error);\r\n      } finally {\r\n        delete requestTimers[key];\r\n      }\r\n    }, delay);\r\n  });\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\storage-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\string-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\system-monitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\type-converters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\typing-performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\app\\utils\\validation-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\lib\\mysql.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\lib\\prisma.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\app-lifecycle.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\browser.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\constants.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\database.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\dialogs.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\electron-config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\ipc-handlers.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\keyboard.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\main.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\memory-manager-native.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\memory-manager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\native-module-loader.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\settings.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\stats.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\tray.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\window.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\workers\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\workers\\modules\\gpu-simulator.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\workers\\modules\\memory-manager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\workers\\modules\\pattern-analyzer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\workers\\modules\\stats-calculator.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\workers\\modules\\utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\workers\\stat-worker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\workers\\worker-manager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\workers\\worker-thread.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\main\\workers\\worker-thread.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\preload.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\renderer\\preload-restart.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\renderer\\restart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\server\\.eslintrc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\types\\app-types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\types\\common.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\types\\gpu-types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\types\\memory-settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\types\\memory-types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\types\\native-module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]},{"filePath":"C:\\Users\\user\\Desktop\\loop\\src\\types\\optimization-level.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}}]}]
